// Code generated by gamwsdl/main.go. DO NOT EDIT.
package company

import (
	"github.com/knakazawa99/gam-sdk-go/pkg/gam/requestbody"
	gamxml "github.com/knakazawa99/gam-sdk-go/pkg/xml"
)

// ObjectValue
//
// Contains an object value.
// <p>
// <b>This object is experimental!
// <code>ObjectValue</code> is an experimental, innovative, and rapidly
// changing new feature for Ad Manager. Unfortunately, being on the bleeding edge means that
// we may make backwards-incompatible changes to
// <code>ObjectValue</code>. We will inform the community when this feature
// is no longer experimental.</b>
//

type ObjectValue struct {
}

// ChildPublisher
//
// A {@code ChildPublisher} represents a network being managed as part of Multiple Customer
// Management.
//

type ChildPublisher struct {

	// ApprovedDelegationType
	//
	// Type of delegation the parent has been approved to have over the child. This field is
	// read-only, and set to the proposed delegation type value {@code proposedDelegationType} upon
	// approval by the child network. The value remains null if the parent network has not been
	// approved.
	//

	ApprovedDelegationType *DelegationType `xml:"approvedDelegationType"`

	// ProposedDelegationType
	//
	// Type of delegation the parent has proposed to have over the child, pending approval of the
	// child network. Set the value of this field to the delegation type you intend this network to
	// have over the child network. Upon approval by the child network, its value is copied to {@code
	// approvedDelegationType}, and {@code proposedDelegationType} is set to null.
	//

	ProposedDelegationType *DelegationType `xml:"proposedDelegationType"`

	// Status
	//
	// Status of the delegation relationship between parent and child.
	//

	Status *DelegationStatus `xml:"status"`

	// AccountStatus
	//
	// Status of the child publisher's Ad Manager account based on {@code ChildPublisher#status} as
	// well as Google's policy verification results. This field is read-only.
	//

	AccountStatus *AccountStatus `xml:"accountStatus"`

	// ChildNetworkCode
	//
	// Network code of child network.
	//

	ChildNetworkCode *string `xml:"childNetworkCode"`

	// SellerId
	//
	// The child publisher's seller ID, as specified in the parent publisher's sellers.json file.
	//
	// <p>This field is only relevant for Manage Inventory child publishers.
	//

	SellerId *string `xml:"sellerId"`

	// ProposedRevenueShareMillipercent
	//
	// The proposed revenue share that the parent publisher will receive in millipercentage (values 0
	// to 100000) for Manage Account proposals. For example, 15% is 15000 millipercent.
	//
	// <p>For updates, this field is read-only. Use company actions to propose new revenue share
	// agreements for existing MCM children. This field is ignored for Manage Inventory proposals.
	//

	ProposedRevenueShareMillipercent *int64 `xml:"proposedRevenueShareMillipercent"`

	// OnboardingTasks
	//
	// The child publisher's pending onboarding tasks.
	//
	// <p>This will only be populated if the child publisher's {@code AccountStatus} is {@code
	// PENDING_GOOGLE_APPROVAL}.
	// This attribute is read-only.
	//

	OnboardingTasks []*OnboardingTask `xml:"onboardingTasks"`
}

// ApiError
//
// The API error base class that provides details about an error that occurred
// while processing a service request.
//
// <p>The OGNL field path is provided for parsers to identify the request data
// element that may have caused the error.</p>
//

type ApiError struct {
	Reason string `xml:"reason"`
}

// ApiException
//
// Exception class for holding a list of service errors.
//

type ApiException struct {
	Reason string `xml:"reason"`
}

// ApiVersionError
//
// Errors related to the usage of API versions.
//

type ApiVersionError struct {
	Reason string `xml:"reason"`
}

// ApplicationException
//
// Base class for exceptions.
//

type ApplicationException struct {
	Reason string `xml:"reason"`
}

// AppliedLabel
//
// Represents a {@link Label} that can be applied to an entity. To negate an inherited label, create
// an {@code AppliedLabel} with {@code labelId} as the inherited label's ID and {@code isNegated}
// set to true.
//

type AppliedLabel struct {

	// LabelId
	//
	// The ID of a created {@link Label}.
	//

	LabelId *int64 `xml:"labelId"`

	// IsNegated
	//
	// {@code isNegated} should be set to {@code true} to negate the effects of {@code labelId}.
	//

	IsNegated *bool `xml:"isNegated"`
}

// AuthenticationError
//
// An error for an exception that occurred when authenticating.
//

type AuthenticationError struct {
	Reason string `xml:"reason"`
}

// BooleanValue
//
// Contains a boolean value.
//

type BooleanValue struct {

	// Value
	//
	// The boolean value.
	//

	Value *bool `xml:"value"`
}

// CollectionSizeError
//
// Error for the size of the collection being too large
//

type CollectionSizeError struct {
	Reason string `xml:"reason"`
}

// CommonError
//
// A place for common errors that can be used across services.
//

type CommonError struct {
	Reason string `xml:"reason"`
}

// CompanyAction
//
// Represents the actions that can be performed on {@code Company} objects.
//

type CompanyAction struct {
}

// CompanyCreditStatusError
//
// Lists all errors due to {@link Company#creditStatus}.
//

type CompanyCreditStatusError struct {
	Reason string `xml:"reason"`
}

// Company
//
// A {@code Company} represents an agency, a single advertiser or an entire advertising network.
//

type Company struct {

	// Id
	//
	// Uniquely identifies the {@code Company}. This value is read-only and is assigned by Google when
	// the company is created. This attribute is required for updates.
	//

	Id *int64 `xml:"id"`

	// Name
	//
	// The full name of the company. This attribute is required and has a maximum length of 127
	// characters.
	//

	Name *string `xml:"name"`

	// Type
	//
	// Specifies what kind of company this is. This attribute is required.
	//

	Type *CompanyType `xml:"type"`

	// Address
	//
	// Specifies the address of the company. This attribute is optional and has a maximum length of
	// 1024 characters.
	//

	Address *string `xml:"address"`

	// Email
	//
	// Specifies the email of the company. This attribute is optional and has a maximum length of 128
	// characters.
	//

	Email *string `xml:"email"`

	// FaxPhone
	//
	// Specifies the fax phone number of the company. This attribute is optional and has a maximum
	// length of 63 characters.
	//

	FaxPhone *string `xml:"faxPhone"`

	// PrimaryPhone
	//
	// Specifies the primary phone number of the company. This attribute is optional and has a maximum
	// length of 63 characters.
	//

	PrimaryPhone *string `xml:"primaryPhone"`

	// ExternalId
	//
	// Specifies the external ID of the company. This attribute is optional and has a maximum length
	// of 255 characters.
	//

	ExternalId *string `xml:"externalId"`

	// Comment
	//
	// Specifies the comment of the company. This attribute is optional and has a maximum length of
	// 1024 characters.
	//

	Comment *string `xml:"comment"`

	// CreditStatus
	//
	// Specifies the company's credit status. This attribute is optional and defaults to {@link
	// CreditStatus#ACTIVE} when basic credit status settings are enabled, and {@link
	// CreditStatus#ON_HOLD} when advanced credit status settings are enabled.
	//

	CreditStatus *CompanyCreditStatus `xml:"creditStatus"`

	// AppliedLabels
	//
	// The set of labels applied to this company.
	//

	AppliedLabels []*AppliedLabel `xml:"appliedLabels"`

	// PrimaryContactId
	//
	// The ID of the {@link Contact} who is acting as the primary contact for this company. This
	// attribute is optional.
	//

	PrimaryContactId *int64 `xml:"primaryContactId"`

	// AppliedTeamIds
	//
	// The IDs of all teams that this company is on directly.
	//

	AppliedTeamIds []*int64 `xml:"appliedTeamIds"`

	// ThirdPartyCompanyId
	//
	// Specifies the ID of the Google-recognized canonicalized form of this company. This attribute is
	// optional.
	//

	ThirdPartyCompanyId *int `xml:"thirdPartyCompanyId"`

	// LastModifiedDateTime
	//
	// The date and time this company was last modified.
	//

	LastModifiedDateTime *DateTime `xml:"lastModifiedDateTime"`

	// ChildPublisher
	//
	// Info required for when Company Type is CHILD_PUBLISHER.
	//

	ChildPublisher *ChildPublisher `xml:"childPublisher"`

	// ViewabilityProvider
	//
	// Info required for when Company Type is VIEWABILITY_PROVIDER.
	//

	ViewabilityProvider *ViewabilityProvider `xml:"viewabilityProvider"`
}

// CompanyError
//
// A list of all errors associated with companies.
//

type CompanyError struct {
	Reason string `xml:"reason"`
}

// CompanyPage
//
// Captures a page of {@link Company} objects.
//

type CompanyPage struct {

	// TotalResultSetSize
	//
	// The size of the total result set to which this page belongs.
	//

	TotalResultSetSize *int `xml:"totalResultSetSize"`

	// StartIndex
	//
	// The absolute index in the total result set on which this page begins.
	//

	StartIndex *int `xml:"startIndex"`

	// Results
	//
	// The collection of companies contained within this page.
	//

	Results []*Company `xml:"results"`
}

// CrossSellError
//
// Lists all errors associated with cross selling.
//

type CrossSellError struct {
	Reason string `xml:"reason"`
}

// CustomFieldValueError
//
// Errors specific to editing custom field values
//

type CustomFieldValueError struct {
	Reason string `xml:"reason"`
}

// Date
//
// Represents a date.
//

type Date struct {

	// Year
	//
	// Year (e.g., 2009)
	//

	Year *int `xml:"year"`

	// Month
	//
	// Month (1..12)
	//

	Month *int `xml:"month"`

	// Day
	//
	// Day (1..31)
	//

	Day *int `xml:"day"`
}

// DateTime
//
// Represents a date combined with the time of day.
//

type DateTime struct {

	// Date

	Date *Date `xml:"date"`

	// Hour

	Hour *int `xml:"hour"`

	// Minute

	Minute *int `xml:"minute"`

	// Second

	Second *int `xml:"second"`

	// TimeZoneId

	TimeZoneId *string `xml:"timeZoneId"`
}

// DateTimeValue
//
// Contains a date-time value.
//

type DateTimeValue struct {

	// Value
	//
	// The {@code DateTime} value.
	//

	Value *DateTime `xml:"value"`
}

// DateValue
//
// Contains a date value.
//

type DateValue struct {

	// Value
	//
	// The {@code Date} value.
	//

	Value *Date `xml:"value"`
}

// ReInviteAction
//
// The action used by the parent network to send a new invitation with a potentially updated
// proposal to a rejected or withdrawn child publisher.
//

type ReInviteAction struct {

	// CompanyAction
	*CompanyAction

	// ProposedDelegationType
	//
	// The type of delegation the parent has proposed to have over the child, pending approval of the
	// child publisher.
	//

	ProposedDelegationType *DelegationType `xml:"proposedDelegationType"`

	// ProposedRevenueShareMillipercent
	//
	// The proposed revenue share that the parent publisher will receive in millipercentage (values 0
	// to 100000) for Manage Account proposals. For example, 15% is 15000 millipercent.
	//
	// <p>This field is ignored for Manage Inventory proposals.
	//

	ProposedRevenueShareMillipercent *int64 `xml:"proposedRevenueShareMillipercent"`

	// ProposedEmail
	//
	// The updated email of the child publisher.
	//
	// <p>This field is optional. If set, the scoping statement many not evaluate to more than one
	// rejected or withdrawn child publisher.
	//

	ProposedEmail *string `xml:"proposedEmail"`
}

func NewReInviteAction(

	proposedDelegationType *DelegationType,

	proposedRevenueShareMillipercent *int64,

	proposedEmail *string,

) (requestbody.PerformAction, error) {
	return &ReInviteAction{

		ProposedDelegationType: proposedDelegationType,

		ProposedRevenueShareMillipercent: proposedRevenueShareMillipercent,

		ProposedEmail: proposedEmail,
	}, nil
}
func (a ReInviteAction) GetPerformActionBody() (string, error) {
	performActionXML, err := gamxml.DeepMarshal(a, true)
	if err != nil {
		return "", err
	}
	return string(performActionXML), nil
}

func (a ReInviteAction) GetActionType() string {
	return "ReInviteAction"
}

// EndAgreementAction
//
// The action used by the parent network to withdraw from being the MCM parent for a child.
//

type EndAgreementAction struct {
}

func NewEndAgreementAction() (requestbody.PerformAction, error) {
	return &EndAgreementAction{}, nil
}
func (a EndAgreementAction) GetPerformActionBody() (string, error) {
	performActionXML, err := gamxml.DeepMarshal(a, true)
	if err != nil {
		return "", err
	}
	return string(performActionXML), nil
}

func (a EndAgreementAction) GetActionType() string {
	return "EndAgreementAction"
}

// ExchangeSignupApiError
//
// {@link ApiError} for exceptions thrown by ExchangeSignupService.
//

type ExchangeSignupApiError struct {
	Reason string `xml:"reason"`
}

// FeatureError
//
// Errors related to feature management.  If you attempt using a feature that is not available to
// the current network you'll receive a FeatureError with the missing feature as the trigger.
//

type FeatureError struct {
	Reason string `xml:"reason"`
}

// FieldPathElement
//
// A segment of a field path. Each dot in a field path defines a new segment.
//

type FieldPathElement struct {

	// Field
	//
	// The name of a field in lower camelcase. (e.g. "biddingStrategy")
	//

	Field *string `xml:"field"`

	// Index
	//
	// For list fields, this is a 0-indexed position in the list. Null for non-list fields.
	//

	Index *int `xml:"index"`
}

// InternalApiError
//
// Indicates that a server-side error has occured. {@code InternalApiError}s
// are generally not the result of an invalid request or message sent by the
// client.
//

type InternalApiError struct {
	Reason string `xml:"reason"`
}

// InvalidEmailError
//
// Caused by supplying a value for an email attribute that is not a valid
// email address.
//

type InvalidEmailError struct {
	Reason string `xml:"reason"`
}

// InvalidUrlError
//
// Lists all errors associated with URLs.
//

type InvalidUrlError struct {
	Reason string `xml:"reason"`
}

// InventoryClientApiError
//
// {@link ApiError} for common exceptions thrown when accessing AdSense InventoryClient.
//

type InventoryClientApiError struct {
	Reason string `xml:"reason"`
}

// LabelEntityAssociationError
//
// Errors specific to creating label entity associations.
//

type LabelEntityAssociationError struct {
	Reason string `xml:"reason"`
}

// McmError
//
// An error for multiple customer management.
//

type McmError struct {
	Reason string `xml:"reason"`
}

// NetworkError
//
// An error for a network.
//

type NetworkError struct {
	Reason string `xml:"reason"`
}

// NotNullError
//
// Caused by supplying a null value for an attribute that cannot be null.
//

type NotNullError struct {
	Reason string `xml:"reason"`
}

// NullError
//
// Caused by supplying a non-null value for an attribute that should be null.
//

type NullError struct {
	Reason string `xml:"reason"`
}

// NumberValue
//
// Contains a numeric value.
//

type NumberValue struct {

	// Value
	//
	// The numeric value represented as a string.
	//

	Value *string `xml:"value"`
}

// ParseError
//
// Lists errors related to parsing.
//

type ParseError struct {
	Reason string `xml:"reason"`
}

// PermissionError
//
// Errors related to incorrect permission.
//

type PermissionError struct {
	Reason string `xml:"reason"`
}

// PublisherQueryLanguageContextError
//
// An error that occurs while executing a PQL query contained in
// a {@link Statement} object.
//

type PublisherQueryLanguageContextError struct {
	Reason string `xml:"reason"`
}

// PublisherQueryLanguageSyntaxError
//
// An error that occurs while parsing a PQL query contained in a
// {@link Statement} object.
//

type PublisherQueryLanguageSyntaxError struct {
	Reason string `xml:"reason"`
}

// QuotaError
//
// Describes a client-side error on which a user is attempting
// to perform an action to which they have no quota remaining.
//

type QuotaError struct {
	Reason string `xml:"reason"`
}

// RegExError
//
// Caused by supplying a value for an object attribute that does not conform
// to a documented valid regular expression.
//

type RegExError struct {
	Reason string `xml:"reason"`
}

// RequiredCollectionError
//
// A list of all errors to be used for validating sizes of collections.
//

type RequiredCollectionError struct {
	Reason string `xml:"reason"`
}

// RequiredError
//
// Errors due to missing required field.
//

type RequiredError struct {
	Reason string `xml:"reason"`
}

// RequiredNumberError
//
// A list of all errors to be used in conjunction with required number
// validators.
//

type RequiredNumberError struct {
	Reason string `xml:"reason"`
}

// ResendInvitationAction
//
// The action used by the parent network to resend an invitation email with the same proposal to an
// expired child publisher.
//

type ResendInvitationAction struct {
}

func NewResendInvitationAction() (requestbody.PerformAction, error) {
	return &ResendInvitationAction{}, nil
}
func (a ResendInvitationAction) GetPerformActionBody() (string, error) {
	performActionXML, err := gamxml.DeepMarshal(a, true)
	if err != nil {
		return "", err
	}
	return string(performActionXML), nil
}

func (a ResendInvitationAction) GetActionType() string {
	return "ResendInvitationAction"
}

// ServerError
//
// Errors related to the server.
//

type ServerError struct {
	Reason string `xml:"reason"`
}

// SetValue
//
// Contains a set of {@link Value Values}. May not contain duplicates.
//

type SetValue struct {

	// Value
	*Value

	// Values
	//
	// The values. They must all be the same type of {@code Value} and not contain duplicates.
	//

	Values []*Value `xml:"values"`
}

// SiteError
//
// Errors associated with the {@code Site}.
//

type SiteError struct {
	Reason string `xml:"reason"`
}

// SoapRequestHeader
//
// Represents the SOAP request header used by API requests.
//

type SoapRequestHeader struct {

	// NetworkCode
	//
	// The network code to use in the context of a request.
	//

	NetworkCode *string `xml:"networkCode"`

	// ApplicationName
	//
	// The name of client library application.
	//

	ApplicationName *string `xml:"applicationName"`
}

// SoapResponseHeader
//
// Represents the SOAP request header used by API responses.
//

type SoapResponseHeader struct {

	// RequestId

	RequestId *string `xml:"requestId"`

	// ResponseTime

	ResponseTime *int64 `xml:"responseTime"`
}

// Statement
//
// Captures the {@code WHERE}, {@code ORDER BY} and {@code LIMIT} clauses of a
// PQL query. Statements are typically used to retrieve objects of a predefined
// domain type, which makes SELECT clause unnecessary.
// <p>
// An example query text might be {@code "WHERE status = 'ACTIVE' ORDER BY id
// LIMIT 30"}.
// </p>
// <p>
// Statements support bind variables. These are substitutes for literals
// and can be thought of as input parameters to a PQL query.
// </p>
// <p>
// An example of such a query might be {@code "WHERE id = :idValue"}.
// </p>
// <p>
// Statements also support use of the LIKE keyword. This provides wildcard string matching.
// </p>
// <p>
// An example of such a query might be {@code "WHERE name LIKE '%searchString%'"}.
// </p>
// The value for the variable idValue must then be set with an object of type
// {@link Value}, e.g., {@link NumberValue}, {@link TextValue} or
// {@link BooleanValue}.
//

type Statement struct {

	// Query
	//
	// Holds the query in PQL syntax. The syntax is:<br>
	// <code>[WHERE <condition> {[AND | OR] <condition> ...}]</code><br>
	// <code>[ORDER BY <property> [ASC | DESC]]</code><br>
	// <code>[LIMIT {[<offset>,] <count>} | {<count> OFFSET <offset>}]</code><br>
	// <p>
	// <code><condition></code><br>
	// &nbsp;&nbsp;&nbsp;&nbsp;
	// <code>:= <property> {< | <= | > | >= | = | != } <value></code><br>
	// <code><condition></code><br>
	// &nbsp;&nbsp;&nbsp;&nbsp;
	// <code>:= <property> {< | <= | > | >= | = | != } <bind variable></code><br>
	// <code><condition> := <property> IN <list></code><br>
	// <code><condition> := <property> IS NULL</code><br>
	// <code><condition> := <property> LIKE <wildcard%match></code><br>
	// <code><bind variable> := :<name></code><br>
	// </p>
	//

	Query *string `xml:"query"`

	// Values
	//
	// Holds keys and values for bind variables and their values. The key is the
	// name of the bind variable. The value is the literal value of the variable.
	// <p>
	// In the example {@code "WHERE status = :bindStatus ORDER BY id LIMIT 30"},
	// the bind variable, represented by {@code :bindStatus} is named {@code
	// bindStatus}, which would also be the parameter map key. The bind variable's
	// value would be represented by a parameter map value of type
	// {@link TextValue}. The final result, for example, would be an entry of
	// {@code "bindStatus" => StringParam("ACTIVE")}.
	// </p>
	//

	Values []*String_ValueMapEntry `xml:"values"`
}

// StatementError
//
// An error that occurs while parsing {@link Statement} objects.
//

type StatementError struct {
	Reason string `xml:"reason"`
}

// StringFormatError
//
// A list of error code for reporting invalid content of input strings.
//

type StringFormatError struct {
	Reason string `xml:"reason"`
}

// StringLengthError
//
// Errors for Strings which do not meet given length constraints.
//

type StringLengthError struct {
	Reason string `xml:"reason"`
}

// String_ValueMapEntry
//
// This represents an entry in a map with a key of type String
// and value of type Value.
//

type String_ValueMapEntry struct {

	// Key

	Key *string `xml:"key"`

	// Value

	Value *Value `xml:"value"`
}

// TeamError
//
// Errors related to a Team.
//

type TeamError struct {
	Reason string `xml:"reason"`
}

// TextValue
//
// Contains a string value.
//

type TextValue struct {

	// Value
	//
	// The string value.
	//

	Value *string `xml:"value"`
}

// TypeError
//
// An error for a field which is an invalid type.
//

type TypeError struct {
	Reason string `xml:"reason"`
}

// UniqueError
//
// An error for a field which must satisfy a uniqueness constraint
//

type UniqueError struct {
	Reason string `xml:"reason"`
}

// UpdateResult
//
// Represents the result of performing an action on objects.
//

type UpdateResult struct {

	// NumChanges
	//
	// The number of objects that were changed as a result of performing the
	// action.
	//

	NumChanges *int `xml:"numChanges"`
}

// Value
//
// {@code Value} represents a value.
//

type Value struct {
}

// ViewabilityProvider
//
// Information required for {@link Company} of Type VIEWABILITY_PROVIDER. It contains all of the
// data needed to capture viewability metrics.
//

type ViewabilityProvider struct {

	// VendorKey
	//
	// The key for this ad verification vendor.
	//

	VendorKey *string `xml:"vendorKey"`

	// VerificationScriptUrl
	//
	// The URL that hosts the verification script for this vendor.
	//

	VerificationScriptUrl *string `xml:"verificationScriptUrl"`

	// VerificationParameters
	//
	// The parameters that will be passed to the verification script.
	//

	VerificationParameters *string `xml:"verificationParameters"`

	// VerificationRejectionTrackerUrl
	//
	// The URL that should be pinged if the verification script cannot be run.
	//

	VerificationRejectionTrackerUrl *string `xml:"verificationRejectionTrackerUrl"`
}

// DelegationStatus
//
// Status of the association between networks. When a parent network requests access, it is marked
// as pending. Once the child network approves, it is marked as approved.
type DelegationStatus string

const (

	// DelegationStatusUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	DelegationStatusUnknown DelegationStatus = "UNKNOWN"

	// DelegationStatusApproved
	//
	// The association request from the parent network is approved by the child network.
	//
	DelegationStatusApproved DelegationStatus = "APPROVED"

	// DelegationStatusPending
	//
	// The association request from the parent network is pending child network approval or rejection.
	//
	DelegationStatusPending DelegationStatus = "PENDING"

	// DelegationStatusRejected
	//
	// The association request from the parent network is rejected or revoked by the child network.
	//
	DelegationStatusRejected DelegationStatus = "REJECTED"

	// DelegationStatusWithdrawn
	//
	// The association request from the parent network is withdrawn by the parent network.
	//
	DelegationStatusWithdrawn DelegationStatus = "WITHDRAWN"
)

// DelegationType
//
// The type of delegation of the child network to the parent network in MCM.
type DelegationType string

const (

	// DelegationTypeUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	DelegationTypeUnknown DelegationType = "UNKNOWN"

	// DelegationTypeManageAccount
	//
	// The parent network gets complete access to the child network's account
	//
	DelegationTypeManageAccount DelegationType = "MANAGE_ACCOUNT"

	// DelegationTypeManageInventory
	//
	// A subset of the ad requests from the child are delegated to the parent, determined by the tag
	// on the child network's web pages. The parent network does not have access to the child network,
	// as a subset of the inventory could be owned and operated by the child network.
	//
	DelegationTypeManageInventory DelegationType = "MANAGE_INVENTORY"
)

// AccountStatus
//
// Status of the MCM child publisher's Ad Manager account with respect to delegated serving. In
// order for the child network to be served ads for MCM, it must have accepted the invite from the
// parent network, and must have passed Google's policy compliance verifications.
type AccountStatus string

const (

	// AccountStatusUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	AccountStatusUnknown AccountStatus = "UNKNOWN"

	// AccountStatusInvited
	//
	// The child publisher has not acted on the invite from the parent.
	//
	AccountStatusInvited AccountStatus = "INVITED"

	// AccountStatusDeclined
	//
	// The child publisher has declined the invite.
	//
	AccountStatusDeclined AccountStatus = "DECLINED"

	// AccountStatusPendingGoogleApproval
	//
	// The child publisher has accepted the invite, and is awaiting Google's policy compliance
	// verifications.
	//
	AccountStatusPendingGoogleApproval AccountStatus = "PENDING_GOOGLE_APPROVAL"

	// AccountStatusApproved
	//
	// The child publisher accepted the invite, and Google found it to be compliant with its policies,
	// i.e. no policy violations were found, and the child publisher can be served ads.
	//
	AccountStatusApproved AccountStatus = "APPROVED"

	// AccountStatusClosedPolicyViolation
	//
	// The child publisher accepted the invite, but was disapproved by Google for violating its
	// policies.
	//
	AccountStatusClosedPolicyViolation AccountStatus = "CLOSED_POLICY_VIOLATION"

	// AccountStatusClosedInvalidActivity
	//
	// The child publisher accepted the invite, but was disapproved by Google for invalid activity.
	//
	AccountStatusClosedInvalidActivity AccountStatus = "CLOSED_INVALID_ACTIVITY"

	// AccountStatusClosedByPublisher
	//
	// The child publisher has closed their own account.
	//
	AccountStatusClosedByPublisher AccountStatus = "CLOSED_BY_PUBLISHER"

	// AccountStatusDisapprovedIneligible
	//
	// The child publisher accepted the invite, but was disapproved as ineligible by Google.
	//
	AccountStatusDisapprovedIneligible AccountStatus = "DISAPPROVED_INELIGIBLE"

	// AccountStatusDisapprovedDuplicateAccount
	//
	// The child publisher accepted the invite, but was disapproved by Google for being a duplicate of
	// another account.
	//
	AccountStatusDisapprovedDuplicateAccount AccountStatus = "DISAPPROVED_DUPLICATE_ACCOUNT"

	// AccountStatusExpired
	//
	// The invite was sent to the child publisher more than 90 days ago, due to which it has been
	// deactivated.
	//
	AccountStatusExpired AccountStatus = "EXPIRED"

	// AccountStatusInactive
	//
	// Either the child publisher disconnected from the parent network, or the parent network withdrew
	// the invite.
	//
	AccountStatusInactive AccountStatus = "INACTIVE"

	// AccountStatusDeactivatedByAdManager
	//
	// The association between the parent and child publishers was deactivated by Google Ad Manager.
	//
	AccountStatusDeactivatedByAdManager AccountStatus = "DEACTIVATED_BY_AD_MANAGER"
)

// ApiVersionErrorReasonReason
const (

	// ApiVersionErrorReasonReasonUpdateToNewerVersion
	//
	// Indicates that the operation is not allowed in the version the request
	// was made in.
	//
	ApiVersionErrorReasonReasonUpdateToNewerVersion = "UPDATE_TO_NEWER_VERSION"

	// ApiVersionErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ApiVersionErrorReasonReasonUnknown = "UNKNOWN"
)

// AuthenticationErrorReasonReason
const (

	// AuthenticationErrorReasonReasonAmbiguousSoapRequestHeader
	//
	// The SOAP message contains a request header with an ambiguous definition of the authentication
	// header fields. This means either the {@code authToken} and {@code oAuthToken} fields were
	// both null or both were specified. Exactly one value should be specified with each request.
	//
	AuthenticationErrorReasonReasonAmbiguousSoapRequestHeader = "AMBIGUOUS_SOAP_REQUEST_HEADER"

	// AuthenticationErrorReasonReasonInvalidEmail
	//
	// The login provided is invalid.
	//
	AuthenticationErrorReasonReasonInvalidEmail = "INVALID_EMAIL"

	// AuthenticationErrorReasonReasonAuthenticationFailed
	//
	// Tried to authenticate with provided information, but failed.
	//
	AuthenticationErrorReasonReasonAuthenticationFailed = "AUTHENTICATION_FAILED"

	// AuthenticationErrorReasonReasonInvalidOauthSignature
	//
	// The OAuth provided is invalid.
	//
	AuthenticationErrorReasonReasonInvalidOauthSignature = "INVALID_OAUTH_SIGNATURE"

	// AuthenticationErrorReasonReasonInvalidService
	//
	// The specified service to use was not recognized.
	//
	AuthenticationErrorReasonReasonInvalidService = "INVALID_SERVICE"

	// AuthenticationErrorReasonReasonMissingSoapRequestHeader
	//
	// The SOAP message is missing a request header with an {@code authToken} and optional {@code
	// networkCode}.
	//
	AuthenticationErrorReasonReasonMissingSoapRequestHeader = "MISSING_SOAP_REQUEST_HEADER"

	// AuthenticationErrorReasonReasonMissingAuthenticationHttpHeader
	//
	// The HTTP request is missing a request header with an {@code authToken}
	//
	AuthenticationErrorReasonReasonMissingAuthenticationHttpHeader = "MISSING_AUTHENTICATION_HTTP_HEADER"

	// AuthenticationErrorReasonReasonMissingAuthentication
	//
	// The request is missing an {@code authToken}
	//
	AuthenticationErrorReasonReasonMissingAuthentication = "MISSING_AUTHENTICATION"

	// AuthenticationErrorReasonReasonNetworkApiAccessDisabled
	//
	// The network does not have API access enabled.
	//
	AuthenticationErrorReasonReasonNetworkApiAccessDisabled = "NETWORK_API_ACCESS_DISABLED"

	// AuthenticationErrorReasonReasonNoNetworksToAccess
	//
	// The user is not associated with any network.
	//
	AuthenticationErrorReasonReasonNoNetworksToAccess = "NO_NETWORKS_TO_ACCESS"

	// AuthenticationErrorReasonReasonNetworkNotFound
	//
	// No network for the given {@code networkCode} was found.
	//
	AuthenticationErrorReasonReasonNetworkNotFound = "NETWORK_NOT_FOUND"

	// AuthenticationErrorReasonReasonNetworkCodeRequired
	//
	// The user has access to more than one network, but did not provide a {@code networkCode}.
	//
	AuthenticationErrorReasonReasonNetworkCodeRequired = "NETWORK_CODE_REQUIRED"

	// AuthenticationErrorReasonReasonConnectionError
	//
	// An error happened on the server side during connection to authentication service.
	//
	AuthenticationErrorReasonReasonConnectionError = "CONNECTION_ERROR"

	// AuthenticationErrorReasonReasonGoogleAccountAlreadyAssociatedWithNetwork
	//
	// The user tried to create a test network using an account that already is associated with a
	// network.
	//
	AuthenticationErrorReasonReasonGoogleAccountAlreadyAssociatedWithNetwork = "GOOGLE_ACCOUNT_ALREADY_ASSOCIATED_WITH_NETWORK"

	// AuthenticationErrorReasonReasonUnderInvestigation
	//
	// The account is blocked and under investigation by the collections team. Please contact Google
	// for more information.
	//
	AuthenticationErrorReasonReasonUnderInvestigation = "UNDER_INVESTIGATION"

	// AuthenticationErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	AuthenticationErrorReasonReasonUnknown = "UNKNOWN"
)

// CollectionSizeErrorReasonReason
const (

	// CollectionSizeErrorReasonReasonTooLarge
	CollectionSizeErrorReasonReasonTooLarge = "TOO_LARGE"

	// CollectionSizeErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CollectionSizeErrorReasonReasonUnknown = "UNKNOWN"
)

// CommonErrorReasonReason
//
// Describes reasons for common errors
const (

	// CommonErrorReasonReasonNotFound
	//
	// Indicates that an attempt was made to retrieve an entity that does not
	// exist.
	//
	CommonErrorReasonReasonNotFound = "NOT_FOUND"

	// CommonErrorReasonReasonAlreadyExists
	//
	// Indicates that an attempt was made to create an entity that already
	// exists.
	//
	CommonErrorReasonReasonAlreadyExists = "ALREADY_EXISTS"

	// CommonErrorReasonReasonNotApplicable
	//
	// Indicates that a value is not applicable for given use case.
	//
	CommonErrorReasonReasonNotApplicable = "NOT_APPLICABLE"

	// CommonErrorReasonReasonDuplicateObject
	//
	// Indicates that two elements in the collection were identical.
	//
	CommonErrorReasonReasonDuplicateObject = "DUPLICATE_OBJECT"

	// CommonErrorReasonReasonCannotUpdate
	//
	// Indicates that an attempt was made to change an immutable field.
	//
	CommonErrorReasonReasonCannotUpdate = "CANNOT_UPDATE"

	// CommonErrorReasonReasonUnsupportedOperation
	//
	// Indicates that the requested operation is not supported.
	//
	CommonErrorReasonReasonUnsupportedOperation = "UNSUPPORTED_OPERATION"

	// CommonErrorReasonReasonConcurrentModification
	//
	// Indicates that another request attempted to update the same data in the same network
	// at about the same time. Please wait and try the request again.
	//
	CommonErrorReasonReasonConcurrentModification = "CONCURRENT_MODIFICATION"

	// CommonErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CommonErrorReasonReasonUnknown = "UNKNOWN"
)

// CompanyCreditStatusErrorReasonReason
//
// The reasons for the target error.
const (

	// CompanyCreditStatusErrorReasonReasonCompanyCreditStatusChangeNotAllowed
	//
	// The user's role does not have permission to change
	// {@link Company#creditStatus} from the default value. The default value is
	// {@link Company.CreditStatus#ACTIVE} for the Basic credit status setting
	// and {@link Company.CreditStatus#ON_HOLD} for the Advanced credit status
	// setting.
	//
	CompanyCreditStatusErrorReasonReasonCompanyCreditStatusChangeNotAllowed = "COMPANY_CREDIT_STATUS_CHANGE_NOT_ALLOWED"

	// CompanyCreditStatusErrorReasonReasonCannotUseCreditStatusSetting
	//
	// The network has not been enabled for editing credit status settings for
	// companies.
	//
	CompanyCreditStatusErrorReasonReasonCannotUseCreditStatusSetting = "CANNOT_USE_CREDIT_STATUS_SETTING"

	// CompanyCreditStatusErrorReasonReasonCannotUseAdvancedCreditStatusSetting
	//
	// The network has not been enabled for the Advanced credit status
	// settings for companies. {@link Company#creditStatus} must be either
	// {@code ACTIVE} or {@code INACTIVE}.
	//
	CompanyCreditStatusErrorReasonReasonCannotUseAdvancedCreditStatusSetting = "CANNOT_USE_ADVANCED_CREDIT_STATUS_SETTING"

	// CompanyCreditStatusErrorReasonReasonUnacceptableCompanyCreditStatusForOrder
	//
	// An order cannot be created or updated because the
	// {@link Order#advertiserId} or the {@link Order#agencyId} it is associated
	// with has {@link Company#creditStatus} that is not {@code ACTIVE} or
	// {@code ON_HOLD}.
	//
	CompanyCreditStatusErrorReasonReasonUnacceptableCompanyCreditStatusForOrder = "UNACCEPTABLE_COMPANY_CREDIT_STATUS_FOR_ORDER"

	// CompanyCreditStatusErrorReasonReasonUnacceptableCompanyCreditStatusForLineItem
	//
	// A line item cannot be created for the order because the
	// {@link Order#advertiserId} or {Order#agencyId} it is associated with has
	// {@link Company#creditStatus} that is not {@code ACTIVE} or
	// {@code ON_HOLD}.
	//
	CompanyCreditStatusErrorReasonReasonUnacceptableCompanyCreditStatusForLineItem = "UNACCEPTABLE_COMPANY_CREDIT_STATUS_FOR_LINE_ITEM"

	// CompanyCreditStatusErrorReasonReasonCannotBlockCompanyTooManyApprovedOrders
	//
	// The company cannot be blocked because there are more than 200 approved
	// orders of the company. Archive some, so that there are less than 200 of
	// them.
	//
	CompanyCreditStatusErrorReasonReasonCannotBlockCompanyTooManyApprovedOrders = "CANNOT_BLOCK_COMPANY_TOO_MANY_APPROVED_ORDERS"

	// CompanyCreditStatusErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CompanyCreditStatusErrorReasonReasonUnknown = "UNKNOWN"
)

// CompanyCreditStatusType
//
// Specifies the credit-worthiness of the company for which the publisher runs an order. By doing
// so, the publisher can control the running of campaigns for the company. A publisher can choose
// between Basic and Advanced Credit Status settings. This feature needs to be enabled in the Ad
// Manager web site. Also the kind of setting you need - Basic or Advanced must be configured. If
// Basic is enabled then, the values allowed are {@code ACTIVE} and {@code INACTIVE}. If Advanced
// is chosen, then all values are allowed. Choosing an Advanced setting when only the Basic
// feature has been enabled, or using the Basic setting without turning the feature on will result
// in an error.
type CompanyCreditStatus string

const (

	// CompanyCreditStatusTypeActive
	//
	// When the credit status is active, all line items in all orders belonging to the company will
	// be served. This is a Basic as well as an Advanced Credit Status setting.
	//
	CompanyCreditStatusTypeActive CompanyCreditStatus = "ACTIVE"

	// CompanyCreditStatusTypeOnHold
	//
	// When the credit status is on hold, the publisher cannot activate new line items of the
	// company. However, line items that were activated before the credit status change will remain
	// active. You can still create orders and line items for the company. This is an Advanced
	// Credit Status setting.
	//
	CompanyCreditStatusTypeOnHold CompanyCreditStatus = "ON_HOLD"

	// CompanyCreditStatusTypeCreditStop
	//
	// When the credit status is credit stop, the publisher cannot activate new line items of the
	// company. However, line items that were activated before the credit status change will remain
	// active. You cannot create any new orders or line items for the company. This is an Advanced
	// Credit Status setting.
	//
	CompanyCreditStatusTypeCreditStop CompanyCreditStatus = "CREDIT_STOP"

	// CompanyCreditStatusTypeInactive
	//
	// When the credit status is inactive, the publisher cannot activate new line items of the
	// company. However, line items that were activated before the credit status change will remain
	// active. You cannot create any new orders or line items for the company. It is used to mark
	// companies with which business is to be discontinued. Such companies are not listed in Ad
	// Manager web site. This is a Basic as well as an Advanced Credit Status setting.
	//
	CompanyCreditStatusTypeInactive CompanyCreditStatus = "INACTIVE"

	// CompanyCreditStatusTypeBlocked
	//
	// When the credit status of a company is marked blocked, then all active line items belonging
	// to the company will stop serving with immediate effect. You cannot active new line items of
	// the company nor can you create any new orders or line items belonging to the company. This is
	// an Advanced Credit Status setting.
	//
	CompanyCreditStatusTypeBlocked CompanyCreditStatus = "BLOCKED"
)

// CompanyTypeType
//
// The type of the company. Once a company is created, it is not possible to change its type.
type CompanyType string

const (

	// CompanyTypeTypeHouseAdvertiser
	//
	// The publisher's own advertiser. When no outside advertiser buys its inventory, the publisher
	// may run its own advertising campaigns.
	//
	CompanyTypeTypeHouseAdvertiser CompanyType = "HOUSE_ADVERTISER"

	// CompanyTypeTypeHouseAgency
	//
	// The publisher's own agency.
	//
	CompanyTypeTypeHouseAgency CompanyType = "HOUSE_AGENCY"

	// CompanyTypeTypeAdvertiser
	//
	// A business entity that buys publisher inventory to run advertising campaigns. An advertiser
	// is optionally associated with one or more agencies.
	//
	CompanyTypeTypeAdvertiser CompanyType = "ADVERTISER"

	// CompanyTypeTypeAgency
	//
	// A business entity that offers services, such as advertising creation, placement, and
	// management, to advertisers.
	//
	CompanyTypeTypeAgency CompanyType = "AGENCY"

	// CompanyTypeTypeAdNetwork
	//
	// A company representing multiple advertisers and agencies.
	//
	CompanyTypeTypeAdNetwork CompanyType = "AD_NETWORK"

	// CompanyTypeTypePartner
	//
	// A company representing a partner.
	//
	CompanyTypeTypePartner CompanyType = "PARTNER"

	// CompanyTypeTypeChildPublisher
	//
	// A company representing a child network.
	//
	CompanyTypeTypeChildPublisher CompanyType = "CHILD_PUBLISHER"

	// CompanyTypeTypeViewabilityProvider
	//
	// A company representing a viewability provider.
	//
	CompanyTypeTypeViewabilityProvider CompanyType = "VIEWABILITY_PROVIDER"

	// CompanyTypeTypeUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CompanyTypeTypeUnknown CompanyType = "UNKNOWN"
)

// CompanyErrorReasonReason
//
// Enumerates all possible company specific errors.
const (

	// CompanyErrorReasonReasonCannotSetThirdPartyCompanyDueToType
	//
	// Indicates that an attempt was made to set a third party company for a
	// company whose type is not the same as the third party company.
	//
	CompanyErrorReasonReasonCannotSetThirdPartyCompanyDueToType = "CANNOT_SET_THIRD_PARTY_COMPANY_DUE_TO_TYPE"

	// CompanyErrorReasonReasonCannotUpdateCompanyType
	//
	// Indicates that an invalid attempt was made to change a company's type.
	//
	CompanyErrorReasonReasonCannotUpdateCompanyType = "CANNOT_UPDATE_COMPANY_TYPE"

	// CompanyErrorReasonReasonInvalidCompanyType
	//
	// Indicates that this type of company is not supported.
	//
	CompanyErrorReasonReasonInvalidCompanyType = "INVALID_COMPANY_TYPE"

	// CompanyErrorReasonReasonPrimaryContactDoesNotBelongToThisCompany
	//
	// Indicates that an attempt was made to assign a primary contact who
	// does not belong to the specified company.
	//
	CompanyErrorReasonReasonPrimaryContactDoesNotBelongToThisCompany = "PRIMARY_CONTACT_DOES_NOT_BELONG_TO_THIS_COMPANY"

	// CompanyErrorReasonReasonThirdPartyStatsProviderIsWrongRoleType
	//
	// Indicates that the user specified as the third party stats provider
	// is of the wrong role type.  The user must have the third party stats
	// provider role.
	//
	CompanyErrorReasonReasonThirdPartyStatsProviderIsWrongRoleType = "THIRD_PARTY_STATS_PROVIDER_IS_WRONG_ROLE_TYPE"

	// CompanyErrorReasonReasonInvalidLabelAssociation
	//
	// Labels can only be applied to {@link Company.Type#ADVERTISER},
	// {@link Company.Type#HOUSE_ADVERTISER}, and {@link Company.Type#AD_NETWORK} company services.
	//
	CompanyErrorReasonReasonInvalidLabelAssociation = "INVALID_LABEL_ASSOCIATION"

	// CompanyErrorReasonReasonInvalidCompanyTypeForDefaultBillingSetting
	//
	// Indicates that the {@link Company.Type} does not support default billing settings.
	//
	CompanyErrorReasonReasonInvalidCompanyTypeForDefaultBillingSetting = "INVALID_COMPANY_TYPE_FOR_DEFAULT_BILLING_SETTING"

	// CompanyErrorReasonReasonInvalidDefaultBillingSetting
	//
	// Indicates that the format of the default billing setting is wrong.
	//
	CompanyErrorReasonReasonInvalidDefaultBillingSetting = "INVALID_DEFAULT_BILLING_SETTING"

	// CompanyErrorReasonReasonCompanyHasActiveShareAssignments
	//
	// Cannot remove the cross selling config from a company that has active share assignments.
	//
	CompanyErrorReasonReasonCompanyHasActiveShareAssignments = "COMPANY_HAS_ACTIVE_SHARE_ASSIGNMENTS"

	// CompanyErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CompanyErrorReasonReasonUnknown = "UNKNOWN"
)

// CrossSellErrorReasonReason
//
// The reason of the error.
const (

	// CrossSellErrorReasonReasonCompanyIsNotDistributionPartner
	//
	// A company for cross-sell partner must be of type {@link Company.Type#PARTNER}.
	//
	CrossSellErrorReasonReasonCompanyIsNotDistributionPartner = "COMPANY_IS_NOT_DISTRIBUTION_PARTNER"

	// CrossSellErrorReasonReasonChangingPartnerNetworkIsNotSupported
	//
	// The network code of a cross-sell partner cannot be changed.
	//
	CrossSellErrorReasonReasonChangingPartnerNetworkIsNotSupported = "CHANGING_PARTNER_NETWORK_IS_NOT_SUPPORTED"

	// CrossSellErrorReasonReasonMissingDistributorPartnerName
	//
	// A cross-sell partner must have a partner name.
	//
	CrossSellErrorReasonReasonMissingDistributorPartnerName = "MISSING_DISTRIBUTOR_PARTNER_NAME"

	// CrossSellErrorReasonReasonDistributorNetworkMissingPublisherFeature
	//
	// The cross-sell distributor publisher feature must be enabled.
	//
	CrossSellErrorReasonReasonDistributorNetworkMissingPublisherFeature = "DISTRIBUTOR_NETWORK_MISSING_PUBLISHER_FEATURE"

	// CrossSellErrorReasonReasonContentProviderNetworkMissingPublisherFeature
	//
	// The cross-sell publisher features must be enabled on the partner's network.
	//
	CrossSellErrorReasonReasonContentProviderNetworkMissingPublisherFeature = "CONTENT_PROVIDER_NETWORK_MISSING_PUBLISHER_FEATURE"

	// CrossSellErrorReasonReasonInvalidDistributorPartnerName
	//
	// The cross-sell partner name conflicts with an ad unit name on the partner's network.
	//
	CrossSellErrorReasonReasonInvalidDistributorPartnerName = "INVALID_DISTRIBUTOR_PARTNER_NAME"

	// CrossSellErrorReasonReasonInvalidContentProviderNetwork
	//
	// The network code of a cross-sell partner is invalid.
	//
	CrossSellErrorReasonReasonInvalidContentProviderNetwork = "INVALID_CONTENT_PROVIDER_NETWORK"

	// CrossSellErrorReasonReasonContentProviderNetworkCannotBeActiveNetwork
	//
	// The content provider network must be different than the distributor network.
	//
	CrossSellErrorReasonReasonContentProviderNetworkCannotBeActiveNetwork = "CONTENT_PROVIDER_NETWORK_CANNOT_BE_ACTIVE_NETWORK"

	// CrossSellErrorReasonReasonContentProviderNetworkAlreadyEnabledForCrossSelling
	//
	// The same network code was already enabled for cross-sell in a different company.
	//
	CrossSellErrorReasonReasonContentProviderNetworkAlreadyEnabledForCrossSelling = "CONTENT_PROVIDER_NETWORK_ALREADY_ENABLED_FOR_CROSS_SELLING"

	// CrossSellErrorReasonReasonDistributorRuleViolationError
	//
	// A rule defined by the cross selling distributor has been violated by a line item targeting
	// a shared ad unit. Violating this rule is an error.
	//
	CrossSellErrorReasonReasonDistributorRuleViolationError = "DISTRIBUTOR_RULE_VIOLATION_ERROR"

	// CrossSellErrorReasonReasonDistributorRuleViolationWarning
	//
	// A rule defined by the cross selling distributor has been violated by a line item targeting
	// a shared ad unit. Violating this rule is a warning.
	//
	// <p>By setting {@link LineItem#skipCrossSellingRuleWarningChecks}, the content partner can
	// suppress the warning (and create or save the line item).
	//
	// <p>This flag is available beginning in V201411.
	//
	CrossSellErrorReasonReasonDistributorRuleViolationWarning = "DISTRIBUTOR_RULE_VIOLATION_WARNING"

	// CrossSellErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CrossSellErrorReasonReasonUnknown = "UNKNOWN"
)

// CustomFieldValueErrorReasonReason
//
// The reasons for the target error.
const (

	// CustomFieldValueErrorReasonReasonCustomFieldNotFound
	//
	// An attempt was made to modify or create a {@link CustomFieldValue} for
	// a {@link CustomField} that does not exist.
	//
	CustomFieldValueErrorReasonReasonCustomFieldNotFound = "CUSTOM_FIELD_NOT_FOUND"

	// CustomFieldValueErrorReasonReasonCustomFieldInactive
	//
	// An attempt was made to create a new value for a custom field
	// that is inactive.
	//
	CustomFieldValueErrorReasonReasonCustomFieldInactive = "CUSTOM_FIELD_INACTIVE"

	// CustomFieldValueErrorReasonReasonCustomFieldOptionNotFound
	//
	// An attempt was made to modify or create a {@link CustomFieldValue} corresponding
	// to a {@link CustomFieldOption} that could not be found.
	//
	CustomFieldValueErrorReasonReasonCustomFieldOptionNotFound = "CUSTOM_FIELD_OPTION_NOT_FOUND"

	// CustomFieldValueErrorReasonReasonInvalidEntityType
	//
	// An attempt was made to modify or create a {@link CustomFieldValue} with an
	// association to an entity of the wrong type for its field.
	//
	CustomFieldValueErrorReasonReasonInvalidEntityType = "INVALID_ENTITY_TYPE"

	// CustomFieldValueErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CustomFieldValueErrorReasonReasonUnknown = "UNKNOWN"
)

// ExchangeSignupApiErrorReasonReason
//
// Potential reasons for ExchangeSignupService errors
const (

	// ExchangeSignupApiErrorReasonReasonAdsenseAccountCreationError
	ExchangeSignupApiErrorReasonReasonAdsenseAccountCreationError = "ADSENSE_ACCOUNT_CREATION_ERROR"

	// ExchangeSignupApiErrorReasonReasonAdsenseAccountAlreadyHasExchange
	ExchangeSignupApiErrorReasonReasonAdsenseAccountAlreadyHasExchange = "ADSENSE_ACCOUNT_ALREADY_HAS_EXCHANGE"

	// ExchangeSignupApiErrorReasonReasonFailedToAddWebsiteToProperty
	ExchangeSignupApiErrorReasonReasonFailedToAddWebsiteToProperty = "FAILED_TO_ADD_WEBSITE_TO_PROPERTY"

	// ExchangeSignupApiErrorReasonReasonFailedToCreateLinkForNewAccount
	ExchangeSignupApiErrorReasonReasonFailedToCreateLinkForNewAccount = "FAILED_TO_CREATE_LINK_FOR_NEW_ACCOUNT"

	// ExchangeSignupApiErrorReasonReasonCannotCreateNewAccountForMappedCustomer
	ExchangeSignupApiErrorReasonReasonCannotCreateNewAccountForMappedCustomer = "CANNOT_CREATE_NEW_ACCOUNT_FOR_MAPPED_CUSTOMER"

	// ExchangeSignupApiErrorReasonReasonFailedToCreateExchangeSettings
	ExchangeSignupApiErrorReasonReasonFailedToCreateExchangeSettings = "FAILED_TO_CREATE_EXCHANGE_SETTINGS"

	// ExchangeSignupApiErrorReasonReasonDuplicateProductType
	ExchangeSignupApiErrorReasonReasonDuplicateProductType = "DUPLICATE_PRODUCT_TYPE"

	// ExchangeSignupApiErrorReasonReasonInvalidSignupProduct
	ExchangeSignupApiErrorReasonReasonInvalidSignupProduct = "INVALID_SIGNUP_PRODUCT"

	// ExchangeSignupApiErrorReasonReasonUnknownProduct
	ExchangeSignupApiErrorReasonReasonUnknownProduct = "UNKNOWN_PRODUCT"

	// ExchangeSignupApiErrorReasonReasonBadSiteVerificationUpdateRequest
	ExchangeSignupApiErrorReasonReasonBadSiteVerificationUpdateRequest = "BAD_SITE_VERIFICATION_UPDATE_REQUEST"

	// ExchangeSignupApiErrorReasonReasonNoExchangeAccount
	ExchangeSignupApiErrorReasonReasonNoExchangeAccount = "NO_EXCHANGE_ACCOUNT"

	// ExchangeSignupApiErrorReasonReasonSingleSyndicationProduct
	ExchangeSignupApiErrorReasonReasonSingleSyndicationProduct = "SINGLE_SYNDICATION_PRODUCT"

	// ExchangeSignupApiErrorReasonReasonAccountNotYetReady
	ExchangeSignupApiErrorReasonReasonAccountNotYetReady = "ACCOUNT_NOT_YET_READY"

	// ExchangeSignupApiErrorReasonReasonMultipleAdsenseAccountsNotAllowed
	ExchangeSignupApiErrorReasonReasonMultipleAdsenseAccountsNotAllowed = "MULTIPLE_ADSENSE_ACCOUNTS_NOT_ALLOWED"

	// ExchangeSignupApiErrorReasonReasonMissingLegalEntityName
	ExchangeSignupApiErrorReasonReasonMissingLegalEntityName = "MISSING_LEGAL_ENTITY_NAME"

	// ExchangeSignupApiErrorReasonReasonMissingActiveBillingProfile
	ExchangeSignupApiErrorReasonReasonMissingActiveBillingProfile = "MISSING_ACTIVE_BILLING_PROFILE"

	// ExchangeSignupApiErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ExchangeSignupApiErrorReasonReasonUnknown = "UNKNOWN"
)

// FeatureErrorReasonReason
const (

	// FeatureErrorReasonReasonMissingFeature
	//
	// A feature is being used that is not enabled on the current network.
	//
	FeatureErrorReasonReasonMissingFeature = "MISSING_FEATURE"

	// FeatureErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	FeatureErrorReasonReasonUnknown = "UNKNOWN"
)

// InternalApiErrorReasonReason
//
// The single reason for the internal API error.
const (

	// InternalApiErrorReasonReasonUnexpectedInternalApiError
	//
	// API encountered an unexpected internal error.
	//
	InternalApiErrorReasonReasonUnexpectedInternalApiError = "UNEXPECTED_INTERNAL_API_ERROR"

	// InternalApiErrorReasonReasonTransientError
	//
	// A temporary error occurred during the request. Please retry.
	//
	InternalApiErrorReasonReasonTransientError = "TRANSIENT_ERROR"

	// InternalApiErrorReasonReasonUnknown
	//
	// The cause of the error is not known or only defined in newer versions.
	//
	InternalApiErrorReasonReasonUnknown = "UNKNOWN"

	// InternalApiErrorReasonReasonDowntime
	//
	// The API is currently unavailable for a planned downtime.
	//
	InternalApiErrorReasonReasonDowntime = "DOWNTIME"

	// InternalApiErrorReasonReasonErrorGeneratingResponse
	//
	// Mutate succeeded but server was unable to build response. Client should not retry mutate.
	//
	InternalApiErrorReasonReasonErrorGeneratingResponse = "ERROR_GENERATING_RESPONSE"
)

// InvalidEmailErrorReasonReason
//
// Describes reasons for an email to be invalid.
const (

	// InvalidEmailErrorReasonReasonInvalidFormat
	//
	// The value is not a valid email address.
	//
	InvalidEmailErrorReasonReasonInvalidFormat = "INVALID_FORMAT"

	// InvalidEmailErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	InvalidEmailErrorReasonReasonUnknown = "UNKNOWN"
)

// InvalidUrlErrorReasonReason
const (

	// InvalidUrlErrorReasonReasonIllegalCharacters
	//
	// The URL contains invalid characters.
	//
	InvalidUrlErrorReasonReasonIllegalCharacters = "ILLEGAL_CHARACTERS"

	// InvalidUrlErrorReasonReasonInvalidFormat
	//
	// The format of the URL is not allowed. This could occur for a number of
	// reasons. For example, if an invalid scheme is specified (like "ftp://")
	// or if a port is specified when not required, or if a query was specified
	// when not required.
	//
	InvalidUrlErrorReasonReasonInvalidFormat = "INVALID_FORMAT"

	// InvalidUrlErrorReasonReasonInsecureScheme
	//
	// URL contains insecure scheme.
	//
	InvalidUrlErrorReasonReasonInsecureScheme = "INSECURE_SCHEME"

	// InvalidUrlErrorReasonReasonNoScheme
	//
	// The URL does not contain a scheme.
	//
	InvalidUrlErrorReasonReasonNoScheme = "NO_SCHEME"

	// InvalidUrlErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	InvalidUrlErrorReasonReasonUnknown = "UNKNOWN"
)

// InventoryClientApiErrorReasonReason
//
// Potential reasons for errors calling InventoryClient
const (

	// InventoryClientApiErrorReasonReasonAccessDenied
	InventoryClientApiErrorReasonReasonAccessDenied = "ACCESS_DENIED"

	// InventoryClientApiErrorReasonReasonAdsenseAuthError
	InventoryClientApiErrorReasonReasonAdsenseAuthError = "ADSENSE_AUTH_ERROR"

	// InventoryClientApiErrorReasonReasonAdsenseRpcError
	InventoryClientApiErrorReasonReasonAdsenseRpcError = "ADSENSE_RPC_ERROR"

	// InventoryClientApiErrorReasonReasonDomainNoScheme
	InventoryClientApiErrorReasonReasonDomainNoScheme = "DOMAIN_NO_SCHEME"

	// InventoryClientApiErrorReasonReasonDomainInvalidHost
	InventoryClientApiErrorReasonReasonDomainInvalidHost = "DOMAIN_INVALID_HOST"

	// InventoryClientApiErrorReasonReasonDomainInvalidTld
	InventoryClientApiErrorReasonReasonDomainInvalidTld = "DOMAIN_INVALID_TLD"

	// InventoryClientApiErrorReasonReasonDomainOneStringAndPublicSuffix
	InventoryClientApiErrorReasonReasonDomainOneStringAndPublicSuffix = "DOMAIN_ONE_STRING_AND_PUBLIC_SUFFIX"

	// InventoryClientApiErrorReasonReasonDomainInvalidInput
	InventoryClientApiErrorReasonReasonDomainInvalidInput = "DOMAIN_INVALID_INPUT"

	// InventoryClientApiErrorReasonReasonDomainNoPublicSuffix
	InventoryClientApiErrorReasonReasonDomainNoPublicSuffix = "DOMAIN_NO_PUBLIC_SUFFIX"

	// InventoryClientApiErrorReasonReasonUnknownError
	InventoryClientApiErrorReasonReasonUnknownError = "UNKNOWN_ERROR"
)

// LabelEntityAssociationErrorReasonReason
//
// The reasons for the target error.
const (

	// LabelEntityAssociationErrorReasonReasonDuplicateAssociation
	//
	// The label has already been attached to the entity.
	//
	LabelEntityAssociationErrorReasonReasonDuplicateAssociation = "DUPLICATE_ASSOCIATION"

	// LabelEntityAssociationErrorReasonReasonInvalidAssociation
	//
	// A label is being applied to an entity that does not support that entity
	// type.
	//
	LabelEntityAssociationErrorReasonReasonInvalidAssociation = "INVALID_ASSOCIATION"

	// LabelEntityAssociationErrorReasonReasonNegationNotAllowed
	//
	// Label negation cannot be applied to the entity type.
	//
	LabelEntityAssociationErrorReasonReasonNegationNotAllowed = "NEGATION_NOT_ALLOWED"

	// LabelEntityAssociationErrorReasonReasonDuplicateAssociationWithNegation
	//
	// The same label is being applied and negated to the same entity.
	//
	LabelEntityAssociationErrorReasonReasonDuplicateAssociationWithNegation = "DUPLICATE_ASSOCIATION_WITH_NEGATION"

	// LabelEntityAssociationErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	LabelEntityAssociationErrorReasonReasonUnknown = "UNKNOWN"
)

// McmErrorReasonReason
//
// Possible reasons for {@link McmError}
const (

	// McmErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	McmErrorReasonReasonUnknown = "UNKNOWN"

	// McmErrorReasonReasonDuplicateChildPublisherNetworkCode
	//
	// The network code is used by another child publisher.
	//
	McmErrorReasonReasonDuplicateChildPublisherNetworkCode = "DUPLICATE_CHILD_PUBLISHER_NETWORK_CODE"

	// McmErrorReasonReasonDuplicateChildPublisherActiveEmail
	//
	// The email is used by another active child publisher.
	//
	McmErrorReasonReasonDuplicateChildPublisherActiveEmail = "DUPLICATE_CHILD_PUBLISHER_ACTIVE_EMAIL"
)

// NetworkErrorReasonReason
//
// Possible reasons for {@link NetworkError}
const (

	// NetworkErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	NetworkErrorReasonReasonUnknown = "UNKNOWN"

	// NetworkErrorReasonReasonMultiCurrencyNotSupported
	//
	// Multi-currency support is not enabled for this network. This is an Ad Manager 360 feature.
	//
	NetworkErrorReasonReasonMultiCurrencyNotSupported = "MULTI_CURRENCY_NOT_SUPPORTED"

	// NetworkErrorReasonReasonUnsupportedCurrency
	//
	// Currency provided is not supported.
	//
	NetworkErrorReasonReasonUnsupportedCurrency = "UNSUPPORTED_CURRENCY"

	// NetworkErrorReasonReasonNetworkCurrencyCannotBeSameAsSecondary
	//
	// The network currency cannot also be specified as a secondary currency.
	//
	NetworkErrorReasonReasonNetworkCurrencyCannotBeSameAsSecondary = "NETWORK_CURRENCY_CANNOT_BE_SAME_AS_SECONDARY"

	// NetworkErrorReasonReasonDeprecatedDataTransferConfigEventType
	//
	// The data transfer config cannot have a deprecated event type.
	//
	NetworkErrorReasonReasonDeprecatedDataTransferConfigEventType = "DEPRECATED_DATA_TRANSFER_CONFIG_EVENT_TYPE"

	// NetworkErrorReasonReasonDelegationChildNetworkCannotBecomeAParent
	//
	// An MCM child network cannot become a parent network.
	//
	NetworkErrorReasonReasonDelegationChildNetworkCannotBecomeAParent = "DELEGATION_CHILD_NETWORK_CANNOT_BECOME_A_PARENT"

	// NetworkErrorReasonReasonDelegationParentNetworkCannotBecomeAChild
	//
	// An MCM parent network cannot become a child of another network.
	//
	NetworkErrorReasonReasonDelegationParentNetworkCannotBecomeAChild = "DELEGATION_PARENT_NETWORK_CANNOT_BECOME_A_CHILD"

	// NetworkErrorReasonReasonCannotAddSameNetworkAsDelegationChild
	//
	// In MCM, a network cannot become a parent of itself.
	//
	NetworkErrorReasonReasonCannotAddSameNetworkAsDelegationChild = "CANNOT_ADD_SAME_NETWORK_AS_DELEGATION_CHILD"

	// NetworkErrorReasonReasonMaxApprovedDelegationChildNetworksExceeded
	//
	// The MCM parent network has exceeded the system limit of child networks.
	//
	NetworkErrorReasonReasonMaxApprovedDelegationChildNetworksExceeded = "MAX_APPROVED_DELEGATION_CHILD_NETWORKS_EXCEEDED"

	// NetworkErrorReasonReasonMaxPendingDelegationChildNetworksExceeded
	//
	// The MCM parent network has exceeded the system limit of child networks pending approval.
	//
	NetworkErrorReasonReasonMaxPendingDelegationChildNetworksExceeded = "MAX_PENDING_DELEGATION_CHILD_NETWORKS_EXCEEDED"

	// NetworkErrorReasonReasonChildNetworkAlreadyExists
	//
	// The network is already being managed by the parent network for MCM.
	//
	NetworkErrorReasonReasonChildNetworkAlreadyExists = "CHILD_NETWORK_ALREADY_EXISTS"

	// NetworkErrorReasonReasonChildNetworkCannotBeDisapproved
	//
	// A child network must not be disapproved.
	//
	NetworkErrorReasonReasonChildNetworkCannotBeDisapproved = "CHILD_NETWORK_CANNOT_BE_DISAPPROVED"

	// NetworkErrorReasonReasonInParentDelegationUnsupportedForNetwork
	//
	// Only Ad Manager 360 networks are allowed to manage the inventory of other networks.
	//
	NetworkErrorReasonReasonInParentDelegationUnsupportedForNetwork = "IN_PARENT_DELEGATION_UNSUPPORTED_FOR_NETWORK"

	// NetworkErrorReasonReasonErrorReenablingAdExchangeOnMcmChild
	//
	// When an MCM child network self-signsup for ad exchange but disconnects from the parent, then
	// tries to re-enable again, this indicates that there was an error in re-enabling ad exchange.
	//
	NetworkErrorReasonReasonErrorReenablingAdExchangeOnMcmChild = "ERROR_REENABLING_AD_EXCHANGE_ON_MCM_CHILD"

	// NetworkErrorReasonReasonErrorSettingSiteServingModeOnMcmChild
	//
	// The error shown when there is an issue setting the approved site serving field when
	// re-enabling or disabling ad exchange on an MCM child.
	//
	NetworkErrorReasonReasonErrorSettingSiteServingModeOnMcmChild = "ERROR_SETTING_SITE_SERVING_MODE_ON_MCM_CHILD"
)

// NotNullErrorReasonReason
//
// The reasons for the target error.
const (

	// NotNullErrorReasonReasonArg1Null
	//
	// Assuming that a method will not have more than 3 arguments, if it does,
	// return NULL
	//
	NotNullErrorReasonReasonArg1Null = "ARG1_NULL"

	// NotNullErrorReasonReasonArg2Null
	NotNullErrorReasonReasonArg2Null = "ARG2_NULL"

	// NotNullErrorReasonReasonArg3Null
	NotNullErrorReasonReasonArg3Null = "ARG3_NULL"

	// NotNullErrorReasonReasonNull
	NotNullErrorReasonReasonNull = "NULL"

	// NotNullErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	NotNullErrorReasonReasonUnknown = "UNKNOWN"
)

// NullErrorReasonReason
//
// The reasons for the target error.
const (

	// NullErrorReasonReasonNotNull
	NullErrorReasonReasonNotNull = "NOT_NULL"

	// NullErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	NullErrorReasonReasonUnknown = "UNKNOWN"
)

// OnboardingTask
//
// Pending onboarding tasks for the child publishers that must completed before Google's policy
// compliance is verified.
type OnboardingTask string

const (

	// OnboardingTaskUnknown
	OnboardingTaskUnknown OnboardingTask = "UNKNOWN"

	// OnboardingTaskBillingProfileCreation
	//
	// Creation of the child publisher's payments billing profile.
	//
	OnboardingTaskBillingProfileCreation OnboardingTask = "BILLING_PROFILE_CREATION"

	// OnboardingTaskPhonePinVerification
	//
	// Verification of the child publisher's phone number.
	//
	OnboardingTaskPhonePinVerification OnboardingTask = "PHONE_PIN_VERIFICATION"

	// OnboardingTaskAdManagerAccountSetup
	//
	// Setup of the child publisher's Ad Manager account.
	//
	OnboardingTaskAdManagerAccountSetup OnboardingTask = "AD_MANAGER_ACCOUNT_SETUP"
)

// ParseErrorReasonReason
//
// The reasons for the target error.
const (

	// ParseErrorReasonReasonUnparsable
	//
	// Indicates an error in parsing an attribute.
	//
	ParseErrorReasonReasonUnparsable = "UNPARSABLE"

	// ParseErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ParseErrorReasonReasonUnknown = "UNKNOWN"
)

// PermissionErrorReasonReason
//
// Describes reasons for permission errors.
const (

	// PermissionErrorReasonReasonPermissionDenied
	//
	// User does not have the required permission for the request.
	//
	PermissionErrorReasonReasonPermissionDenied = "PERMISSION_DENIED"

	// PermissionErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PermissionErrorReasonReasonUnknown = "UNKNOWN"
)

// PublisherQueryLanguageContextErrorReasonReason
//
// The reasons for the target error.
const (

	// PublisherQueryLanguageContextErrorReasonReasonUnexecutable
	//
	// Indicates that there was an error executing the PQL.
	//
	PublisherQueryLanguageContextErrorReasonReasonUnexecutable = "UNEXECUTABLE"

	// PublisherQueryLanguageContextErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PublisherQueryLanguageContextErrorReasonReasonUnknown = "UNKNOWN"
)

// PublisherQueryLanguageSyntaxErrorReasonReason
//
// The reasons for the target error.
const (

	// PublisherQueryLanguageSyntaxErrorReasonReasonUnparsable
	//
	// Indicates that there was a PQL syntax error.
	//
	PublisherQueryLanguageSyntaxErrorReasonReasonUnparsable = "UNPARSABLE"

	// PublisherQueryLanguageSyntaxErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PublisherQueryLanguageSyntaxErrorReasonReasonUnknown = "UNKNOWN"
)

// QuotaErrorReasonReason
const (

	// QuotaErrorReasonReasonExceededQuota
	//
	// The number of requests made per second is too high and has exceeded the
	// allowable limit. The recommended approach to handle this error is to wait
	// about 5 seconds and then retry the request. Note that this does not
	// guarantee the request will succeed. If it fails again, try increasing the
	// wait time.
	// <p>Another way to mitigate this error is to limit requests to 8 per second for Ad Manager
	// 360 accounts, or 2 per second for Ad Manager accounts. Once again
	// this does not guarantee that every request will succeed, but may help
	// reduce the number of times you receive this error.
	//
	QuotaErrorReasonReasonExceededQuota = "EXCEEDED_QUOTA"

	// QuotaErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	QuotaErrorReasonReasonUnknown = "UNKNOWN"

	// QuotaErrorReasonReasonReportJobLimit
	//
	// This user has exceeded the allowed number of new report requests per hour
	// (this includes both reports run via the UI and reports
	// run via {@link ReportService#runReportJob}).
	// The recommended approach to handle this error is to wait about 10 minutes
	// and then retry the request. Note that this does not guarantee the request
	// will succeed. If it fails again, try increasing the wait time.
	// <p>Another way to mitigate this error is to limit the number of new report
	// requests to 250 per hour per user. Once again, this does not guarantee that
	// every request will succeed, but may help reduce the number of times you
	// receive this error.
	//
	QuotaErrorReasonReasonReportJobLimit = "REPORT_JOB_LIMIT"

	// QuotaErrorReasonReasonSegmentPopulationLimit
	//
	// This network has exceeded the allowed number of identifiers uploaded within a 24 hour period.
	// The recommended approach to handle this error is to wait 30 minutes and then retry the
	// request. Note that this does not guarantee the request will succeed. If it fails again, try
	// increasing the wait time.
	//
	QuotaErrorReasonReasonSegmentPopulationLimit = "SEGMENT_POPULATION_LIMIT"
)

// RegExErrorReasonReason
//
// The reasons for the target error.
const (

	// RegExErrorReasonReasonInvalid
	//
	// Invalid value found.
	//
	RegExErrorReasonReasonInvalid = "INVALID"

	// RegExErrorReasonReasonNull
	//
	// Null value found.
	//
	RegExErrorReasonReasonNull = "NULL"

	// RegExErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RegExErrorReasonReasonUnknown = "UNKNOWN"
)

// RequiredCollectionErrorReasonReason
const (

	// RequiredCollectionErrorReasonReasonRequired
	//
	// A required collection is missing.
	//
	RequiredCollectionErrorReasonReasonRequired = "REQUIRED"

	// RequiredCollectionErrorReasonReasonTooLarge
	//
	// Collection size is too large.
	//
	RequiredCollectionErrorReasonReasonTooLarge = "TOO_LARGE"

	// RequiredCollectionErrorReasonReasonTooSmall
	//
	// Collection size is too small.
	//
	RequiredCollectionErrorReasonReasonTooSmall = "TOO_SMALL"

	// RequiredCollectionErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RequiredCollectionErrorReasonReasonUnknown = "UNKNOWN"
)

// RequiredErrorReasonReason
//
// The reasons for the target error.
const (

	// RequiredErrorReasonReasonRequired
	//
	// Missing required field.
	//
	RequiredErrorReasonReasonRequired = "REQUIRED"
)

// RequiredNumberErrorReasonReason
//
// Describes reasons for a number to be invalid.
const (

	// RequiredNumberErrorReasonReasonRequired
	RequiredNumberErrorReasonReasonRequired = "REQUIRED"

	// RequiredNumberErrorReasonReasonTooLarge
	RequiredNumberErrorReasonReasonTooLarge = "TOO_LARGE"

	// RequiredNumberErrorReasonReasonTooSmall
	RequiredNumberErrorReasonReasonTooSmall = "TOO_SMALL"

	// RequiredNumberErrorReasonReasonTooLargeWithDetails
	RequiredNumberErrorReasonReasonTooLargeWithDetails = "TOO_LARGE_WITH_DETAILS"

	// RequiredNumberErrorReasonReasonTooSmallWithDetails
	RequiredNumberErrorReasonReasonTooSmallWithDetails = "TOO_SMALL_WITH_DETAILS"

	// RequiredNumberErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RequiredNumberErrorReasonReasonUnknown = "UNKNOWN"
)

// ServerErrorReasonReason
//
// Describes reasons for server errors
const (

	// ServerErrorReasonReasonServerError
	//
	// Indicates that an unexpected error occured.
	//
	ServerErrorReasonReasonServerError = "SERVER_ERROR"

	// ServerErrorReasonReasonServerBusy
	//
	// Indicates that the server is currently experiencing a high load. Please
	// wait and try your request again.
	//
	ServerErrorReasonReasonServerBusy = "SERVER_BUSY"

	// ServerErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ServerErrorReasonReasonUnknown = "UNKNOWN"
)

// SiteErrorReasonReason
//
// The reasons for the target error.
const (

	// SiteErrorReasonReasonInvalidChildNetworkCode
	//
	// The network code must belong to an MCM child network.
	//
	SiteErrorReasonReasonInvalidChildNetworkCode = "INVALID_CHILD_NETWORK_CODE"

	// SiteErrorReasonReasonCannotArchiveSiteWithSubsites
	//
	// Archive all subsites before archiving the site.
	//
	SiteErrorReasonReasonCannotArchiveSiteWithSubsites = "CANNOT_ARCHIVE_SITE_WITH_SUBSITES"

	// SiteErrorReasonReasonInvalidUrlForSite
	//
	// The URL is invalid for a top-level site.
	//
	SiteErrorReasonReasonInvalidUrlForSite = "INVALID_URL_FOR_SITE"

	// SiteErrorReasonReasonMultipleUpdatesForSameSite
	//
	// The batch of sites could not be updated because the same site was updated multiple times in
	// the batch.
	//
	SiteErrorReasonReasonMultipleUpdatesForSameSite = "MULTIPLE_UPDATES_FOR_SAME_SITE"

	// SiteErrorReasonReasonTooManySitesPerReviewRequest
	//
	// Too many sites in the request to submit them for review.
	//
	SiteErrorReasonReasonTooManySitesPerReviewRequest = "TOO_MANY_SITES_PER_REVIEW_REQUEST"

	// SiteErrorReasonReasonTooManyReviewRequestsForSite
	//
	// The site has been submitted for review too many times.
	//
	SiteErrorReasonReasonTooManyReviewRequestsForSite = "TOO_MANY_REVIEW_REQUESTS_FOR_SITE"

	// SiteErrorReasonReasonInvalidApprovalStatusForReview
	//
	// Only sites with approval status {@link ApprovalStatus#DRAFT}, {@link
	// ApprovalStatus#DISAPPROVED} and {@link ApprovalStatus#REQUIRES_REVIEW} can be submitted for
	// review.
	//
	SiteErrorReasonReasonInvalidApprovalStatusForReview = "INVALID_APPROVAL_STATUS_FOR_REVIEW"

	// SiteErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	SiteErrorReasonReasonUnknown = "UNKNOWN"
)

// StatementErrorReasonReason
const (

	// StatementErrorReasonReasonVariableNotBoundToValue
	//
	// A bind variable has not been bound to a value.
	//
	StatementErrorReasonReasonVariableNotBoundToValue = "VARIABLE_NOT_BOUND_TO_VALUE"

	// StatementErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	StatementErrorReasonReasonUnknown = "UNKNOWN"
)

// StringFormatErrorReasonReason
//
// The reasons for the target error.
const (

	// StringFormatErrorReasonReasonUnknown
	StringFormatErrorReasonReasonUnknown = "UNKNOWN"

	// StringFormatErrorReasonReasonIllegalChars
	//
	// The input string value contains disallowed characters.
	//
	StringFormatErrorReasonReasonIllegalChars = "ILLEGAL_CHARS"

	// StringFormatErrorReasonReasonInvalidFormat
	//
	// The input string value is invalid for the associated field.
	//
	StringFormatErrorReasonReasonInvalidFormat = "INVALID_FORMAT"
)

// StringLengthErrorReasonReason
const (

	// StringLengthErrorReasonReasonTooLong
	StringLengthErrorReasonReasonTooLong = "TOO_LONG"

	// StringLengthErrorReasonReasonTooShort
	StringLengthErrorReasonReasonTooShort = "TOO_SHORT"

	// StringLengthErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	StringLengthErrorReasonReasonUnknown = "UNKNOWN"
)

// TeamErrorReasonReason
//
// The reasons for the target error.
const (

	// TeamErrorReasonReasonEntityNotOnUsersTeams
	//
	// User cannot use this entity because it is not on any of the user's teams.
	//
	TeamErrorReasonReasonEntityNotOnUsersTeams = "ENTITY_NOT_ON_USERS_TEAMS"

	// TeamErrorReasonReasonAdUnitsNotOnOrderTeams
	//
	// The targeted or excluded ad unit must be on the order's teams.
	//
	TeamErrorReasonReasonAdUnitsNotOnOrderTeams = "AD_UNITS_NOT_ON_ORDER_TEAMS"

	// TeamErrorReasonReasonPlacementsNotOnOrderTeams
	//
	// The targeted placement must be on the order's teams.
	//
	TeamErrorReasonReasonPlacementsNotOnOrderTeams = "PLACEMENTS_NOT_ON_ORDER_TEAMS"

	// TeamErrorReasonReasonMissingUsersTeam
	//
	// Entity cannot be created because it is not on any of the user's teams.
	//
	TeamErrorReasonReasonMissingUsersTeam = "MISSING_USERS_TEAM"

	// TeamErrorReasonReasonAllTeamAssociationNotAllowed
	//
	// A team that gives access to all entities of a given type cannot be
	// associated with an entity of that type.
	//
	TeamErrorReasonReasonAllTeamAssociationNotAllowed = "ALL_TEAM_ASSOCIATION_NOT_ALLOWED"

	// TeamErrorReasonReasonInvalidTeamAssignment
	//
	// The assignment of team to entities is invalid.
	//
	TeamErrorReasonReasonInvalidTeamAssignment = "INVALID_TEAM_ASSIGNMENT"

	// TeamErrorReasonReasonCannotUpdateInactiveTeam
	//
	// Cannot modify or create a team with an inactive status.
	//
	TeamErrorReasonReasonCannotUpdateInactiveTeam = "CANNOT_UPDATE_INACTIVE_TEAM"

	// TeamErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	TeamErrorReasonReasonUnknown = "UNKNOWN"
)

// createCompanies
//
// Creates new {@link Company} objects.
type CreateCompanies struct {
	Companies []*Company `xml:"companies"`
}

// createCompaniesResponse
type CreateCompaniesResponse struct {
	Rval []*Company `xml:"rval"`
}

// getCompaniesByStatement
//
// Gets a {@link CompanyPage} of {@link Company} objects that satisfy the given {@link
// Statement#query}. The following fields are supported for filtering:
//
// <table>
// <tr>
// <th scope="col">PQL Property</th> <th scope="col">Object Property</th>
// </tr>
// <tr>
// <td>{@code id}</td>
// <td>{@link Company#id}</td>
// </tr>
// <tr>
// <td>{@code name}</td>
// <td>{@link Company#name}</td>
// </tr>
// <tr>
// <td>{@code type}</td>
// <td>{@link Company#type}</td>
// </tr>
// <tr>
// <td>{@code lastModifiedDateTime}</td>
// <td>{@link Company#lastModifiedDateTime}</td>
// </tr>
// </table>
type GetCompaniesByStatement struct {
	FilterStatement *Statement `xml:"filterStatement"`
}

// getCompaniesByStatementResponse
type GetCompaniesByStatementResponse struct {
	Rval *CompanyPage `xml:"rval"`
}

// performCompanyAction
//
// Performs actions on {@link Company} objects that match the given {@code Statement}.
type PerformCompanyAction struct {
	CompanyAction *CompanyAction `xml:"companyAction"`

	Statement *Statement `xml:"statement"`
}

// performCompanyActionResponse
type PerformCompanyActionResponse struct {
	Rval *UpdateResult `xml:"rval"`
}

// updateCompanies
//
// Updates the specified {@link Company} objects.
type UpdateCompanies struct {
	Companies []*Company `xml:"companies"`
}

// updateCompaniesResponse
type UpdateCompaniesResponse struct {
	Rval []*Company `xml:"rval"`
}

// RequestHeader
type RequestHeader struct {
}

// ResponseHeader
type ResponseHeader struct {
}
