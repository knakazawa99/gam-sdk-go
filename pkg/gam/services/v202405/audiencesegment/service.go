// Code generated by gamwsdl/main.go. DO NOT EDIT.
package audiencesegment

import (
	"context"
	"encoding/xml"
	"fmt"

	"github.com/knakazawa99/gam-sdk-go/pkg/gam/requestbody"
	"github.com/knakazawa99/gam-sdk-go/pkg/gam/soap"
	gamxml "github.com/knakazawa99/gam-sdk-go/pkg/xml"
)

const (
	wsdl = "https://ads.google.com/apis/ads/publisher/v202405/AudienceSegmentService"

	OperationCreateAudienceSegments = "createAudienceSegments"

	OperationGetAudienceSegmentsByStatement = "getAudienceSegmentsByStatement"

	OperationPerformAudienceSegmentAction = "performAudienceSegmentAction"

	OperationUpdateAudienceSegments = "updateAudienceSegments"
)

// AudienceSegmentServiceInterface
//
// Provides operations for creating, updating and retrieving {@link AudienceSegment} objects.
type AudienceSegmentServiceInterface interface {

	// CreateAudienceSegments
	//
	// Creates new {@link FirstPartyAudienceSegment} objects.
	//
	CreateAudienceSegments(ctx context.Context, input CreateAudienceSegments) (*CreateAudienceSegmentsResponse, error)

	// GetAudienceSegmentsByStatement
	//
	// Gets an {@link AudienceSegmentPage} of {@link AudienceSegment} objects that satisfy the given
	// {@link Statement#query}. The following fields are supported for filtering:
	//
	// <table>
	// <tr>
	// <th scope="col">PQL Property</th>
	// <th scope="col">Object Property</th>
	// </tr>
	// <tr>
	// <td>{@code id}</td>
	// <td>{@link AudienceSegment#id}</td>
	// </tr>
	// <tr>
	// <td>{@code name}</td>
	// <td>{@link AudienceSegment#name}</td>
	// </tr>
	// <tr>
	// <td>{@code status}</td>
	// <td>{@link AudienceSegment#status}</td>
	// </tr>
	// <tr>
	// <td>{@code type}</td>
	// <td>{@link AudienceSegment#type}</td>
	// </tr>
	// <tr>
	// <td>{@code size}</td>
	// <td>{@link AudienceSegment#size}</td>
	// </tr>
	// <tr>
	// <td>{@code dataProviderName}</td>
	// <td>{@link AudienceSegmentDataProvider#name}</td>
	// </tr>
	// <tr>
	// <td>{@code segmentType}</td>
	// <td>{@link AudienceSegment#type}</td>
	// </tr>
	// <tr>
	// <td>{@code approvalStatus}</td>
	// <td>{@link ThirdPartyAudienceSegment#approvalStatus}</td>
	// </tr>
	// <tr>
	// <td>{@code cost}</td>
	// <td>{@link ThirdPartyAudienceSegment#cost}</td>
	// </tr>
	// <tr>
	// <td>{@code startDateTime}</td>
	// <td>{@link ThirdPartyAudienceSegment#startDateTime}</td>
	// </tr>
	// <tr>
	// <td>{@code endDateTime}</td>
	// <td>{@link ThirdPartyAudienceSegment#endDateTime}</td>
	// </tr>
	// </table>
	//
	GetAudienceSegmentsByStatement(ctx context.Context, input GetAudienceSegmentsByStatement) (*GetAudienceSegmentsByStatementResponse, error)

	// PerformAudienceSegmentAction
	//
	// Performs the given {@link AudienceSegmentAction} on the set of segments identified by the given
	// statement.
	//
	PerformAudienceSegmentAction(ctx context.Context, action requestbody.PerformAction, input PerformAudienceSegmentAction) (*PerformAudienceSegmentActionResponse, error)

	// UpdateAudienceSegments
	//
	// Updates the given {@link FirstPartyAudienceSegment} objects.
	//
	UpdateAudienceSegments(ctx context.Context, input UpdateAudienceSegments) (*UpdateAudienceSegmentsResponse, error)
}

type Envelope struct {
	xmlName xml.Name `xml:"Envelope"`
	Body    Body     `xml:"Body"`
}

type Body struct {
	xmlName xml.Name   `xml:"Body"`
	Fault   soap.Fault `xml:"Fault"`

	// CreateAudienceSegmentsResponse
	//
	// Creates new {@link FirstPartyAudienceSegment} objects.
	//
	CreateAudienceSegmentsResponse CreateAudienceSegmentsResponse `xml:"createAudienceSegmentsResponse"`

	// GetAudienceSegmentsByStatementResponse
	//
	// Gets an {@link AudienceSegmentPage} of {@link AudienceSegment} objects that satisfy the given
	// {@link Statement#query}. The following fields are supported for filtering:
	//
	// <table>
	// <tr>
	// <th scope="col">PQL Property</th>
	// <th scope="col">Object Property</th>
	// </tr>
	// <tr>
	// <td>{@code id}</td>
	// <td>{@link AudienceSegment#id}</td>
	// </tr>
	// <tr>
	// <td>{@code name}</td>
	// <td>{@link AudienceSegment#name}</td>
	// </tr>
	// <tr>
	// <td>{@code status}</td>
	// <td>{@link AudienceSegment#status}</td>
	// </tr>
	// <tr>
	// <td>{@code type}</td>
	// <td>{@link AudienceSegment#type}</td>
	// </tr>
	// <tr>
	// <td>{@code size}</td>
	// <td>{@link AudienceSegment#size}</td>
	// </tr>
	// <tr>
	// <td>{@code dataProviderName}</td>
	// <td>{@link AudienceSegmentDataProvider#name}</td>
	// </tr>
	// <tr>
	// <td>{@code segmentType}</td>
	// <td>{@link AudienceSegment#type}</td>
	// </tr>
	// <tr>
	// <td>{@code approvalStatus}</td>
	// <td>{@link ThirdPartyAudienceSegment#approvalStatus}</td>
	// </tr>
	// <tr>
	// <td>{@code cost}</td>
	// <td>{@link ThirdPartyAudienceSegment#cost}</td>
	// </tr>
	// <tr>
	// <td>{@code startDateTime}</td>
	// <td>{@link ThirdPartyAudienceSegment#startDateTime}</td>
	// </tr>
	// <tr>
	// <td>{@code endDateTime}</td>
	// <td>{@link ThirdPartyAudienceSegment#endDateTime}</td>
	// </tr>
	// </table>
	//
	GetAudienceSegmentsByStatementResponse GetAudienceSegmentsByStatementResponse `xml:"getAudienceSegmentsByStatementResponse"`

	// PerformAudienceSegmentActionResponse
	//
	// Performs the given {@link AudienceSegmentAction} on the set of segments identified by the given
	// statement.
	//
	PerformAudienceSegmentActionResponse PerformAudienceSegmentActionResponse `xml:"performAudienceSegmentActionResponse"`

	// UpdateAudienceSegmentsResponse
	//
	// Updates the given {@link FirstPartyAudienceSegment} objects.
	//
	UpdateAudienceSegmentsResponse UpdateAudienceSegmentsResponse `xml:"updateAudienceSegmentsResponse"`
}

type Service struct {
	client          soap.Client
	wsdl            string
	networkCode     int
	applicationName string
}

func NewService(client soap.Client, networkCode int, applicationName string) AudienceSegmentServiceInterface {
	return &Service{
		client:          client,
		wsdl:            wsdl,
		networkCode:     networkCode,
		applicationName: applicationName,
	}
}

// AudienceSegmentServiceInterface
//
// Provides operations for creating, updating and retrieving {@link AudienceSegment} objects.
//

// CreateAudienceSegments
//
// Creates new {@link FirstPartyAudienceSegment} objects.
func (s *Service) CreateAudienceSegments(ctx context.Context, input CreateAudienceSegments) (*CreateAudienceSegmentsResponse, error) {
	parameterXML, err := gamxml.DeepMarshal(input, true)
	data := requestbody.DefaultRequestBody{
		NetworkCode:     s.networkCode,
		ApplicationName: s.applicationName,
		OperationName:   OperationCreateAudienceSegments,
		Parameters:      string(parameterXML),
	}

	soapBody, err := requestbody.GenerateDefaultRequestSoapBody(data)
	if err != nil {
		return nil, fmt.Errorf("failed to generate soap body: %w", err)
	}

	body, err := s.client.Call(ctx, s.wsdl, soapBody)
	if err != nil {
		return nil, err
	}

	var envelope Envelope
	if err := xml.Unmarshal(body, &envelope); err != nil {
		return nil, err
	}

	if envelope.Body.Fault.Detail.APIExecutionFault != nil {
		apiExceptionFaultErrors := envelope.Body.Fault.Detail.APIExecutionFault.Errors[0]
		return nil, RaiseError(apiExceptionFaultErrors.ErrorType, apiExceptionFaultErrors.Reason)
	}
	return &envelope.Body.CreateAudienceSegmentsResponse, nil
}

// GetAudienceSegmentsByStatement
//
// Gets an {@link AudienceSegmentPage} of {@link AudienceSegment} objects that satisfy the given
// {@link Statement#query}. The following fields are supported for filtering:
//
// <table>
// <tr>
// <th scope="col">PQL Property</th>
// <th scope="col">Object Property</th>
// </tr>
// <tr>
// <td>{@code id}</td>
// <td>{@link AudienceSegment#id}</td>
// </tr>
// <tr>
// <td>{@code name}</td>
// <td>{@link AudienceSegment#name}</td>
// </tr>
// <tr>
// <td>{@code status}</td>
// <td>{@link AudienceSegment#status}</td>
// </tr>
// <tr>
// <td>{@code type}</td>
// <td>{@link AudienceSegment#type}</td>
// </tr>
// <tr>
// <td>{@code size}</td>
// <td>{@link AudienceSegment#size}</td>
// </tr>
// <tr>
// <td>{@code dataProviderName}</td>
// <td>{@link AudienceSegmentDataProvider#name}</td>
// </tr>
// <tr>
// <td>{@code segmentType}</td>
// <td>{@link AudienceSegment#type}</td>
// </tr>
// <tr>
// <td>{@code approvalStatus}</td>
// <td>{@link ThirdPartyAudienceSegment#approvalStatus}</td>
// </tr>
// <tr>
// <td>{@code cost}</td>
// <td>{@link ThirdPartyAudienceSegment#cost}</td>
// </tr>
// <tr>
// <td>{@code startDateTime}</td>
// <td>{@link ThirdPartyAudienceSegment#startDateTime}</td>
// </tr>
// <tr>
// <td>{@code endDateTime}</td>
// <td>{@link ThirdPartyAudienceSegment#endDateTime}</td>
// </tr>
// </table>
func (s *Service) GetAudienceSegmentsByStatement(ctx context.Context, input GetAudienceSegmentsByStatement) (*GetAudienceSegmentsByStatementResponse, error) {
	parameterXML, err := gamxml.DeepMarshal(input, true)
	data := requestbody.DefaultRequestBody{
		NetworkCode:     s.networkCode,
		ApplicationName: s.applicationName,
		OperationName:   OperationGetAudienceSegmentsByStatement,
		Parameters:      string(parameterXML),
	}

	soapBody, err := requestbody.GenerateDefaultRequestSoapBody(data)
	if err != nil {
		return nil, fmt.Errorf("failed to generate soap body: %w", err)
	}

	body, err := s.client.Call(ctx, s.wsdl, soapBody)
	if err != nil {
		return nil, err
	}

	var envelope Envelope
	if err := xml.Unmarshal(body, &envelope); err != nil {
		return nil, err
	}

	if envelope.Body.Fault.Detail.APIExecutionFault != nil {
		apiExceptionFaultErrors := envelope.Body.Fault.Detail.APIExecutionFault.Errors[0]
		return nil, RaiseError(apiExceptionFaultErrors.ErrorType, apiExceptionFaultErrors.Reason)
	}
	return &envelope.Body.GetAudienceSegmentsByStatementResponse, nil
}

func (s *Service) PerformAudienceSegmentAction(ctx context.Context, action requestbody.PerformAction, input PerformAudienceSegmentAction) (*PerformAudienceSegmentActionResponse, error) {
	performActionBody, err := action.GetPerformActionBody()
	if err != nil {
		return nil, fmt.Errorf("failed to perform action: %w", err)
	}

	parameterXML, err := gamxml.DeepMarshal(input.FilterStatement, true)
	if err != nil {
		return nil, fmt.Errorf("failed to DeepMarshal: %w", err)
	}

	data := requestbody.PerformActionBodyData{
		NetworkCode:        s.networkCode,
		ApplicationName:    s.applicationName,
		OperationName:      OperationPerformAudienceSegmentAction,
		ActionName:         "audienceSegmentAction",
		ActionType:         action.GetActionType(),
		ActionField:        performActionBody,
		Statement:          "filterStatement",
		StatementParameter: string(parameterXML),
	}

	soapBody, err := requestbody.GeneratePerformActionSoapBody(data)
	if err != nil {
		return nil, fmt.Errorf("failed to generate soap body: %w", err)
	}

	body, err := s.client.Call(ctx, s.wsdl, soapBody)
	if err != nil {
		return nil, fmt.Errorf("failed to call: %w", err)
	}

	var envelope Envelope
	if err := xml.Unmarshal(body, &envelope); err != nil {
		return nil, fmt.Errorf("failed to unmarshal: %w", err)
	}

	if envelope.Body.Fault.Detail.APIExecutionFault != nil {
		// TODO handle multiple errors
		apiExceptionFaultErrors := envelope.Body.Fault.Detail.APIExecutionFault.Errors[0]
		return nil, RaiseError(apiExceptionFaultErrors.ErrorType, apiExceptionFaultErrors.Reason)
	}
	return &envelope.Body.PerformAudienceSegmentActionResponse, nil
}

// UpdateAudienceSegments
//
// Updates the given {@link FirstPartyAudienceSegment} objects.
func (s *Service) UpdateAudienceSegments(ctx context.Context, input UpdateAudienceSegments) (*UpdateAudienceSegmentsResponse, error) {
	parameterXML, err := gamxml.DeepMarshal(input, true)
	data := requestbody.DefaultRequestBody{
		NetworkCode:     s.networkCode,
		ApplicationName: s.applicationName,
		OperationName:   OperationUpdateAudienceSegments,
		Parameters:      string(parameterXML),
	}

	soapBody, err := requestbody.GenerateDefaultRequestSoapBody(data)
	if err != nil {
		return nil, fmt.Errorf("failed to generate soap body: %w", err)
	}

	body, err := s.client.Call(ctx, s.wsdl, soapBody)
	if err != nil {
		return nil, err
	}

	var envelope Envelope
	if err := xml.Unmarshal(body, &envelope); err != nil {
		return nil, err
	}

	if envelope.Body.Fault.Detail.APIExecutionFault != nil {
		apiExceptionFaultErrors := envelope.Body.Fault.Detail.APIExecutionFault.Errors[0]
		return nil, RaiseError(apiExceptionFaultErrors.ErrorType, apiExceptionFaultErrors.Reason)
	}
	return &envelope.Body.UpdateAudienceSegmentsResponse, nil
}
