// Code generated by gamwsdl/main.go. DO NOT EDIT.
package cdnconfiguration

import (
	"context"
	"encoding/xml"
	"fmt"

	"github.com/knakazawa99/gam-sdk-go/pkg/gam/requestbody"
	"github.com/knakazawa99/gam-sdk-go/pkg/gam/soap"
	gamxml "github.com/knakazawa99/gam-sdk-go/pkg/xml"
)

const (
	wsdl = "https://ads.google.com/apis/ads/publisher/v202405/CdnConfigurationService"

	OperationCreateCdnConfigurations = "createCdnConfigurations"

	OperationGetCdnConfigurationsByStatement = "getCdnConfigurationsByStatement"

	OperationPerformCdnConfigurationAction = "performCdnConfigurationAction"

	OperationUpdateCdnConfigurations = "updateCdnConfigurations"
)

// CdnConfigurationServiceInterface
//
// Provides methods for creating, updating and retrieving {@link CdnConfiguration} objects.
type CdnConfigurationServiceInterface interface {

	// CreateCdnConfigurations
	//
	// Creates new {@link CdnConfiguration} objects.
	//
	CreateCdnConfigurations(ctx context.Context, input CreateCdnConfigurations) (*CreateCdnConfigurationsResponse, error)

	// GetCdnConfigurationsByStatement
	//
	// Gets a {@link CdnConfigurationPage} of {@link CdnConfiguration} objects that satisfy the given
	// {@link Statement#query}. Currently only CDN Configurations of type {@link
	// CdnConfigurationType#LIVE_STREAM_SOURCE_CONTENT} will be returned. The following fields are
	// supported for filtering:
	//
	// <table>
	// <tr>
	// <th scope="col">PQL Property</th> <th scope="col">Object Property</th>
	// </tr>
	// <tr>
	// <td>{@code id}</td>
	// <td>{@link CdnConfiguration#id}</td>
	// </tr>
	// <tr>
	// <td>{@code name}</td>
	// <td>{@link CdnConfiguration#name}</td>
	// </tr>
	// </table>
	//
	GetCdnConfigurationsByStatement(ctx context.Context, input GetCdnConfigurationsByStatement) (*GetCdnConfigurationsByStatementResponse, error)

	// PerformCdnConfigurationAction
	//
	// Performs actions on {@link CdnConfiguration} objects that match the given {@link
	// Statement#query}.
	//
	PerformCdnConfigurationAction(ctx context.Context, action requestbody.PerformAction, input PerformCdnConfigurationAction) (*PerformCdnConfigurationActionResponse, error)

	// UpdateCdnConfigurations
	//
	// Updates the specified {@link CdnConfiguration} objects.
	//
	UpdateCdnConfigurations(ctx context.Context, input UpdateCdnConfigurations) (*UpdateCdnConfigurationsResponse, error)
}

type Envelope struct {
	xmlName xml.Name `xml:"Envelope"`
	Body    Body     `xml:"Body"`
}

type Body struct {
	xmlName xml.Name   `xml:"Body"`
	Fault   soap.Fault `xml:"Fault"`

	// CreateCdnConfigurationsResponse
	//
	// Creates new {@link CdnConfiguration} objects.
	//
	CreateCdnConfigurationsResponse CreateCdnConfigurationsResponse `xml:"createCdnConfigurationsResponse"`

	// GetCdnConfigurationsByStatementResponse
	//
	// Gets a {@link CdnConfigurationPage} of {@link CdnConfiguration} objects that satisfy the given
	// {@link Statement#query}. Currently only CDN Configurations of type {@link
	// CdnConfigurationType#LIVE_STREAM_SOURCE_CONTENT} will be returned. The following fields are
	// supported for filtering:
	//
	// <table>
	// <tr>
	// <th scope="col">PQL Property</th> <th scope="col">Object Property</th>
	// </tr>
	// <tr>
	// <td>{@code id}</td>
	// <td>{@link CdnConfiguration#id}</td>
	// </tr>
	// <tr>
	// <td>{@code name}</td>
	// <td>{@link CdnConfiguration#name}</td>
	// </tr>
	// </table>
	//
	GetCdnConfigurationsByStatementResponse GetCdnConfigurationsByStatementResponse `xml:"getCdnConfigurationsByStatementResponse"`

	// PerformCdnConfigurationActionResponse
	//
	// Performs actions on {@link CdnConfiguration} objects that match the given {@link
	// Statement#query}.
	//
	PerformCdnConfigurationActionResponse PerformCdnConfigurationActionResponse `xml:"performCdnConfigurationActionResponse"`

	// UpdateCdnConfigurationsResponse
	//
	// Updates the specified {@link CdnConfiguration} objects.
	//
	UpdateCdnConfigurationsResponse UpdateCdnConfigurationsResponse `xml:"updateCdnConfigurationsResponse"`
}

type Service struct {
	client          soap.Client
	wsdl            string
	networkCode     int
	applicationName string
}

func NewService(client soap.Client, networkCode int, applicationName string) CdnConfigurationServiceInterface {
	return &Service{
		client:          client,
		wsdl:            wsdl,
		networkCode:     networkCode,
		applicationName: applicationName,
	}
}

// CdnConfigurationServiceInterface
//
// Provides methods for creating, updating and retrieving {@link CdnConfiguration} objects.
//

// CreateCdnConfigurations
//
// Creates new {@link CdnConfiguration} objects.
func (s *Service) CreateCdnConfigurations(ctx context.Context, input CreateCdnConfigurations) (*CreateCdnConfigurationsResponse, error) {
	parameterXML, err := gamxml.DeepMarshal(input, true)
	data := requestbody.DefaultRequestBody{
		NetworkCode:     s.networkCode,
		ApplicationName: s.applicationName,
		OperationName:   OperationCreateCdnConfigurations,
		Parameters:      string(parameterXML),
	}

	soapBody, err := requestbody.GenerateDefaultRequestSoapBody(data)
	if err != nil {
		return nil, fmt.Errorf("failed to generate soap body: %w", err)
	}

	body, err := s.client.Call(ctx, s.wsdl, soapBody)
	if err != nil {
		return nil, err
	}

	var envelope Envelope
	if err := xml.Unmarshal(body, &envelope); err != nil {
		return nil, err
	}

	if envelope.Body.Fault.Detail.APIExecutionFault != nil {
		apiExceptionFaultErrors := envelope.Body.Fault.Detail.APIExecutionFault.Errors[0]
		return nil, RaiseError(apiExceptionFaultErrors.ErrorType, apiExceptionFaultErrors.Reason)
	}
	return &envelope.Body.CreateCdnConfigurationsResponse, nil
}

// GetCdnConfigurationsByStatement
//
// Gets a {@link CdnConfigurationPage} of {@link CdnConfiguration} objects that satisfy the given
// {@link Statement#query}. Currently only CDN Configurations of type {@link
// CdnConfigurationType#LIVE_STREAM_SOURCE_CONTENT} will be returned. The following fields are
// supported for filtering:
//
// <table>
// <tr>
// <th scope="col">PQL Property</th> <th scope="col">Object Property</th>
// </tr>
// <tr>
// <td>{@code id}</td>
// <td>{@link CdnConfiguration#id}</td>
// </tr>
// <tr>
// <td>{@code name}</td>
// <td>{@link CdnConfiguration#name}</td>
// </tr>
// </table>
func (s *Service) GetCdnConfigurationsByStatement(ctx context.Context, input GetCdnConfigurationsByStatement) (*GetCdnConfigurationsByStatementResponse, error) {
	parameterXML, err := gamxml.DeepMarshal(input, true)
	data := requestbody.DefaultRequestBody{
		NetworkCode:     s.networkCode,
		ApplicationName: s.applicationName,
		OperationName:   OperationGetCdnConfigurationsByStatement,
		Parameters:      string(parameterXML),
	}

	soapBody, err := requestbody.GenerateDefaultRequestSoapBody(data)
	if err != nil {
		return nil, fmt.Errorf("failed to generate soap body: %w", err)
	}

	body, err := s.client.Call(ctx, s.wsdl, soapBody)
	if err != nil {
		return nil, err
	}

	var envelope Envelope
	if err := xml.Unmarshal(body, &envelope); err != nil {
		return nil, err
	}

	if envelope.Body.Fault.Detail.APIExecutionFault != nil {
		apiExceptionFaultErrors := envelope.Body.Fault.Detail.APIExecutionFault.Errors[0]
		return nil, RaiseError(apiExceptionFaultErrors.ErrorType, apiExceptionFaultErrors.Reason)
	}
	return &envelope.Body.GetCdnConfigurationsByStatementResponse, nil
}

func (s *Service) PerformCdnConfigurationAction(ctx context.Context, action requestbody.PerformAction, input PerformCdnConfigurationAction) (*PerformCdnConfigurationActionResponse, error) {
	performActionBody, err := action.GetPerformActionBody()
	if err != nil {
		return nil, fmt.Errorf("failed to perform action: %w", err)
	}

	parameterXML, err := gamxml.DeepMarshal(input.FilterStatement, true)
	if err != nil {
		return nil, fmt.Errorf("failed to DeepMarshal: %w", err)
	}

	data := requestbody.PerformActionBodyData{
		NetworkCode:        s.networkCode,
		ApplicationName:    s.applicationName,
		OperationName:      OperationPerformCdnConfigurationAction,
		ActionName:         "cdnConfigurationAction",
		ActionType:         action.GetActionType(),
		ActionField:        performActionBody,
		Statement:          "filterStatement",
		StatementParameter: string(parameterXML),
	}

	soapBody, err := requestbody.GeneratePerformActionSoapBody(data)
	if err != nil {
		return nil, fmt.Errorf("failed to generate soap body: %w", err)
	}

	body, err := s.client.Call(ctx, s.wsdl, soapBody)
	if err != nil {
		return nil, fmt.Errorf("failed to call: %w", err)
	}

	var envelope Envelope
	if err := xml.Unmarshal(body, &envelope); err != nil {
		return nil, fmt.Errorf("failed to unmarshal: %w", err)
	}

	if envelope.Body.Fault.Detail.APIExecutionFault != nil {
		// TODO handle multiple errors
		apiExceptionFaultErrors := envelope.Body.Fault.Detail.APIExecutionFault.Errors[0]
		return nil, RaiseError(apiExceptionFaultErrors.ErrorType, apiExceptionFaultErrors.Reason)
	}
	return &envelope.Body.PerformCdnConfigurationActionResponse, nil
}

// UpdateCdnConfigurations
//
// Updates the specified {@link CdnConfiguration} objects.
func (s *Service) UpdateCdnConfigurations(ctx context.Context, input UpdateCdnConfigurations) (*UpdateCdnConfigurationsResponse, error) {
	parameterXML, err := gamxml.DeepMarshal(input, true)
	data := requestbody.DefaultRequestBody{
		NetworkCode:     s.networkCode,
		ApplicationName: s.applicationName,
		OperationName:   OperationUpdateCdnConfigurations,
		Parameters:      string(parameterXML),
	}

	soapBody, err := requestbody.GenerateDefaultRequestSoapBody(data)
	if err != nil {
		return nil, fmt.Errorf("failed to generate soap body: %w", err)
	}

	body, err := s.client.Call(ctx, s.wsdl, soapBody)
	if err != nil {
		return nil, err
	}

	var envelope Envelope
	if err := xml.Unmarshal(body, &envelope); err != nil {
		return nil, err
	}

	if envelope.Body.Fault.Detail.APIExecutionFault != nil {
		apiExceptionFaultErrors := envelope.Body.Fault.Detail.APIExecutionFault.Errors[0]
		return nil, RaiseError(apiExceptionFaultErrors.ErrorType, apiExceptionFaultErrors.Reason)
	}
	return &envelope.Body.UpdateCdnConfigurationsResponse, nil
}
