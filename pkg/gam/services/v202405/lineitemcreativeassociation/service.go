// Code generated by gamwsdl/main.go. DO NOT EDIT.
package lineitemcreativeassociation

import (
	"context"
	"encoding/xml"
	"fmt"

	"github.com/knakazawa99/gam-sdk-go/pkg/gam/requestbody"
	"github.com/knakazawa99/gam-sdk-go/pkg/gam/soap"
	gamxml "github.com/knakazawa99/gam-sdk-go/pkg/xml"
)

const (
	wsdl = "https://ads.google.com/apis/ads/publisher/v202405/LineItemCreativeAssociationService"

	OperationCreateLineItemCreativeAssociations = "createLineItemCreativeAssociations"

	OperationGetLineItemCreativeAssociationsByStatement = "getLineItemCreativeAssociationsByStatement"

	OperationGetPreviewUrl = "getPreviewUrl"

	OperationGetPreviewUrlsForNativeStyles = "getPreviewUrlsForNativeStyles"

	OperationPerformLineItemCreativeAssociationAction = "performLineItemCreativeAssociationAction"

	OperationPushCreativeToDevices = "pushCreativeToDevices"

	OperationUpdateLineItemCreativeAssociations = "updateLineItemCreativeAssociations"
)

// LineItemCreativeAssociationServiceInterface
//
// Provides operations for creating, updating and retrieving {@link LineItemCreativeAssociation}
// objects.
//
// <p>A line item creative association (LICA) associates a {@link Creative} with a {@link LineItem}.
// When a line item is selected to serve, the LICAs specify which creatives can appear for the ad
// units that are targeted by the line item. In order to be associated with a line item, the
// creative must have a size that exists within the attribute {@link LineItem#creativePlaceholders}.
//
// <p>Each LICA has a start and end date and time that defines when the creative should be
// displayed.
//
// <p>To read more about associating creatives with line items, see this <a
// href="https://support.google.com/admanager/answer/3187916">Ad Manager Help Center</a> article.
type LineItemCreativeAssociationServiceInterface interface {

	// CreateLineItemCreativeAssociations
	//
	// Creates new {@link LineItemCreativeAssociation} objects
	//
	CreateLineItemCreativeAssociations(ctx context.Context, input CreateLineItemCreativeAssociations) (*CreateLineItemCreativeAssociationsResponse, error)

	// GetLineItemCreativeAssociationsByStatement
	//
	// Gets a {@link LineItemCreativeAssociationPage} of {@link LineItemCreativeAssociation} objects
	// that satisfy the given {@link Statement#query}. The following fields are supported for
	// filtering:
	//
	// <table>
	// <tr>
	// <th scope="col">PQL Property</th> <th scope="col">Object Property</th>
	// </tr>
	// <tr>
	// <td>{@code creativeId}</td>
	// <td>{@link LineItemCreativeAssociation#creativeId}</td>
	// </tr>
	// <tr>
	// <td>{@code manualCreativeRotationWeight}</td>
	// <td>{@link LineItemCreativeAssociation#manualCreativeRotationWeight}</td>
	// </tr>
	// <tr>
	// <td>{@code destinationUrl}</td>
	// <td>{@link LineItemCreativeAssociation#destinationUrl}</td>
	// </tr>
	// <tr>
	// <td>{@code lineItemId}</td>
	// <td>{@link LineItemCreativeAssociation#lineItemId}</td>
	// </tr>
	// <tr>
	// <td>{@code status}</td>
	// <td>{@link LineItemCreativeAssociation#status}</td>
	// </tr>
	// <tr>
	// <td>{@code lastModifiedDateTime}</td>
	// <td>{@link LineItemCreativeAssociation#lastModifiedDateTime}</td>
	// </tr>
	// </table>
	//
	GetLineItemCreativeAssociationsByStatement(ctx context.Context, input GetLineItemCreativeAssociationsByStatement) (*GetLineItemCreativeAssociationsByStatementResponse, error)

	// GetPreviewUrl
	//
	// Returns an insite preview URL that references the specified site URL with the specified
	// creative from the association served to it. For Creative Set previewing you may specify the
	// master creative Id.
	//
	GetPreviewUrl(ctx context.Context, input GetPreviewUrl) (*GetPreviewUrlResponse, error)

	// GetPreviewUrlsForNativeStyles
	//
	// Returns a list of URLs that reference the specified site URL with the specified creative from
	// the association served to it. For Creative Set previewing you may specify the master creative
	// Id. Each URL corresponds to one available native style for previewing the specified creative.
	//
	GetPreviewUrlsForNativeStyles(ctx context.Context, input GetPreviewUrlsForNativeStyles) (*GetPreviewUrlsForNativeStylesResponse, error)

	// PerformLineItemCreativeAssociationAction
	//
	// Performs actions on {@link LineItemCreativeAssociation} objects that match the given {@link
	// Statement#query}.
	//
	PerformLineItemCreativeAssociationAction(ctx context.Context, action requestbody.PerformAction, input PerformLineItemCreativeAssociationAction) (*PerformLineItemCreativeAssociationActionResponse, error)

	// PushCreativeToDevices
	//
	// Pushes a creative to devices that that satisfy the given {@link Statement#query}. *
	//
	PushCreativeToDevices(ctx context.Context, input PushCreativeToDevices) (*PushCreativeToDevicesResponse, error)

	// UpdateLineItemCreativeAssociations
	//
	// Updates the specified {@link LineItemCreativeAssociation} objects
	//
	UpdateLineItemCreativeAssociations(ctx context.Context, input UpdateLineItemCreativeAssociations) (*UpdateLineItemCreativeAssociationsResponse, error)
}

type Envelope struct {
	xmlName xml.Name `xml:"Envelope"`
	Body    Body     `xml:"Body"`
}

type Body struct {
	xmlName xml.Name   `xml:"Body"`
	Fault   soap.Fault `xml:"Fault"`

	// CreateLineItemCreativeAssociationsResponse
	//
	// Creates new {@link LineItemCreativeAssociation} objects
	//
	CreateLineItemCreativeAssociationsResponse CreateLineItemCreativeAssociationsResponse `xml:"createLineItemCreativeAssociationsResponse"`

	// GetLineItemCreativeAssociationsByStatementResponse
	//
	// Gets a {@link LineItemCreativeAssociationPage} of {@link LineItemCreativeAssociation} objects
	// that satisfy the given {@link Statement#query}. The following fields are supported for
	// filtering:
	//
	// <table>
	// <tr>
	// <th scope="col">PQL Property</th> <th scope="col">Object Property</th>
	// </tr>
	// <tr>
	// <td>{@code creativeId}</td>
	// <td>{@link LineItemCreativeAssociation#creativeId}</td>
	// </tr>
	// <tr>
	// <td>{@code manualCreativeRotationWeight}</td>
	// <td>{@link LineItemCreativeAssociation#manualCreativeRotationWeight}</td>
	// </tr>
	// <tr>
	// <td>{@code destinationUrl}</td>
	// <td>{@link LineItemCreativeAssociation#destinationUrl}</td>
	// </tr>
	// <tr>
	// <td>{@code lineItemId}</td>
	// <td>{@link LineItemCreativeAssociation#lineItemId}</td>
	// </tr>
	// <tr>
	// <td>{@code status}</td>
	// <td>{@link LineItemCreativeAssociation#status}</td>
	// </tr>
	// <tr>
	// <td>{@code lastModifiedDateTime}</td>
	// <td>{@link LineItemCreativeAssociation#lastModifiedDateTime}</td>
	// </tr>
	// </table>
	//
	GetLineItemCreativeAssociationsByStatementResponse GetLineItemCreativeAssociationsByStatementResponse `xml:"getLineItemCreativeAssociationsByStatementResponse"`

	// GetPreviewUrlResponse
	//
	// Returns an insite preview URL that references the specified site URL with the specified
	// creative from the association served to it. For Creative Set previewing you may specify the
	// master creative Id.
	//
	GetPreviewUrlResponse GetPreviewUrlResponse `xml:"getPreviewUrlResponse"`

	// GetPreviewUrlsForNativeStylesResponse
	//
	// Returns a list of URLs that reference the specified site URL with the specified creative from
	// the association served to it. For Creative Set previewing you may specify the master creative
	// Id. Each URL corresponds to one available native style for previewing the specified creative.
	//
	GetPreviewUrlsForNativeStylesResponse GetPreviewUrlsForNativeStylesResponse `xml:"getPreviewUrlsForNativeStylesResponse"`

	// PerformLineItemCreativeAssociationActionResponse
	//
	// Performs actions on {@link LineItemCreativeAssociation} objects that match the given {@link
	// Statement#query}.
	//
	PerformLineItemCreativeAssociationActionResponse PerformLineItemCreativeAssociationActionResponse `xml:"performLineItemCreativeAssociationActionResponse"`

	// PushCreativeToDevicesResponse
	//
	// Pushes a creative to devices that that satisfy the given {@link Statement#query}. *
	//
	PushCreativeToDevicesResponse PushCreativeToDevicesResponse `xml:"pushCreativeToDevicesResponse"`

	// UpdateLineItemCreativeAssociationsResponse
	//
	// Updates the specified {@link LineItemCreativeAssociation} objects
	//
	UpdateLineItemCreativeAssociationsResponse UpdateLineItemCreativeAssociationsResponse `xml:"updateLineItemCreativeAssociationsResponse"`
}

type Service struct {
	client          soap.Client
	wsdl            string
	networkCode     int
	applicationName string
}

func NewService(client soap.Client, networkCode int, applicationName string) LineItemCreativeAssociationServiceInterface {
	return &Service{
		client:          client,
		wsdl:            wsdl,
		networkCode:     networkCode,
		applicationName: applicationName,
	}
}

// LineItemCreativeAssociationServiceInterface
//
// Provides operations for creating, updating and retrieving {@link LineItemCreativeAssociation}
// objects.
//
// <p>A line item creative association (LICA) associates a {@link Creative} with a {@link LineItem}.
// When a line item is selected to serve, the LICAs specify which creatives can appear for the ad
// units that are targeted by the line item. In order to be associated with a line item, the
// creative must have a size that exists within the attribute {@link LineItem#creativePlaceholders}.
//
// <p>Each LICA has a start and end date and time that defines when the creative should be
// displayed.
//
// <p>To read more about associating creatives with line items, see this <a
// href="https://support.google.com/admanager/answer/3187916">Ad Manager Help Center</a> article.
//

// CreateLineItemCreativeAssociations
//
// Creates new {@link LineItemCreativeAssociation} objects
func (s *Service) CreateLineItemCreativeAssociations(ctx context.Context, input CreateLineItemCreativeAssociations) (*CreateLineItemCreativeAssociationsResponse, error) {
	parameterXML, err := gamxml.DeepMarshal(input, true)
	data := requestbody.DefaultRequestBody{
		NetworkCode:     s.networkCode,
		ApplicationName: s.applicationName,
		OperationName:   OperationCreateLineItemCreativeAssociations,
		Parameters:      string(parameterXML),
	}

	soapBody, err := requestbody.GenerateDefaultRequestSoapBody(data)
	if err != nil {
		return nil, fmt.Errorf("failed to generate soap body: %w", err)
	}

	body, err := s.client.Call(ctx, s.wsdl, soapBody)
	if err != nil {
		return nil, err
	}

	var envelope Envelope
	if err := xml.Unmarshal(body, &envelope); err != nil {
		return nil, err
	}

	if envelope.Body.Fault.Detail.APIExecutionFault != nil {
		apiExceptionFaultErrors := envelope.Body.Fault.Detail.APIExecutionFault.Errors[0]
		return nil, RaiseError(apiExceptionFaultErrors.ErrorType, apiExceptionFaultErrors.Reason)
	}
	return &envelope.Body.CreateLineItemCreativeAssociationsResponse, nil
}

// GetLineItemCreativeAssociationsByStatement
//
// Gets a {@link LineItemCreativeAssociationPage} of {@link LineItemCreativeAssociation} objects
// that satisfy the given {@link Statement#query}. The following fields are supported for
// filtering:
//
// <table>
// <tr>
// <th scope="col">PQL Property</th> <th scope="col">Object Property</th>
// </tr>
// <tr>
// <td>{@code creativeId}</td>
// <td>{@link LineItemCreativeAssociation#creativeId}</td>
// </tr>
// <tr>
// <td>{@code manualCreativeRotationWeight}</td>
// <td>{@link LineItemCreativeAssociation#manualCreativeRotationWeight}</td>
// </tr>
// <tr>
// <td>{@code destinationUrl}</td>
// <td>{@link LineItemCreativeAssociation#destinationUrl}</td>
// </tr>
// <tr>
// <td>{@code lineItemId}</td>
// <td>{@link LineItemCreativeAssociation#lineItemId}</td>
// </tr>
// <tr>
// <td>{@code status}</td>
// <td>{@link LineItemCreativeAssociation#status}</td>
// </tr>
// <tr>
// <td>{@code lastModifiedDateTime}</td>
// <td>{@link LineItemCreativeAssociation#lastModifiedDateTime}</td>
// </tr>
// </table>
func (s *Service) GetLineItemCreativeAssociationsByStatement(ctx context.Context, input GetLineItemCreativeAssociationsByStatement) (*GetLineItemCreativeAssociationsByStatementResponse, error) {
	parameterXML, err := gamxml.DeepMarshal(input, true)
	data := requestbody.DefaultRequestBody{
		NetworkCode:     s.networkCode,
		ApplicationName: s.applicationName,
		OperationName:   OperationGetLineItemCreativeAssociationsByStatement,
		Parameters:      string(parameterXML),
	}

	soapBody, err := requestbody.GenerateDefaultRequestSoapBody(data)
	if err != nil {
		return nil, fmt.Errorf("failed to generate soap body: %w", err)
	}

	body, err := s.client.Call(ctx, s.wsdl, soapBody)
	if err != nil {
		return nil, err
	}

	var envelope Envelope
	if err := xml.Unmarshal(body, &envelope); err != nil {
		return nil, err
	}

	if envelope.Body.Fault.Detail.APIExecutionFault != nil {
		apiExceptionFaultErrors := envelope.Body.Fault.Detail.APIExecutionFault.Errors[0]
		return nil, RaiseError(apiExceptionFaultErrors.ErrorType, apiExceptionFaultErrors.Reason)
	}
	return &envelope.Body.GetLineItemCreativeAssociationsByStatementResponse, nil
}

// GetPreviewUrl
//
// Returns an insite preview URL that references the specified site URL with the specified
// creative from the association served to it. For Creative Set previewing you may specify the
// master creative Id.
func (s *Service) GetPreviewUrl(ctx context.Context, input GetPreviewUrl) (*GetPreviewUrlResponse, error) {
	parameterXML, err := gamxml.DeepMarshal(input, true)
	data := requestbody.DefaultRequestBody{
		NetworkCode:     s.networkCode,
		ApplicationName: s.applicationName,
		OperationName:   OperationGetPreviewUrl,
		Parameters:      string(parameterXML),
	}

	soapBody, err := requestbody.GenerateDefaultRequestSoapBody(data)
	if err != nil {
		return nil, fmt.Errorf("failed to generate soap body: %w", err)
	}

	body, err := s.client.Call(ctx, s.wsdl, soapBody)
	if err != nil {
		return nil, err
	}

	var envelope Envelope
	if err := xml.Unmarshal(body, &envelope); err != nil {
		return nil, err
	}

	if envelope.Body.Fault.Detail.APIExecutionFault != nil {
		apiExceptionFaultErrors := envelope.Body.Fault.Detail.APIExecutionFault.Errors[0]
		return nil, RaiseError(apiExceptionFaultErrors.ErrorType, apiExceptionFaultErrors.Reason)
	}
	return &envelope.Body.GetPreviewUrlResponse, nil
}

// GetPreviewUrlsForNativeStyles
//
// Returns a list of URLs that reference the specified site URL with the specified creative from
// the association served to it. For Creative Set previewing you may specify the master creative
// Id. Each URL corresponds to one available native style for previewing the specified creative.
func (s *Service) GetPreviewUrlsForNativeStyles(ctx context.Context, input GetPreviewUrlsForNativeStyles) (*GetPreviewUrlsForNativeStylesResponse, error) {
	parameterXML, err := gamxml.DeepMarshal(input, true)
	data := requestbody.DefaultRequestBody{
		NetworkCode:     s.networkCode,
		ApplicationName: s.applicationName,
		OperationName:   OperationGetPreviewUrlsForNativeStyles,
		Parameters:      string(parameterXML),
	}

	soapBody, err := requestbody.GenerateDefaultRequestSoapBody(data)
	if err != nil {
		return nil, fmt.Errorf("failed to generate soap body: %w", err)
	}

	body, err := s.client.Call(ctx, s.wsdl, soapBody)
	if err != nil {
		return nil, err
	}

	var envelope Envelope
	if err := xml.Unmarshal(body, &envelope); err != nil {
		return nil, err
	}

	if envelope.Body.Fault.Detail.APIExecutionFault != nil {
		apiExceptionFaultErrors := envelope.Body.Fault.Detail.APIExecutionFault.Errors[0]
		return nil, RaiseError(apiExceptionFaultErrors.ErrorType, apiExceptionFaultErrors.Reason)
	}
	return &envelope.Body.GetPreviewUrlsForNativeStylesResponse, nil
}

func (s *Service) PerformLineItemCreativeAssociationAction(ctx context.Context, action requestbody.PerformAction, input PerformLineItemCreativeAssociationAction) (*PerformLineItemCreativeAssociationActionResponse, error) {
	performActionBody, err := action.GetPerformActionBody()
	if err != nil {
		return nil, fmt.Errorf("failed to perform action: %w", err)
	}

	parameterXML, err := gamxml.DeepMarshal(input.FilterStatement, true)
	if err != nil {
		return nil, fmt.Errorf("failed to DeepMarshal: %w", err)
	}

	data := requestbody.PerformActionBodyData{
		NetworkCode:        s.networkCode,
		ApplicationName:    s.applicationName,
		OperationName:      OperationPerformLineItemCreativeAssociationAction,
		ActionName:         "lineItemCreativeAssociationAction",
		ActionType:         action.GetActionType(),
		ActionField:        performActionBody,
		Statement:          "filterStatement",
		StatementParameter: string(parameterXML),
	}

	soapBody, err := requestbody.GeneratePerformActionSoapBody(data)
	if err != nil {
		return nil, fmt.Errorf("failed to generate soap body: %w", err)
	}

	body, err := s.client.Call(ctx, s.wsdl, soapBody)
	if err != nil {
		return nil, fmt.Errorf("failed to call: %w", err)
	}

	var envelope Envelope
	if err := xml.Unmarshal(body, &envelope); err != nil {
		return nil, fmt.Errorf("failed to unmarshal: %w", err)
	}

	if envelope.Body.Fault.Detail.APIExecutionFault != nil {
		// TODO handle multiple errors
		apiExceptionFaultErrors := envelope.Body.Fault.Detail.APIExecutionFault.Errors[0]
		return nil, RaiseError(apiExceptionFaultErrors.ErrorType, apiExceptionFaultErrors.Reason)
	}
	return &envelope.Body.PerformLineItemCreativeAssociationActionResponse, nil
}

// PushCreativeToDevices
//
// Pushes a creative to devices that that satisfy the given {@link Statement#query}. *
func (s *Service) PushCreativeToDevices(ctx context.Context, input PushCreativeToDevices) (*PushCreativeToDevicesResponse, error) {
	parameterXML, err := gamxml.DeepMarshal(input, true)
	data := requestbody.DefaultRequestBody{
		NetworkCode:     s.networkCode,
		ApplicationName: s.applicationName,
		OperationName:   OperationPushCreativeToDevices,
		Parameters:      string(parameterXML),
	}

	soapBody, err := requestbody.GenerateDefaultRequestSoapBody(data)
	if err != nil {
		return nil, fmt.Errorf("failed to generate soap body: %w", err)
	}

	body, err := s.client.Call(ctx, s.wsdl, soapBody)
	if err != nil {
		return nil, err
	}

	var envelope Envelope
	if err := xml.Unmarshal(body, &envelope); err != nil {
		return nil, err
	}

	if envelope.Body.Fault.Detail.APIExecutionFault != nil {
		apiExceptionFaultErrors := envelope.Body.Fault.Detail.APIExecutionFault.Errors[0]
		return nil, RaiseError(apiExceptionFaultErrors.ErrorType, apiExceptionFaultErrors.Reason)
	}
	return &envelope.Body.PushCreativeToDevicesResponse, nil
}

// UpdateLineItemCreativeAssociations
//
// Updates the specified {@link LineItemCreativeAssociation} objects
func (s *Service) UpdateLineItemCreativeAssociations(ctx context.Context, input UpdateLineItemCreativeAssociations) (*UpdateLineItemCreativeAssociationsResponse, error) {
	parameterXML, err := gamxml.DeepMarshal(input, true)
	data := requestbody.DefaultRequestBody{
		NetworkCode:     s.networkCode,
		ApplicationName: s.applicationName,
		OperationName:   OperationUpdateLineItemCreativeAssociations,
		Parameters:      string(parameterXML),
	}

	soapBody, err := requestbody.GenerateDefaultRequestSoapBody(data)
	if err != nil {
		return nil, fmt.Errorf("failed to generate soap body: %w", err)
	}

	body, err := s.client.Call(ctx, s.wsdl, soapBody)
	if err != nil {
		return nil, err
	}

	var envelope Envelope
	if err := xml.Unmarshal(body, &envelope); err != nil {
		return nil, err
	}

	if envelope.Body.Fault.Detail.APIExecutionFault != nil {
		apiExceptionFaultErrors := envelope.Body.Fault.Detail.APIExecutionFault.Errors[0]
		return nil, RaiseError(apiExceptionFaultErrors.ErrorType, apiExceptionFaultErrors.Reason)
	}
	return &envelope.Body.UpdateLineItemCreativeAssociationsResponse, nil
}
