// Code generated by gamwsdl/main.go. DO NOT EDIT.
package lineitemcreativeassociation

import (
	"github.com/knakazawa99/gam-sdk-go/pkg/gam/requestbody"
	gamxml "github.com/knakazawa99/gam-sdk-go/pkg/xml"
)

// ObjectValue
//
// Contains an object value.
// <p>
// <b>This object is experimental!
// <code>ObjectValue</code> is an experimental, innovative, and rapidly
// changing new feature for Ad Manager. Unfortunately, being on the bleeding edge means that
// we may make backwards-incompatible changes to
// <code>ObjectValue</code>. We will inform the community when this feature
// is no longer experimental.</b>
//

type ObjectValue struct {
}

// ActivateLineItemCreativeAssociations
//
// The action used for activating {@link LineItemCreativeAssociation} objects.
//

type ActivateLineItemCreativeAssociations struct {
}

func NewActivateLineItemCreativeAssociations() (requestbody.PerformAction, error) {
	return &ActivateLineItemCreativeAssociations{}, nil
}
func (a ActivateLineItemCreativeAssociations) GetPerformActionBody() (string, error) {
	performActionXML, err := gamxml.DeepMarshal(a, true)
	if err != nil {
		return "", err
	}
	return string(performActionXML), nil
}

func (a ActivateLineItemCreativeAssociations) GetActionType() string {
	return "ActivateLineItemCreativeAssociations"
}

// AdSenseAccountError
//
// Error for AdSense related API calls.
//

type AdSenseAccountError struct {
	Reason string `xml:"reason"`
}

// ApiError
//
// The API error base class that provides details about an error that occurred
// while processing a service request.
//
// <p>The OGNL field path is provided for parsers to identify the request data
// element that may have caused the error.</p>
//

type ApiError struct {
	Reason string `xml:"reason"`
}

// ApiException
//
// Exception class for holding a list of service errors.
//

type ApiException struct {
	Reason string `xml:"reason"`
}

// ApiVersionError
//
// Errors related to the usage of API versions.
//

type ApiVersionError struct {
	Reason string `xml:"reason"`
}

// ApplicationException
//
// Base class for exceptions.
//

type ApplicationException struct {
	Reason string `xml:"reason"`
}

// AssetError
//
// Lists all errors associated with assets.
//

type AssetError struct {
	Reason string `xml:"reason"`
}

// AudienceExtensionError
//
// Errors associated with audience extension enabled line items
//

type AudienceExtensionError struct {
	Reason string `xml:"reason"`
}

// AuthenticationError
//
// An error for an exception that occurred when authenticating.
//

type AuthenticationError struct {
	Reason string `xml:"reason"`
}

// BooleanValue
//
// Contains a boolean value.
//

type BooleanValue struct {

	// Value
	//
	// The boolean value.
	//

	Value *bool `xml:"value"`
}

// CollectionSizeError
//
// Error for the size of the collection being too large
//

type CollectionSizeError struct {
	Reason string `xml:"reason"`
}

// CommonError
//
// A place for common errors that can be used across services.
//

type CommonError struct {
	Reason string `xml:"reason"`
}

// CreativeAssetMacroError
//
// Lists all errors associated with creative asset macros.
//

type CreativeAssetMacroError struct {
	Reason string `xml:"reason"`
}

// CreativeError
//
// Lists all errors associated with creatives.
//

type CreativeError struct {
	Reason string `xml:"reason"`
}

// CreativeNativeStylePreview
//
// Represents the {@link NativeStyle} of a {@link Creative} and its corresponding preview URL.
//

type CreativeNativeStylePreview struct {

	// NativeStyleId
	//
	// The id of the {@link NativeStyle}.
	//

	NativeStyleId *int64 `xml:"nativeStyleId"`

	// PreviewUrl
	//
	// The URL for previewing this creative using this particular {@link NativeStyle}
	//

	PreviewUrl *string `xml:"previewUrl"`
}

// CreativePreviewError
//
// Errors associated with generation of creative preview URIs.
//

type CreativePreviewError struct {
	Reason string `xml:"reason"`
}

// CreativePushOptions
//
// Data needed to push a creative to a mobile device.
//

type CreativePushOptions struct {

	// LineItemId
	//
	// The ID of the LineItem to preview.
	//
	// <p>This field is required.
	//

	LineItemId *int64 `xml:"lineItemId"`

	// CreativeId
	//
	// The ID of the Creative to preview.
	//
	// <p>This field is required.
	//

	CreativeId *int64 `xml:"creativeId"`

	// NativeStyleId
	//
	// The ID of the native style to preview the creative with.
	//
	// <p>This field is optional but the referenced object must exist.
	//

	NativeStyleId *int64 `xml:"nativeStyleId"`
}

// CreativeSetError
//
// Errors relating to creative sets & subclasses.
//

type CreativeSetError struct {
	Reason string `xml:"reason"`
}

// CreativeTemplateError
//
// A catch-all error that lists all generic errors associated with CreativeTemplate.
//

type CreativeTemplateError struct {
	Reason string `xml:"reason"`
}

// CreativeTemplateOperationError
//
// An error that can occur while performing an operation on a creative template.
//

type CreativeTemplateOperationError struct {
	Reason string `xml:"reason"`
}

// CrossSellError
//
// Lists all errors associated with cross selling.
//

type CrossSellError struct {
	Reason string `xml:"reason"`
}

// CustomCreativeError
//
// Lists all errors associated with custom creatives.
//

type CustomCreativeError struct {
	Reason string `xml:"reason"`
}

// CustomFieldValueError
//
// Errors specific to editing custom field values
//

type CustomFieldValueError struct {
	Reason string `xml:"reason"`
}

// Date
//
// Represents a date.
//

type Date struct {

	// Year
	//
	// Year (e.g., 2009)
	//

	Year *int `xml:"year"`

	// Month
	//
	// Month (1..12)
	//

	Month *int `xml:"month"`

	// Day
	//
	// Day (1..31)
	//

	Day *int `xml:"day"`
}

// DateTime
//
// Represents a date combined with the time of day.
//

type DateTime struct {

	// Date

	Date *Date `xml:"date"`

	// Hour

	Hour *int `xml:"hour"`

	// Minute

	Minute *int `xml:"minute"`

	// Second

	Second *int `xml:"second"`

	// TimeZoneId

	TimeZoneId *string `xml:"timeZoneId"`
}

// DateTimeValue
//
// Contains a date-time value.
//

type DateTimeValue struct {

	// Value
	//
	// The {@code DateTime} value.
	//

	Value *DateTime `xml:"value"`
}

// DateValue
//
// Contains a date value.
//

type DateValue struct {

	// Value
	//
	// The {@code Date} value.
	//

	Value *Date `xml:"value"`
}

// DeactivateLineItemCreativeAssociations
//
// The action used for deactivating {@link LineItemCreativeAssociation} objects.
//

type DeactivateLineItemCreativeAssociations struct {
}

func NewDeactivateLineItemCreativeAssociations() (requestbody.PerformAction, error) {
	return &DeactivateLineItemCreativeAssociations{}, nil
}
func (a DeactivateLineItemCreativeAssociations) GetPerformActionBody() (string, error) {
	performActionXML, err := gamxml.DeepMarshal(a, true)
	if err != nil {
		return "", err
	}
	return string(performActionXML), nil
}

func (a DeactivateLineItemCreativeAssociations) GetActionType() string {
	return "DeactivateLineItemCreativeAssociations"
}

// DeleteLineItemCreativeAssociations
//
// The action used for deleting {@link LineItemCreativeAssociation} objects.
//

type DeleteLineItemCreativeAssociations struct {
}

func NewDeleteLineItemCreativeAssociations() (requestbody.PerformAction, error) {
	return &DeleteLineItemCreativeAssociations{}, nil
}
func (a DeleteLineItemCreativeAssociations) GetPerformActionBody() (string, error) {
	performActionXML, err := gamxml.DeepMarshal(a, true)
	if err != nil {
		return "", err
	}
	return string(performActionXML), nil
}

func (a DeleteLineItemCreativeAssociations) GetActionType() string {
	return "DeleteLineItemCreativeAssociations"
}

// EntityChildrenLimitReachedError
//
// Lists errors relating to having too many children on an entity.
//

type EntityChildrenLimitReachedError struct {
	Reason string `xml:"reason"`
}

// EntityLimitReachedError
//
// An error that occurs when creating an entity if the limit on the number of allowed entities for
// a network has already been reached.
//

type EntityLimitReachedError struct {
	Reason string `xml:"reason"`
}

// FeatureError
//
// Errors related to feature management.  If you attempt using a feature that is not available to
// the current network you'll receive a FeatureError with the missing feature as the trigger.
//

type FeatureError struct {
	Reason string `xml:"reason"`
}

// FieldPathElement
//
// A segment of a field path. Each dot in a field path defines a new segment.
//

type FieldPathElement struct {

	// Field
	//
	// The name of a field in lower camelcase. (e.g. "biddingStrategy")
	//

	Field *string `xml:"field"`

	// Index
	//
	// For list fields, this is a 0-indexed position in the list. Null for non-list fields.
	//

	Index *int `xml:"index"`
}

// FileError
//
// A list of all errors to be used for problems related to files.
//

type FileError struct {
	Reason string `xml:"reason"`
}

// HtmlBundleProcessorError
//
// Lists all errors associated with html5 file processing.
//

type HtmlBundleProcessorError struct {
	Reason string `xml:"reason"`
}

// ImageError
//
// Lists all errors associated with images.
//

type ImageError struct {
	Reason string `xml:"reason"`
}

// InternalApiError
//
// Indicates that a server-side error has occured. {@code InternalApiError}s
// are generally not the result of an invalid request or message sent by the
// client.
//

type InternalApiError struct {
	Reason string `xml:"reason"`
}

// InvalidPhoneNumberError
//
// Lists all errors associated with phone numbers.
//

type InvalidPhoneNumberError struct {
	Reason string `xml:"reason"`
}

// InvalidUrlError
//
// Lists all errors associated with URLs.
//

type InvalidUrlError struct {
	Reason string `xml:"reason"`
}

// LabelEntityAssociationError
//
// Errors specific to creating label entity associations.
//

type LabelEntityAssociationError struct {
	Reason string `xml:"reason"`
}

// LineItemCreativeAssociationAction
//
// Represents the actions that can be performed on
// {@link LineItemCreativeAssociation} objects.
//

type LineItemCreativeAssociationAction struct {
}

// LineItemCreativeAssociation
//
// A {@code LineItemCreativeAssociation} associates a {@link Creative} or {@link CreativeSet} with a
// {@link LineItem} so that the creative can be served in ad units targeted by the line item.
//

type LineItemCreativeAssociation struct {

	// LineItemId
	//
	// The ID of the {@link LineItem} to which the {@link Creative} should be associated. This
	// attribute is required.
	//

	LineItemId *int64 `xml:"lineItemId"`

	// CreativeId
	//
	// The ID of the {@link Creative} being associated with a {@link LineItem}.
	//
	// <p>This attribute is required if this is an association between a line item and a creative.
	// <br>
	// This attribute is ignored if this is an association between a line item and a creative set.
	//
	// <p>If this is an association between a line item and a creative, when retrieving the line item
	// creative association, the {@link #creativeId} will be the creative's ID. <br>
	// If this is an association between a line item and a creative set, when retrieving the line item
	// creative association, the {@link #creativeId} will be the ID of the {@link
	// CreativeSet#masterCreativeId master creative}.
	//

	CreativeId *int64 `xml:"creativeId"`

	// CreativeSetId
	//
	// The ID of the {@link CreativeSet} being associated with a {@link LineItem}. This attribute is
	// required if this is an association between a line item and a creative set.
	//
	// <p>This field will be {@code null} when retrieving associations between line items and
	// creatives not belonging to a set.
	//

	CreativeSetId *int64 `xml:"creativeSetId"`

	// ManualCreativeRotationWeight
	//
	// The weight of the {@link Creative}. This value is only used if the line item's {@code
	// creativeRotationType} is set to {@link CreativeRotationType#MANUAL}. This attribute is optional
	// and defaults to 10.
	//

	ManualCreativeRotationWeight *float64 `xml:"manualCreativeRotationWeight"`

	// SequentialCreativeRotationIndex
	//
	// The sequential rotation index of the {@link Creative}. This value is used only if the
	// associated line item's {@link LineItem#creativeRotationType} is set to {@link
	// CreativeRotationType#SEQUENTIAL}. This attribute is optional and defaults to 1.
	//

	SequentialCreativeRotationIndex *int `xml:"sequentialCreativeRotationIndex"`

	// StartDateTime
	//
	// Overrides the value set for {@link LineItem#startDateTime}. This value is optional and is only
	// valid for Ad Manager 360 networks. If unset, the {@link LineItem#startDateTime} will be used.
	//

	StartDateTime *DateTime `xml:"startDateTime"`

	// StartDateTimeType
	//
	// Specifies whether to start serving to the {@code LineItemCreativeAssociation} right away, in an
	// hour, etc. This attribute is optional and defaults to {@link
	// StartDateTimeType#USE_START_DATE_TIME}.
	//

	StartDateTimeType *StartDateTimeType `xml:"startDateTimeType"`

	// EndDateTime
	//
	// Overrides {@link LineItem#endDateTime}. This value is optional and is only valid for Ad Manager
	// 360 networks. If unset, the {@link LineItem#endDateTime} will be used.
	//

	EndDateTime *DateTime `xml:"endDateTime"`

	// DestinationUrl
	//
	// Overrides the value set for {@link HasDestinationUrlCreative#destinationUrl}. This value is
	// optional and is only valid for Ad Manager 360 networks.
	//

	DestinationUrl *string `xml:"destinationUrl"`

	// Sizes
	//
	// Overrides the value set for {@link Creative#size}, which allows the creative to be served to ad
	// units that would otherwise not be compatible for its actual size. This value is optional.
	//

	Sizes []*Size `xml:"sizes"`

	// Status
	//
	// The status of the association. This attribute is read-only.
	//

	Status *LineItemCreativeAssociationStatus `xml:"status"`

	// Stats
	//
	// Contains trafficking statistics for the association. This attribute is readonly and is
	// populated by Google. This will be {@code null} in case there are no statistics for the
	// association yet.
	//

	Stats *LineItemCreativeAssociationStats `xml:"stats"`

	// LastModifiedDateTime
	//
	// The date and time this association was last modified.
	//

	LastModifiedDateTime *DateTime `xml:"lastModifiedDateTime"`

	// TargetingName
	//
	// Specifies {@link CreativeTargeting} for this line item creative association.
	//
	// <p>This attribute is optional. It should match the creative targeting specified on the
	// corresponding {@link CreativePlaceholder} in the {@link LineItem} that is being associated with
	// the {@link Creative}.
	//

	TargetingName *string `xml:"targetingName"`
}

// LineItemCreativeAssociationError
//
// Lists all errors associated with line item-to-creative association dates.
//

type LineItemCreativeAssociationError struct {
	Reason string `xml:"reason"`
}

// LineItemCreativeAssociationOperationError
//
// Lists all errors for executing operations on
// line item-to-creative associations
//

type LineItemCreativeAssociationOperationError struct {
	Reason string `xml:"reason"`
}

// LineItemCreativeAssociationPage
//
// Captures a page of {@link LineItemCreativeAssociation} objects.
//

type LineItemCreativeAssociationPage struct {

	// TotalResultSetSize
	//
	// The size of the total result set to which this page belongs.
	//

	TotalResultSetSize *int `xml:"totalResultSetSize"`

	// StartIndex
	//
	// The absolute index in the total result set on which this page begins.
	//

	StartIndex *int `xml:"startIndex"`

	// Results
	//
	// The collection of line item creative associations contained within this
	// page.
	//

	Results []*LineItemCreativeAssociation `xml:"results"`
}

// LineItemCreativeAssociationStats
//
// Contains statistics such as impressions, clicks delivered and cost for {@link
// LineItemCreativeAssociation} objects.
//

type LineItemCreativeAssociationStats struct {

	// Stats
	//
	// A {@link Stats} object that holds delivered impressions and clicks statistics.
	//

	Stats *Stats `xml:"stats"`

	// CreativeSetStats
	//
	// A map containing {@link Stats} objects for each creative belonging to a creative set, {@code
	// null} for non creative set associations.
	//

	CreativeSetStats []*Long_StatsMapEntry `xml:"creativeSetStats"`

	// CostInOrderCurrency
	//
	// The revenue generated thus far by the creative from its association with the particular line
	// item in the publisher's currency.
	//

	CostInOrderCurrency *Money `xml:"costInOrderCurrency"`
}

// LineItemError
//
// A catch-all error that lists all generic errors associated with LineItem.
//

type LineItemError struct {
	Reason string `xml:"reason"`
}

// Long_StatsMapEntry
//
// This represents an entry in a map with a key of type Long
// and value of type Stats.
//

type Long_StatsMapEntry struct {

	// Key

	Key *int64 `xml:"key"`

	// Value

	Value *Stats `xml:"value"`
}

// Money
//
// Represents a money amount.
//

type Money struct {

	// CurrencyCode
	//
	// Three letter currency code in string format.
	//

	CurrencyCode *string `xml:"currencyCode"`

	// MicroAmount
	//
	// Money values are always specified in terms of micros which are a millionth
	// of the fundamental currency unit. For US dollars, $1 is 1,000,000 micros.
	//

	MicroAmount *int64 `xml:"microAmount"`
}

// NotNullError
//
// Caused by supplying a null value for an attribute that cannot be null.
//

type NotNullError struct {
	Reason string `xml:"reason"`
}

// NullError
//
// Errors associated with violation of a NOT NULL check.
//

type NullError struct {
	Reason string `xml:"reason"`
}

// NumberValue
//
// Contains a numeric value.
//

type NumberValue struct {

	// Value
	//
	// The numeric value represented as a string.
	//

	Value *string `xml:"value"`
}

// OrderError
//
// Lists all errors associated with orders.
//

type OrderError struct {
	Reason string `xml:"reason"`
}

// ParseError
//
// Lists errors related to parsing.
//

type ParseError struct {
	Reason string `xml:"reason"`
}

// PermissionError
//
// Errors related to incorrect permission.
//

type PermissionError struct {
	Reason string `xml:"reason"`
}

// PublisherQueryLanguageContextError
//
// An error that occurs while executing a PQL query contained in
// a {@link Statement} object.
//

type PublisherQueryLanguageContextError struct {
	Reason string `xml:"reason"`
}

// PublisherQueryLanguageSyntaxError
//
// An error that occurs while parsing a PQL query contained in a
// {@link Statement} object.
//

type PublisherQueryLanguageSyntaxError struct {
	Reason string `xml:"reason"`
}

// QuotaError
//
// Describes a client-side error on which a user is attempting
// to perform an action to which they have no quota remaining.
//

type QuotaError struct {
	Reason string `xml:"reason"`
}

// RangeError
//
// A list of all errors associated with the Range constraint.
//

type RangeError struct {
	Reason string `xml:"reason"`
}

// RequiredCollectionError
//
// A list of all errors to be used for validating sizes of collections.
//

type RequiredCollectionError struct {
	Reason string `xml:"reason"`
}

// RequiredError
//
// Errors due to missing required field.
//

type RequiredError struct {
	Reason string `xml:"reason"`
}

// RequiredNumberError
//
// A list of all errors to be used in conjunction with required number
// validators.
//

type RequiredNumberError struct {
	Reason string `xml:"reason"`
}

// RequiredSizeError
//
// A list of all errors to be used for validating {@link Size}.
//

type RequiredSizeError struct {
	Reason string `xml:"reason"`
}

// RichMediaStudioCreativeError
//
// Lists all errors associated with Studio creatives.
//

type RichMediaStudioCreativeError struct {
	Reason string `xml:"reason"`
}

// ServerError
//
// Errors related to the server.
//

type ServerError struct {
	Reason string `xml:"reason"`
}

// SetTopBoxCreativeError
//
// Errors associated with {@link SetTopBoxCreative set-top box creatives}.
//

type SetTopBoxCreativeError struct {
	Reason string `xml:"reason"`
}

// SetValue
//
// Contains a set of {@link Value Values}. May not contain duplicates.
//

type SetValue struct {

	// Value
	*Value

	// Values
	//
	// The values. They must all be the same type of {@code Value} and not contain duplicates.
	//

	Values []*Value `xml:"values"`
}

// Size
//
// Represents the dimensions of an {@link AdUnit}, {@link LineItem} or {@link Creative}.
//
// <p>For interstitial size (out-of-page), native, ignored and fluid size, {@link Size} must be 1x1.
//

type Size struct {

	// Width
	//
	// The width of the {@link AdUnit}, {@link LineItem} or {@link Creative}.
	//

	Width *int `xml:"width"`

	// Height
	//
	// The height of the {@link AdUnit}, {@link LineItem} or {@link Creative}.
	//

	Height *int `xml:"height"`

	// IsAspectRatio
	//
	// Whether this size represents an aspect ratio.
	//

	IsAspectRatio *bool `xml:"isAspectRatio"`
}

// SoapRequestHeader
//
// Represents the SOAP request header used by API requests.
//

type SoapRequestHeader struct {

	// NetworkCode
	//
	// The network code to use in the context of a request.
	//

	NetworkCode *string `xml:"networkCode"`

	// ApplicationName
	//
	// The name of client library application.
	//

	ApplicationName *string `xml:"applicationName"`
}

// SoapResponseHeader
//
// Represents the SOAP request header used by API responses.
//

type SoapResponseHeader struct {

	// RequestId

	RequestId *string `xml:"requestId"`

	// ResponseTime

	ResponseTime *int64 `xml:"responseTime"`
}

// Statement
//
// Captures the {@code WHERE}, {@code ORDER BY} and {@code LIMIT} clauses of a
// PQL query. Statements are typically used to retrieve objects of a predefined
// domain type, which makes SELECT clause unnecessary.
// <p>
// An example query text might be {@code "WHERE status = 'ACTIVE' ORDER BY id
// LIMIT 30"}.
// </p>
// <p>
// Statements support bind variables. These are substitutes for literals
// and can be thought of as input parameters to a PQL query.
// </p>
// <p>
// An example of such a query might be {@code "WHERE id = :idValue"}.
// </p>
// <p>
// Statements also support use of the LIKE keyword. This provides wildcard string matching.
// </p>
// <p>
// An example of such a query might be {@code "WHERE name LIKE '%searchString%'"}.
// </p>
// The value for the variable idValue must then be set with an object of type
// {@link Value}, e.g., {@link NumberValue}, {@link TextValue} or
// {@link BooleanValue}.
//

type Statement struct {

	// Query
	//
	// Holds the query in PQL syntax. The syntax is:<br>
	// <code>[WHERE <condition> {[AND | OR] <condition> ...}]</code><br>
	// <code>[ORDER BY <property> [ASC | DESC]]</code><br>
	// <code>[LIMIT {[<offset>,] <count>} | {<count> OFFSET <offset>}]</code><br>
	// <p>
	// <code><condition></code><br>
	// &nbsp;&nbsp;&nbsp;&nbsp;
	// <code>:= <property> {< | <= | > | >= | = | != } <value></code><br>
	// <code><condition></code><br>
	// &nbsp;&nbsp;&nbsp;&nbsp;
	// <code>:= <property> {< | <= | > | >= | = | != } <bind variable></code><br>
	// <code><condition> := <property> IN <list></code><br>
	// <code><condition> := <property> IS NULL</code><br>
	// <code><condition> := <property> LIKE <wildcard%match></code><br>
	// <code><bind variable> := :<name></code><br>
	// </p>
	//

	Query *string `xml:"query"`

	// Values
	//
	// Holds keys and values for bind variables and their values. The key is the
	// name of the bind variable. The value is the literal value of the variable.
	// <p>
	// In the example {@code "WHERE status = :bindStatus ORDER BY id LIMIT 30"},
	// the bind variable, represented by {@code :bindStatus} is named {@code
	// bindStatus}, which would also be the parameter map key. The bind variable's
	// value would be represented by a parameter map value of type
	// {@link TextValue}. The final result, for example, would be an entry of
	// {@code "bindStatus" => StringParam("ACTIVE")}.
	// </p>
	//

	Values []*String_ValueMapEntry `xml:"values"`
}

// StatementError
//
// An error that occurs while parsing {@link Statement} objects.
//

type StatementError struct {
	Reason string `xml:"reason"`
}

// Stats
//
// {@code Stats} contains trafficking statistics for {@link LineItem} and {@link
// LineItemCreativeAssociation} objects
//

type Stats struct {

	// ImpressionsDelivered
	//
	// The number of impressions delivered.
	//

	ImpressionsDelivered *int64 `xml:"impressionsDelivered"`

	// ClicksDelivered
	//
	// The number of clicks delivered.
	//

	ClicksDelivered *int64 `xml:"clicksDelivered"`

	// VideoCompletionsDelivered
	//
	// The number of video completions delivered.
	//

	VideoCompletionsDelivered *int64 `xml:"videoCompletionsDelivered"`

	// VideoStartsDelivered
	//
	// The number of video starts delivered.
	//

	VideoStartsDelivered *int64 `xml:"videoStartsDelivered"`

	// ViewableImpressionsDelivered
	//
	// The number of viewable impressions delivered.
	//

	ViewableImpressionsDelivered *int64 `xml:"viewableImpressionsDelivered"`
}

// StringFormatError
//
// A list of error code for reporting invalid content of input strings.
//

type StringFormatError struct {
	Reason string `xml:"reason"`
}

// StringLengthError
//
// Errors for Strings which do not meet given length constraints.
//

type StringLengthError struct {
	Reason string `xml:"reason"`
}

// String_ValueMapEntry
//
// This represents an entry in a map with a key of type String
// and value of type Value.
//

type String_ValueMapEntry struct {

	// Key

	Key *string `xml:"key"`

	// Value

	Value *Value `xml:"value"`
}

// SwiffyConversionError
//
// Error for converting flash to swiffy asset.
//

type SwiffyConversionError struct {
	Reason string `xml:"reason"`
}

// TemplateInstantiatedCreativeError
//
// Lists all errors associated with template instantiated creatives.
//

type TemplateInstantiatedCreativeError struct {
	Reason string `xml:"reason"`
}

// TextValue
//
// Contains a string value.
//

type TextValue struct {

	// Value
	//
	// The string value.
	//

	Value *string `xml:"value"`
}

// TranscodingError
//
// Errors associated with the video and audio transcoding flow.
//

type TranscodingError struct {
	Reason string `xml:"reason"`
}

// TypeError
//
// An error for a field which is an invalid type.
//

type TypeError struct {
	Reason string `xml:"reason"`
}

// UniqueError
//
// An error for a field which must satisfy a uniqueness constraint
//

type UniqueError struct {
	Reason string `xml:"reason"`
}

// UpdateResult
//
// Represents the result of performing an action on objects.
//

type UpdateResult struct {

	// NumChanges
	//
	// The number of objects that were changed as a result of performing the
	// action.
	//

	NumChanges *int `xml:"numChanges"`
}

// Value
//
// {@code Value} represents a value.
//

type Value struct {
}

// AdSenseAccountErrorReasonReason
const (

	// AdSenseAccountErrorReasonReasonAssociateAccountApiError
	//
	// An error occurred while trying to associate an AdSense account with Ad Manager. Unable to
	// create an association with AdSense or Ad Exchange account.
	//
	AdSenseAccountErrorReasonReasonAssociateAccountApiError = "ASSOCIATE_ACCOUNT_API_ERROR"

	// AdSenseAccountErrorReasonReasonGetAdSlotApiError
	//
	// An error occured while trying to get an associated web property's ad slots. Unable to
	// retrieve ad slot information from AdSense or Ad Exchange account.
	//
	AdSenseAccountErrorReasonReasonGetAdSlotApiError = "GET_AD_SLOT_API_ERROR"

	// AdSenseAccountErrorReasonReasonGetChannelApiError
	//
	// An error occurred while trying to get an associated web property's ad channels.
	//
	AdSenseAccountErrorReasonReasonGetChannelApiError = "GET_CHANNEL_API_ERROR"

	// AdSenseAccountErrorReasonReasonGetBulkAccountStatusesApiError
	//
	// An error occured while trying to retrieve account statues from AdSense API. Unable to
	// retrieve account status information. Please try again later.
	//
	AdSenseAccountErrorReasonReasonGetBulkAccountStatusesApiError = "GET_BULK_ACCOUNT_STATUSES_API_ERROR"

	// AdSenseAccountErrorReasonReasonResendVerificationEmailError
	//
	// An error occured while trying to resend the account association verification email. Error
	// resending verification email. Please try again.
	//
	AdSenseAccountErrorReasonReasonResendVerificationEmailError = "RESEND_VERIFICATION_EMAIL_ERROR"

	// AdSenseAccountErrorReasonReasonUnexpectedApiResponseError
	//
	// An error occured while trying to retrieve a response from the AdSense API. There was a
	// problem processing your request. Please try again later.
	//
	AdSenseAccountErrorReasonReasonUnexpectedApiResponseError = "UNEXPECTED_API_RESPONSE_ERROR"

	// AdSenseAccountErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	AdSenseAccountErrorReasonReasonUnknown = "UNKNOWN"
)

// ApiVersionErrorReasonReason
const (

	// ApiVersionErrorReasonReasonUpdateToNewerVersion
	//
	// Indicates that the operation is not allowed in the version the request
	// was made in.
	//
	ApiVersionErrorReasonReasonUpdateToNewerVersion = "UPDATE_TO_NEWER_VERSION"

	// ApiVersionErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ApiVersionErrorReasonReasonUnknown = "UNKNOWN"
)

// AssetErrorReasonReason
//
// The reasons for the target error.
const (

	// AssetErrorReasonReasonNonUniqueName
	//
	// An asset name must be unique across advertiser.
	//
	AssetErrorReasonReasonNonUniqueName = "NON_UNIQUE_NAME"

	// AssetErrorReasonReasonFileNameTooLong
	//
	// The file name is too long.
	//
	AssetErrorReasonReasonFileNameTooLong = "FILE_NAME_TOO_LONG"

	// AssetErrorReasonReasonFileSizeTooLarge
	//
	// The file size is too large.
	//
	AssetErrorReasonReasonFileSizeTooLarge = "FILE_SIZE_TOO_LARGE"

	// AssetErrorReasonReasonMissingRequiredDynamicAllocationClient
	//
	// Required client code is not present in the code snippet.
	//
	AssetErrorReasonReasonMissingRequiredDynamicAllocationClient = "MISSING_REQUIRED_DYNAMIC_ALLOCATION_CLIENT"

	// AssetErrorReasonReasonMissingRequiredDynamicAllocationHeight
	//
	// Required height is not present in the code snippet.
	//
	AssetErrorReasonReasonMissingRequiredDynamicAllocationHeight = "MISSING_REQUIRED_DYNAMIC_ALLOCATION_HEIGHT"

	// AssetErrorReasonReasonMissingRequiredDynamicAllocationWidth
	//
	// Required width is not present in the code snippet.
	//
	AssetErrorReasonReasonMissingRequiredDynamicAllocationWidth = "MISSING_REQUIRED_DYNAMIC_ALLOCATION_WIDTH"

	// AssetErrorReasonReasonMissingRequiredDynamicAllocationFormat
	//
	// Required format is not present in the mobile code snippet.
	//
	AssetErrorReasonReasonMissingRequiredDynamicAllocationFormat = "MISSING_REQUIRED_DYNAMIC_ALLOCATION_FORMAT"

	// AssetErrorReasonReasonInvalidCodeSnippetParameterValue
	//
	// The parameter value in the code snippet is invalid.
	//
	AssetErrorReasonReasonInvalidCodeSnippetParameterValue = "INVALID_CODE_SNIPPET_PARAMETER_VALUE"

	// AssetErrorReasonReasonInvalidAssetId
	//
	// Invalid asset Id.
	//
	AssetErrorReasonReasonInvalidAssetId = "INVALID_ASSET_ID"

	// AssetErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	AssetErrorReasonReasonUnknown = "UNKNOWN"
)

// AudienceExtensionErrorReasonReason
//
// Specific audience extension error reasons.
const (

	// AudienceExtensionErrorReasonReasonFrequencyCapsNotSupported
	//
	// Frequency caps are not supported by audience extension line items
	//
	AudienceExtensionErrorReasonReasonFrequencyCapsNotSupported = "FREQUENCY_CAPS_NOT_SUPPORTED"

	// AudienceExtensionErrorReasonReasonInvalidTargeting
	//
	// Audience extension line items can only target geography
	//
	AudienceExtensionErrorReasonReasonInvalidTargeting = "INVALID_TARGETING"

	// AudienceExtensionErrorReasonReasonInventoryUnitTargetingInvalid
	//
	// Audience extension line items can only target audience extension inventory units
	//
	AudienceExtensionErrorReasonReasonInventoryUnitTargetingInvalid = "INVENTORY_UNIT_TARGETING_INVALID"

	// AudienceExtensionErrorReasonReasonInvalidCreativeRotation
	//
	// Audience extension line items do not support {@link CreativeRotationType#SEQUENTIAL}.
	//
	AudienceExtensionErrorReasonReasonInvalidCreativeRotation = "INVALID_CREATIVE_ROTATION"

	// AudienceExtensionErrorReasonReasonInvalidExternalEntityId
	//
	// The given ID of the external entity is not valid
	//
	AudienceExtensionErrorReasonReasonInvalidExternalEntityId = "INVALID_EXTERNAL_ENTITY_ID"

	// AudienceExtensionErrorReasonReasonInvalidLineItemType
	//
	// Audience extension line items only support {@link LineItemType#STANDARD}.
	//
	AudienceExtensionErrorReasonReasonInvalidLineItemType = "INVALID_LINE_ITEM_TYPE"

	// AudienceExtensionErrorReasonReasonInvalidMaxBid
	//
	// Audience extension max bid is invalid when it is greater then the max budget.
	//
	AudienceExtensionErrorReasonReasonInvalidMaxBid = "INVALID_MAX_BID"

	// AudienceExtensionErrorReasonReasonAudienceExtensionBulkUpdateNotAllowed
	//
	// Bulk update for audience extension line items is not allowed.
	//
	AudienceExtensionErrorReasonReasonAudienceExtensionBulkUpdateNotAllowed = "AUDIENCE_EXTENSION_BULK_UPDATE_NOT_ALLOWED"

	// AudienceExtensionErrorReasonReasonUnexpectedAudienceExtensionError
	//
	// An unexpected error occurred.
	//
	AudienceExtensionErrorReasonReasonUnexpectedAudienceExtensionError = "UNEXPECTED_AUDIENCE_EXTENSION_ERROR"

	// AudienceExtensionErrorReasonReasonMaxDailyBudgetAmountExceeded
	//
	// The value entered for the maximum daily budget on an audience extension line item exceeds
	// the maximum allowed.
	//
	AudienceExtensionErrorReasonReasonMaxDailyBudgetAmountExceeded = "MAX_DAILY_BUDGET_AMOUNT_EXCEEDED"

	// AudienceExtensionErrorReasonReasonExternalCampaignAlreadyExists
	//
	// Creating a campaign for a line item that already has an associated campaign is not allowed.
	//
	AudienceExtensionErrorReasonReasonExternalCampaignAlreadyExists = "EXTERNAL_CAMPAIGN_ALREADY_EXISTS"

	// AudienceExtensionErrorReasonReasonAudienceExtensionWithoutFeature
	//
	// Audience extension was specified on a line item but the feature was not
	// enabled.
	//
	AudienceExtensionErrorReasonReasonAudienceExtensionWithoutFeature = "AUDIENCE_EXTENSION_WITHOUT_FEATURE"

	// AudienceExtensionErrorReasonReasonAudienceExtensionWithoutLinkedAccount
	//
	// Audience extension was specified on a line item but no audience extension account has
	// been linked.
	//
	AudienceExtensionErrorReasonReasonAudienceExtensionWithoutLinkedAccount = "AUDIENCE_EXTENSION_WITHOUT_LINKED_ACCOUNT"

	// AudienceExtensionErrorReasonReasonCannotOverrideCreativeSizeWithAudienceExtension
	//
	// Assocation creative size overrides are not allowed with audience extension.
	//
	AudienceExtensionErrorReasonReasonCannotOverrideCreativeSizeWithAudienceExtension = "CANNOT_OVERRIDE_CREATIVE_SIZE_WITH_AUDIENCE_EXTENSION"

	// AudienceExtensionErrorReasonReasonCannotOverrideFieldWithAudienceExtension
	//
	// Some association overrides are not allowed with audience extension.
	//
	AudienceExtensionErrorReasonReasonCannotOverrideFieldWithAudienceExtension = "CANNOT_OVERRIDE_FIELD_WITH_AUDIENCE_EXTENSION"

	// AudienceExtensionErrorReasonReasonOnlyOneCreativePlaceholderAllowed
	//
	// Only one creative placeholder is allowed for an audience extension line item.
	//
	AudienceExtensionErrorReasonReasonOnlyOneCreativePlaceholderAllowed = "ONLY_ONE_CREATIVE_PLACEHOLDER_ALLOWED"

	// AudienceExtensionErrorReasonReasonMultipleAudienceExtensionLineItemsOnOrder
	//
	// Only one audience extension line item can be associated with a given order.
	//
	AudienceExtensionErrorReasonReasonMultipleAudienceExtensionLineItemsOnOrder = "MULTIPLE_AUDIENCE_EXTENSION_LINE_ITEMS_ON_ORDER"

	// AudienceExtensionErrorReasonReasonCannotCopyAudienceExtensionLineItemsAndCreativesTogether
	//
	// Audience extension line items must be copied separately from their associated creatives.
	//
	AudienceExtensionErrorReasonReasonCannotCopyAudienceExtensionLineItemsAndCreativesTogether = "CANNOT_COPY_AUDIENCE_EXTENSION_LINE_ITEMS_AND_CREATIVES_TOGETHER"

	// AudienceExtensionErrorReasonReasonFeatureDeprecated
	//
	// Audience extension is no longer supported and cannot be used.
	//
	AudienceExtensionErrorReasonReasonFeatureDeprecated = "FEATURE_DEPRECATED"

	// AudienceExtensionErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	AudienceExtensionErrorReasonReasonUnknown = "UNKNOWN"
)

// AuthenticationErrorReasonReason
const (

	// AuthenticationErrorReasonReasonAmbiguousSoapRequestHeader
	//
	// The SOAP message contains a request header with an ambiguous definition of the authentication
	// header fields. This means either the {@code authToken} and {@code oAuthToken} fields were
	// both null or both were specified. Exactly one value should be specified with each request.
	//
	AuthenticationErrorReasonReasonAmbiguousSoapRequestHeader = "AMBIGUOUS_SOAP_REQUEST_HEADER"

	// AuthenticationErrorReasonReasonInvalidEmail
	//
	// The login provided is invalid.
	//
	AuthenticationErrorReasonReasonInvalidEmail = "INVALID_EMAIL"

	// AuthenticationErrorReasonReasonAuthenticationFailed
	//
	// Tried to authenticate with provided information, but failed.
	//
	AuthenticationErrorReasonReasonAuthenticationFailed = "AUTHENTICATION_FAILED"

	// AuthenticationErrorReasonReasonInvalidOauthSignature
	//
	// The OAuth provided is invalid.
	//
	AuthenticationErrorReasonReasonInvalidOauthSignature = "INVALID_OAUTH_SIGNATURE"

	// AuthenticationErrorReasonReasonInvalidService
	//
	// The specified service to use was not recognized.
	//
	AuthenticationErrorReasonReasonInvalidService = "INVALID_SERVICE"

	// AuthenticationErrorReasonReasonMissingSoapRequestHeader
	//
	// The SOAP message is missing a request header with an {@code authToken} and optional {@code
	// networkCode}.
	//
	AuthenticationErrorReasonReasonMissingSoapRequestHeader = "MISSING_SOAP_REQUEST_HEADER"

	// AuthenticationErrorReasonReasonMissingAuthenticationHttpHeader
	//
	// The HTTP request is missing a request header with an {@code authToken}
	//
	AuthenticationErrorReasonReasonMissingAuthenticationHttpHeader = "MISSING_AUTHENTICATION_HTTP_HEADER"

	// AuthenticationErrorReasonReasonMissingAuthentication
	//
	// The request is missing an {@code authToken}
	//
	AuthenticationErrorReasonReasonMissingAuthentication = "MISSING_AUTHENTICATION"

	// AuthenticationErrorReasonReasonNetworkApiAccessDisabled
	//
	// The network does not have API access enabled.
	//
	AuthenticationErrorReasonReasonNetworkApiAccessDisabled = "NETWORK_API_ACCESS_DISABLED"

	// AuthenticationErrorReasonReasonNoNetworksToAccess
	//
	// The user is not associated with any network.
	//
	AuthenticationErrorReasonReasonNoNetworksToAccess = "NO_NETWORKS_TO_ACCESS"

	// AuthenticationErrorReasonReasonNetworkNotFound
	//
	// No network for the given {@code networkCode} was found.
	//
	AuthenticationErrorReasonReasonNetworkNotFound = "NETWORK_NOT_FOUND"

	// AuthenticationErrorReasonReasonNetworkCodeRequired
	//
	// The user has access to more than one network, but did not provide a {@code networkCode}.
	//
	AuthenticationErrorReasonReasonNetworkCodeRequired = "NETWORK_CODE_REQUIRED"

	// AuthenticationErrorReasonReasonConnectionError
	//
	// An error happened on the server side during connection to authentication service.
	//
	AuthenticationErrorReasonReasonConnectionError = "CONNECTION_ERROR"

	// AuthenticationErrorReasonReasonGoogleAccountAlreadyAssociatedWithNetwork
	//
	// The user tried to create a test network using an account that already is associated with a
	// network.
	//
	AuthenticationErrorReasonReasonGoogleAccountAlreadyAssociatedWithNetwork = "GOOGLE_ACCOUNT_ALREADY_ASSOCIATED_WITH_NETWORK"

	// AuthenticationErrorReasonReasonUnderInvestigation
	//
	// The account is blocked and under investigation by the collections team. Please contact Google
	// for more information.
	//
	AuthenticationErrorReasonReasonUnderInvestigation = "UNDER_INVESTIGATION"

	// AuthenticationErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	AuthenticationErrorReasonReasonUnknown = "UNKNOWN"
)

// CollectionSizeErrorReasonReason
const (

	// CollectionSizeErrorReasonReasonTooLarge
	CollectionSizeErrorReasonReasonTooLarge = "TOO_LARGE"

	// CollectionSizeErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CollectionSizeErrorReasonReasonUnknown = "UNKNOWN"
)

// CommonErrorReasonReason
//
// Describes reasons for common errors
const (

	// CommonErrorReasonReasonNotFound
	//
	// Indicates that an attempt was made to retrieve an entity that does not
	// exist.
	//
	CommonErrorReasonReasonNotFound = "NOT_FOUND"

	// CommonErrorReasonReasonAlreadyExists
	//
	// Indicates that an attempt was made to create an entity that already
	// exists.
	//
	CommonErrorReasonReasonAlreadyExists = "ALREADY_EXISTS"

	// CommonErrorReasonReasonNotApplicable
	//
	// Indicates that a value is not applicable for given use case.
	//
	CommonErrorReasonReasonNotApplicable = "NOT_APPLICABLE"

	// CommonErrorReasonReasonDuplicateObject
	//
	// Indicates that two elements in the collection were identical.
	//
	CommonErrorReasonReasonDuplicateObject = "DUPLICATE_OBJECT"

	// CommonErrorReasonReasonCannotUpdate
	//
	// Indicates that an attempt was made to change an immutable field.
	//
	CommonErrorReasonReasonCannotUpdate = "CANNOT_UPDATE"

	// CommonErrorReasonReasonUnsupportedOperation
	//
	// Indicates that the requested operation is not supported.
	//
	CommonErrorReasonReasonUnsupportedOperation = "UNSUPPORTED_OPERATION"

	// CommonErrorReasonReasonConcurrentModification
	//
	// Indicates that another request attempted to update the same data in the same network
	// at about the same time. Please wait and try the request again.
	//
	CommonErrorReasonReasonConcurrentModification = "CONCURRENT_MODIFICATION"

	// CommonErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CommonErrorReasonReasonUnknown = "UNKNOWN"
)

// CreativeAssetMacroErrorReasonReason
//
// The reasons for the target error.
const (

	// CreativeAssetMacroErrorReasonReasonInvalidMacroName
	//
	// Invalid macro name specified. Macro names must start with an alpha
	// character and consist only of alpha-numeric characters and underscores
	// and be between 1 and 64 characters.
	//
	CreativeAssetMacroErrorReasonReasonInvalidMacroName = "INVALID_MACRO_NAME"

	// CreativeAssetMacroErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativeAssetMacroErrorReasonReasonUnknown = "UNKNOWN"
)

// CreativeErrorReasonReason
//
// The reasons for the target error.
const (

	// CreativeErrorReasonReasonFlashAndFallbackUrlAreSame
	//
	// {@link FlashRedirectCreative#flashUrl} and
	// {@link FlashRedirectCreative#fallbackUrl} are the same. The fallback URL
	// is used when the flash URL does not work and must be different from it.
	//
	CreativeErrorReasonReasonFlashAndFallbackUrlAreSame = "FLASH_AND_FALLBACK_URL_ARE_SAME"

	// CreativeErrorReasonReasonInvalidInternalRedirectUrl
	//
	// The internal redirect URL was invalid. The URL must have the following
	// syntax http://ad.doubleclick.net/ad/sitename/;sz=size.
	//
	CreativeErrorReasonReasonInvalidInternalRedirectUrl = "INVALID_INTERNAL_REDIRECT_URL"

	// CreativeErrorReasonReasonDestinationUrlRequired
	//
	// {@link HasDestinationUrlCreative#destinationUrl} is required.
	//
	CreativeErrorReasonReasonDestinationUrlRequired = "DESTINATION_URL_REQUIRED"

	// CreativeErrorReasonReasonDestinationUrlNotEmpty
	//
	// {@link HasDestinationUrlCreative#destinationUrl} must be empty when its type is
	// {@link DestinationUrlType#NONE}.
	//
	CreativeErrorReasonReasonDestinationUrlNotEmpty = "DESTINATION_URL_NOT_EMPTY"

	// CreativeErrorReasonReasonDestinationUrlTypeNotSupported
	//
	// The provided {@link DestinationUrlType} is not supported for the creative type it is
	// being used on.
	//
	CreativeErrorReasonReasonDestinationUrlTypeNotSupported = "DESTINATION_URL_TYPE_NOT_SUPPORTED"

	// CreativeErrorReasonReasonCannotCreateOrUpdateLegacyDfpCreative
	//
	// Cannot create or update legacy DART For Publishers creative.
	//
	CreativeErrorReasonReasonCannotCreateOrUpdateLegacyDfpCreative = "CANNOT_CREATE_OR_UPDATE_LEGACY_DFP_CREATIVE"

	// CreativeErrorReasonReasonCannotCreateOrUpdateLegacyDfpMobileCreative
	//
	// Cannot create or update legacy mobile creative.
	//
	CreativeErrorReasonReasonCannotCreateOrUpdateLegacyDfpMobileCreative = "CANNOT_CREATE_OR_UPDATE_LEGACY_DFP_MOBILE_CREATIVE"

	// CreativeErrorReasonReasonMissingFeature
	//
	// The user is missing a necessary feature.
	//
	CreativeErrorReasonReasonMissingFeature = "MISSING_FEATURE"

	// CreativeErrorReasonReasonInvalidCompanyType
	//
	// Company type should be one of Advertisers, House Advertisers and
	// Ad Networks.
	//
	CreativeErrorReasonReasonInvalidCompanyType = "INVALID_COMPANY_TYPE"

	// CreativeErrorReasonReasonInvalidAdsenseCreativeSize
	//
	// Invalid size for AdSense dynamic allocation creative.
	// Only valid AFC sizes are allowed.
	//
	CreativeErrorReasonReasonInvalidAdsenseCreativeSize = "INVALID_ADSENSE_CREATIVE_SIZE"

	// CreativeErrorReasonReasonInvalidAdExchangeCreativeSize
	//
	// Invalid size for Ad Exchange dynamic allocation creative.
	// Only valid Ad Exchange sizes are allowed.
	//
	CreativeErrorReasonReasonInvalidAdExchangeCreativeSize = "INVALID_AD_EXCHANGE_CREATIVE_SIZE"

	// CreativeErrorReasonReasonDuplicateAssetInCreative
	//
	// Assets associated with the same creative must be unique.
	//
	CreativeErrorReasonReasonDuplicateAssetInCreative = "DUPLICATE_ASSET_IN_CREATIVE"

	// CreativeErrorReasonReasonCreativeAssetCannotHaveIdAndByteArray
	//
	// A creative asset cannot contain an asset ID and a byte array.
	//
	CreativeErrorReasonReasonCreativeAssetCannotHaveIdAndByteArray = "CREATIVE_ASSET_CANNOT_HAVE_ID_AND_BYTE_ARRAY"

	// CreativeErrorReasonReasonCannotCreateOrUpdateUnsupportedCreative
	//
	// Cannot create or update unsupported creative.
	//
	CreativeErrorReasonReasonCannotCreateOrUpdateUnsupportedCreative = "CANNOT_CREATE_OR_UPDATE_UNSUPPORTED_CREATIVE"

	// CreativeErrorReasonReasonCannotCreateProgrammaticCreatives
	//
	// Cannot create programmatic creatives.
	//
	CreativeErrorReasonReasonCannotCreateProgrammaticCreatives = "CANNOT_CREATE_PROGRAMMATIC_CREATIVES"

	// CreativeErrorReasonReasonInvalidSizeForThirdPartyImpressionTracker
	//
	// A creative must have valid size to use the third-party impression tracker.
	//
	CreativeErrorReasonReasonInvalidSizeForThirdPartyImpressionTracker = "INVALID_SIZE_FOR_THIRD_PARTY_IMPRESSION_TRACKER"

	// CreativeErrorReasonReasonCannotDeactivateCreativesInCreativeSets
	//
	// Ineligible creatives can not be deactivated.
	//
	CreativeErrorReasonReasonCannotDeactivateCreativesInCreativeSets = "CANNOT_DEACTIVATE_CREATIVES_IN_CREATIVE_SETS"

	// CreativeErrorReasonReasonHostedVideoCreativeRequiresVideoAsset
	//
	// Ad Manager hosted video creatives must contain a video asset.
	//
	CreativeErrorReasonReasonHostedVideoCreativeRequiresVideoAsset = "HOSTED_VIDEO_CREATIVE_REQUIRES_VIDEO_ASSET"

	// CreativeErrorReasonReasonCannotSetMultipleImpressionTrackingUrls
	//
	// {@link ImageCreative#thirdPartyImpressionTrackingUrls} should not contain more than one url.
	//
	CreativeErrorReasonReasonCannotSetMultipleImpressionTrackingUrls = "CANNOT_SET_MULTIPLE_IMPRESSION_TRACKING_URLS"

	// CreativeErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativeErrorReasonReasonUnknown = "UNKNOWN"
)

// CreativePreviewErrorReasonReason
const (

	// CreativePreviewErrorReasonReasonCannotGeneratePreviewUrl
	//
	// The creative cannot be previewed on this page.
	//
	CreativePreviewErrorReasonReasonCannotGeneratePreviewUrl = "CANNOT_GENERATE_PREVIEW_URL"

	// CreativePreviewErrorReasonReasonCannotGeneratePreviewUrlForNativeCreatives
	//
	// Preview URLs for native creatives must be retrieved with {@link
	// LineItemCreativeAssociationService#getPreviewUrlsForNativeStyles}.
	//
	CreativePreviewErrorReasonReasonCannotGeneratePreviewUrlForNativeCreatives = "CANNOT_GENERATE_PREVIEW_URL_FOR_NATIVE_CREATIVES"

	// CreativePreviewErrorReasonReasonHtmlSnippetRequiredForThirdPartyCreative
	//
	// Third party creatives must have an html snippet set in order to obtain a preview URL.
	//
	CreativePreviewErrorReasonReasonHtmlSnippetRequiredForThirdPartyCreative = "HTML_SNIPPET_REQUIRED_FOR_THIRD_PARTY_CREATIVE"

	// CreativePreviewErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativePreviewErrorReasonReasonUnknown = "UNKNOWN"
)

// CreativeSetErrorReasonReason
//
// The reasons for the target error.
const (

	// CreativeSetErrorReasonReasonVideoFeatureRequired
	//
	// The 'video' feature is required but not enabled.
	//
	CreativeSetErrorReasonReasonVideoFeatureRequired = "VIDEO_FEATURE_REQUIRED"

	// CreativeSetErrorReasonReasonCannotCreateOrUpdateVideoCreatives
	//
	// Video creatives (including overlays, VAST redirects, etc..) cannot be created
	// or updated through the API.
	//
	CreativeSetErrorReasonReasonCannotCreateOrUpdateVideoCreatives = "CANNOT_CREATE_OR_UPDATE_VIDEO_CREATIVES"

	// CreativeSetErrorReasonReasonRoadblockFeatureRequired
	//
	// The 'roadblock' feature is required but not enabled.
	//
	CreativeSetErrorReasonReasonRoadblockFeatureRequired = "ROADBLOCK_FEATURE_REQUIRED"

	// CreativeSetErrorReasonReasonMasterCreativeCannotBeCompanion
	//
	// A master creative cannot be a companion creative in the same creative set.
	//
	CreativeSetErrorReasonReasonMasterCreativeCannotBeCompanion = "MASTER_CREATIVE_CANNOT_BE_COMPANION"

	// CreativeSetErrorReasonReasonInvalidAdvertiser
	//
	// Creatives in a creative set must be for the same advertiser.
	//
	CreativeSetErrorReasonReasonInvalidAdvertiser = "INVALID_ADVERTISER"

	// CreativeSetErrorReasonReasonUpdateMasterCreativeNotAllowed
	//
	// Updating a master creative in a creative set is not allowed.
	//
	CreativeSetErrorReasonReasonUpdateMasterCreativeNotAllowed = "UPDATE_MASTER_CREATIVE_NOT_ALLOWED"

	// CreativeSetErrorReasonReasonMasterCreativeCannotBelongToMultipleVideoCreativeSets
	//
	// A master creative must belong to only one video creative set.
	//
	CreativeSetErrorReasonReasonMasterCreativeCannotBelongToMultipleVideoCreativeSets = "MASTER_CREATIVE_CANNOT_BELONG_TO_MULTIPLE_VIDEO_CREATIVE_SETS"

	// CreativeSetErrorReasonReasonSkippableAdTypeNotAllowed
	//
	// The {@Code SkippableAdType} is not allowed.
	//
	CreativeSetErrorReasonReasonSkippableAdTypeNotAllowed = "SKIPPABLE_AD_TYPE_NOT_ALLOWED"

	// CreativeSetErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativeSetErrorReasonReasonUnknown = "UNKNOWN"
)

// CreativeTemplateErrorReasonReason
//
// The reasons for the target error.
const (

	// CreativeTemplateErrorReasonReasonCannotParseCreativeTemplate
	//
	// The XML of the creative template definition is malformed and cannot be parsed.
	//
	CreativeTemplateErrorReasonReasonCannotParseCreativeTemplate = "CANNOT_PARSE_CREATIVE_TEMPLATE"

	// CreativeTemplateErrorReasonReasonVariableDuplicateUniqueName
	//
	// A creative template has multiple variables with the same uniqueName.
	//
	CreativeTemplateErrorReasonReasonVariableDuplicateUniqueName = "VARIABLE_DUPLICATE_UNIQUE_NAME"

	// CreativeTemplateErrorReasonReasonVariableInvalidUniqueName
	//
	// The creative template contains a variable with invalid characters. Valid
	// characters are letters, numbers, spaces, forward slashes, dashes,
	// and underscores.
	//
	CreativeTemplateErrorReasonReasonVariableInvalidUniqueName = "VARIABLE_INVALID_UNIQUE_NAME"

	// CreativeTemplateErrorReasonReasonListChoiceDuplicateValue
	//
	// Multiple choices for a CreativeTemplateListStringVariable have the same value.
	//
	CreativeTemplateErrorReasonReasonListChoiceDuplicateValue = "LIST_CHOICE_DUPLICATE_VALUE"

	// CreativeTemplateErrorReasonReasonListChoiceNeedsDefault
	//
	// The choices for a CreativeTemplateListStringVariable do not contain the
	// default value.
	//
	CreativeTemplateErrorReasonReasonListChoiceNeedsDefault = "LIST_CHOICE_NEEDS_DEFAULT"

	// CreativeTemplateErrorReasonReasonListChoicesEmpty
	//
	// There are no choices specified for the list variable.
	//
	CreativeTemplateErrorReasonReasonListChoicesEmpty = "LIST_CHOICES_EMPTY"

	// CreativeTemplateErrorReasonReasonNoTargetPlatforms
	//
	// No target platform is assigned to a creative template.
	//
	CreativeTemplateErrorReasonReasonNoTargetPlatforms = "NO_TARGET_PLATFORMS"

	// CreativeTemplateErrorReasonReasonMultipleTargetPlatforms
	//
	// More than one target platform is assigned to a single creative template.
	//
	CreativeTemplateErrorReasonReasonMultipleTargetPlatforms = "MULTIPLE_TARGET_PLATFORMS"

	// CreativeTemplateErrorReasonReasonUnrecognizedPlaceholder
	//
	// The formatter contains a placeholder which is not defined as a variable.
	//
	CreativeTemplateErrorReasonReasonUnrecognizedPlaceholder = "UNRECOGNIZED_PLACEHOLDER"

	// CreativeTemplateErrorReasonReasonPlaceholdersNotInFormatter
	//
	// There are variables defined which are not being used in the formatter.
	//
	CreativeTemplateErrorReasonReasonPlaceholdersNotInFormatter = "PLACEHOLDERS_NOT_IN_FORMATTER"

	// CreativeTemplateErrorReasonReasonMissingInterstitialMacro
	//
	// The creative template is interstitial, but the formatter doesn't contain
	// an interstitial macro.
	//
	CreativeTemplateErrorReasonReasonMissingInterstitialMacro = "MISSING_INTERSTITIAL_MACRO"

	// CreativeTemplateErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativeTemplateErrorReasonReasonUnknown = "UNKNOWN"
)

// CreativeTemplateOperationErrorReasonReason
//
// The reasons for the target error.
const (

	// CreativeTemplateOperationErrorReasonReasonNotAllowed
	//
	// The current user is not allowed to modify this creative template.
	//
	CreativeTemplateOperationErrorReasonReasonNotAllowed = "NOT_ALLOWED"

	// CreativeTemplateOperationErrorReasonReasonNotApplicable
	//
	// The operation is not applicable to the current state.
	// (e.g. Trying to activate an active creative template)
	//
	CreativeTemplateOperationErrorReasonReasonNotApplicable = "NOT_APPLICABLE"

	// CreativeTemplateOperationErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativeTemplateOperationErrorReasonReasonUnknown = "UNKNOWN"
)

// CrossSellErrorReasonReason
//
// The reason of the error.
const (

	// CrossSellErrorReasonReasonCompanyIsNotDistributionPartner
	//
	// A company for cross-sell partner must be of type {@link Company.Type#PARTNER}.
	//
	CrossSellErrorReasonReasonCompanyIsNotDistributionPartner = "COMPANY_IS_NOT_DISTRIBUTION_PARTNER"

	// CrossSellErrorReasonReasonChangingPartnerNetworkIsNotSupported
	//
	// The network code of a cross-sell partner cannot be changed.
	//
	CrossSellErrorReasonReasonChangingPartnerNetworkIsNotSupported = "CHANGING_PARTNER_NETWORK_IS_NOT_SUPPORTED"

	// CrossSellErrorReasonReasonMissingDistributorPartnerName
	//
	// A cross-sell partner must have a partner name.
	//
	CrossSellErrorReasonReasonMissingDistributorPartnerName = "MISSING_DISTRIBUTOR_PARTNER_NAME"

	// CrossSellErrorReasonReasonDistributorNetworkMissingPublisherFeature
	//
	// The cross-sell distributor publisher feature must be enabled.
	//
	CrossSellErrorReasonReasonDistributorNetworkMissingPublisherFeature = "DISTRIBUTOR_NETWORK_MISSING_PUBLISHER_FEATURE"

	// CrossSellErrorReasonReasonContentProviderNetworkMissingPublisherFeature
	//
	// The cross-sell publisher features must be enabled on the partner's network.
	//
	CrossSellErrorReasonReasonContentProviderNetworkMissingPublisherFeature = "CONTENT_PROVIDER_NETWORK_MISSING_PUBLISHER_FEATURE"

	// CrossSellErrorReasonReasonInvalidDistributorPartnerName
	//
	// The cross-sell partner name conflicts with an ad unit name on the partner's network.
	//
	CrossSellErrorReasonReasonInvalidDistributorPartnerName = "INVALID_DISTRIBUTOR_PARTNER_NAME"

	// CrossSellErrorReasonReasonInvalidContentProviderNetwork
	//
	// The network code of a cross-sell partner is invalid.
	//
	CrossSellErrorReasonReasonInvalidContentProviderNetwork = "INVALID_CONTENT_PROVIDER_NETWORK"

	// CrossSellErrorReasonReasonContentProviderNetworkCannotBeActiveNetwork
	//
	// The content provider network must be different than the distributor network.
	//
	CrossSellErrorReasonReasonContentProviderNetworkCannotBeActiveNetwork = "CONTENT_PROVIDER_NETWORK_CANNOT_BE_ACTIVE_NETWORK"

	// CrossSellErrorReasonReasonContentProviderNetworkAlreadyEnabledForCrossSelling
	//
	// The same network code was already enabled for cross-sell in a different company.
	//
	CrossSellErrorReasonReasonContentProviderNetworkAlreadyEnabledForCrossSelling = "CONTENT_PROVIDER_NETWORK_ALREADY_ENABLED_FOR_CROSS_SELLING"

	// CrossSellErrorReasonReasonDistributorRuleViolationError
	//
	// A rule defined by the cross selling distributor has been violated by a line item targeting
	// a shared ad unit. Violating this rule is an error.
	//
	CrossSellErrorReasonReasonDistributorRuleViolationError = "DISTRIBUTOR_RULE_VIOLATION_ERROR"

	// CrossSellErrorReasonReasonDistributorRuleViolationWarning
	//
	// A rule defined by the cross selling distributor has been violated by a line item targeting
	// a shared ad unit. Violating this rule is a warning.
	//
	// <p>By setting {@link LineItem#skipCrossSellingRuleWarningChecks}, the content partner can
	// suppress the warning (and create or save the line item).
	//
	// <p>This flag is available beginning in V201411.
	//
	CrossSellErrorReasonReasonDistributorRuleViolationWarning = "DISTRIBUTOR_RULE_VIOLATION_WARNING"

	// CrossSellErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CrossSellErrorReasonReasonUnknown = "UNKNOWN"
)

// CustomCreativeErrorReasonReason
//
// The reasons for the target error.
const (

	// CustomCreativeErrorReasonReasonDuplicateMacroNameForCreative
	//
	// Macros associated with a single custom creative must have unique names.
	//
	CustomCreativeErrorReasonReasonDuplicateMacroNameForCreative = "DUPLICATE_MACRO_NAME_FOR_CREATIVE"

	// CustomCreativeErrorReasonReasonSnippetReferencesMissingMacro
	//
	// The file macro referenced in the snippet does not exist.
	//
	CustomCreativeErrorReasonReasonSnippetReferencesMissingMacro = "SNIPPET_REFERENCES_MISSING_MACRO"

	// CustomCreativeErrorReasonReasonUnrecognizedMacro
	//
	// The macro referenced in the snippet is not valid.
	//
	CustomCreativeErrorReasonReasonUnrecognizedMacro = "UNRECOGNIZED_MACRO"

	// CustomCreativeErrorReasonReasonCustomCreativeNotAllowed
	//
	// Custom creatives are not allowed in this context.
	//
	CustomCreativeErrorReasonReasonCustomCreativeNotAllowed = "CUSTOM_CREATIVE_NOT_ALLOWED"

	// CustomCreativeErrorReasonReasonMissingInterstitialMacro
	//
	// The custom creative is an interstitial, but the snippet is missing an
	// interstitial macro.
	//
	CustomCreativeErrorReasonReasonMissingInterstitialMacro = "MISSING_INTERSTITIAL_MACRO"

	// CustomCreativeErrorReasonReasonDuplicateAssetInMacros
	//
	// Macros associated with the same custom creative cannot share the same
	// asset.
	//
	CustomCreativeErrorReasonReasonDuplicateAssetInMacros = "DUPLICATE_ASSET_IN_MACROS"

	// CustomCreativeErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CustomCreativeErrorReasonReasonUnknown = "UNKNOWN"
)

// CustomFieldValueErrorReasonReason
//
// The reasons for the target error.
const (

	// CustomFieldValueErrorReasonReasonCustomFieldNotFound
	//
	// An attempt was made to modify or create a {@link CustomFieldValue} for
	// a {@link CustomField} that does not exist.
	//
	CustomFieldValueErrorReasonReasonCustomFieldNotFound = "CUSTOM_FIELD_NOT_FOUND"

	// CustomFieldValueErrorReasonReasonCustomFieldInactive
	//
	// An attempt was made to create a new value for a custom field
	// that is inactive.
	//
	CustomFieldValueErrorReasonReasonCustomFieldInactive = "CUSTOM_FIELD_INACTIVE"

	// CustomFieldValueErrorReasonReasonCustomFieldOptionNotFound
	//
	// An attempt was made to modify or create a {@link CustomFieldValue} corresponding
	// to a {@link CustomFieldOption} that could not be found.
	//
	CustomFieldValueErrorReasonReasonCustomFieldOptionNotFound = "CUSTOM_FIELD_OPTION_NOT_FOUND"

	// CustomFieldValueErrorReasonReasonInvalidEntityType
	//
	// An attempt was made to modify or create a {@link CustomFieldValue} with an
	// association to an entity of the wrong type for its field.
	//
	CustomFieldValueErrorReasonReasonInvalidEntityType = "INVALID_ENTITY_TYPE"

	// CustomFieldValueErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CustomFieldValueErrorReasonReasonUnknown = "UNKNOWN"
)

// EntityChildrenLimitReachedErrorReasonReason
//
// The reasons for the entity children limit reached error.
const (

	// EntityChildrenLimitReachedErrorReasonReasonLineItemLimitForOrderReached
	//
	// The number of line items on the order exceeds the max number of line items allowed per order
	// in the network.
	//
	EntityChildrenLimitReachedErrorReasonReasonLineItemLimitForOrderReached = "LINE_ITEM_LIMIT_FOR_ORDER_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonCreativeAssociationLimitForLineItemReached
	//
	// The number of creatives associated with the line item exceeds the max number of creatives
	// allowed to be associated with a line item in the network.
	//
	EntityChildrenLimitReachedErrorReasonReasonCreativeAssociationLimitForLineItemReached = "CREATIVE_ASSOCIATION_LIMIT_FOR_LINE_ITEM_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonAdUnitLimitForPlacementReached
	//
	// The number of ad units on the placement exceeds the max number of ad units
	// allowed per placement in the network.
	//
	EntityChildrenLimitReachedErrorReasonReasonAdUnitLimitForPlacementReached = "AD_UNIT_LIMIT_FOR_PLACEMENT_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonTargetingExpressionLimitForLineItemReached
	//
	// The number of targeting expressions on the line item exceeds the max number of targeting
	// expressions allowed per line item in the network.
	//
	EntityChildrenLimitReachedErrorReasonReasonTargetingExpressionLimitForLineItemReached = "TARGETING_EXPRESSION_LIMIT_FOR_LINE_ITEM_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonTargetingExpressionSizeLimitReached
	//
	// The size of a single targeting expression tree exceeds the max size allowed by the network.
	//
	EntityChildrenLimitReachedErrorReasonReasonTargetingExpressionSizeLimitReached = "TARGETING_EXPRESSION_SIZE_LIMIT_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonCustomTargetingValuesForKeyLimitReached
	//
	// The number of custom targeting values for the free-form or predefined custom targeting key
	// exceeds the max number allowed.
	//
	EntityChildrenLimitReachedErrorReasonReasonCustomTargetingValuesForKeyLimitReached = "CUSTOM_TARGETING_VALUES_FOR_KEY_LIMIT_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonTargetingExpressionLimitForCreativesOnLineItemReached
	//
	// The total number of targeting expressions on the creatives for the line item exceeds
	// the max number allowed per line item in the network.
	//
	EntityChildrenLimitReachedErrorReasonReasonTargetingExpressionLimitForCreativesOnLineItemReached = "TARGETING_EXPRESSION_LIMIT_FOR_CREATIVES_ON_LINE_ITEM_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonAttachmentLimitForProposalReached
	//
	// The number of attachments added to the proposal exceeds the max number
	// allowed per proposal in the network.
	//
	EntityChildrenLimitReachedErrorReasonReasonAttachmentLimitForProposalReached = "ATTACHMENT_LIMIT_FOR_PROPOSAL_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonProposalLineItemLimitForProposalReached
	//
	// The number of proposal line items on the proposal exceeds the max number
	// allowed per proposal in the network.
	//
	EntityChildrenLimitReachedErrorReasonReasonProposalLineItemLimitForProposalReached = "PROPOSAL_LINE_ITEM_LIMIT_FOR_PROPOSAL_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonProductLimitForProductPackageReached
	//
	// The number of product package items on the product package exceeds the max number
	// allowed per product package in the network.
	//
	EntityChildrenLimitReachedErrorReasonReasonProductLimitForProductPackageReached = "PRODUCT_LIMIT_FOR_PRODUCT_PACKAGE_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonProductTemplateAndProductBaseRateLimitForRateCardReached
	//
	// The number of product template and product base rates on the rate card (including excluded
	// product base rates) exceeds the max number allowed per rate card in the network.
	//
	EntityChildrenLimitReachedErrorReasonReasonProductTemplateAndProductBaseRateLimitForRateCardReached = "PRODUCT_TEMPLATE_AND_PRODUCT_BASE_RATE_LIMIT_FOR_RATE_CARD_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonProductPackageItemBaseRateLimitForRateCardReached
	//
	// The number of product package item base rates on the rate card exceeds the max number
	// allowed per rate card in the network.
	//
	EntityChildrenLimitReachedErrorReasonReasonProductPackageItemBaseRateLimitForRateCardReached = "PRODUCT_PACKAGE_ITEM_BASE_RATE_LIMIT_FOR_RATE_CARD_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonPremiumLimitForRateCardReached
	//
	// The number of premiums of the rate card exceeds the max number allowed per rate card
	// in the network.
	//
	EntityChildrenLimitReachedErrorReasonReasonPremiumLimitForRateCardReached = "PREMIUM_LIMIT_FOR_RATE_CARD_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonAdUnitLimitForAdExclusionRuleTargetingReached
	//
	// The number of ad units on {@link AdExclusionRule#inventoryTargeting} exceeds the max number
	// of ad units allowed per ad exclusion rule inventory targeting in the network.
	//
	EntityChildrenLimitReachedErrorReasonReasonAdUnitLimitForAdExclusionRuleTargetingReached = "AD_UNIT_LIMIT_FOR_AD_EXCLUSION_RULE_TARGETING_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonNativeStyleLimitForNativeAdFormatReached
	//
	// The number of native styles under the native creative template exceeds the
	// max number of native styles allowed per native creative template in the
	// network.
	//
	EntityChildrenLimitReachedErrorReasonReasonNativeStyleLimitForNativeAdFormatReached = "NATIVE_STYLE_LIMIT_FOR_NATIVE_AD_FORMAT_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonTargetingExpressionLimitForPresentationAssignmentReached
	//
	// The number of targeting expressions on the native style exceeds the max number of targeting
	// expressions allowed per native style in the network.
	//
	EntityChildrenLimitReachedErrorReasonReasonTargetingExpressionLimitForPresentationAssignmentReached = "TARGETING_EXPRESSION_LIMIT_FOR_PRESENTATION_ASSIGNMENT_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	EntityChildrenLimitReachedErrorReasonReasonUnknown = "UNKNOWN"
)

// EntityLimitReachedErrorReasonReason
//
// The reasons for the entity limit reached error.
const (

	// EntityLimitReachedErrorReasonReasonCustomTargetingValuesLimitReached
	//
	// The number of custom targeting values exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonCustomTargetingValuesLimitReached = "CUSTOM_TARGETING_VALUES_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonAdExclusionRulesLimitReached
	//
	// The number of ad exclusion rules exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonAdExclusionRulesLimitReached = "AD_EXCLUSION_RULES_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonFirstPartyAudienceSegmentsLimitReached
	//
	// The number of first party audience segments exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonFirstPartyAudienceSegmentsLimitReached = "FIRST_PARTY_AUDIENCE_SEGMENTS_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonPlacementsLimitReached
	//
	// The number of active placements exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonPlacementsLimitReached = "PLACEMENTS_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonLineItemsLimitReached
	//
	// The number of line items excceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonLineItemsLimitReached = "LINE_ITEMS_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonActiveLineItemsLimitReached
	//
	// The number of active line items exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonActiveLineItemsLimitReached = "ACTIVE_LINE_ITEMS_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonDaiEncodingProfilesLimitReached
	//
	// The number of not-archived encoding profiles exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonDaiEncodingProfilesLimitReached = "DAI_ENCODING_PROFILES_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonTrafficForecastSegmentsLimitReached
	//
	// The number of traffic forecast segments exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonTrafficForecastSegmentsLimitReached = "TRAFFIC_FORECAST_SEGMENTS_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonForecastAdjustmentsLimitReached
	//
	// The number of forecast adjustments exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonForecastAdjustmentsLimitReached = "FORECAST_ADJUSTMENTS_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonActiveExperimentsLimitReached
	//
	// The number of active experiments exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonActiveExperimentsLimitReached = "ACTIVE_EXPERIMENTS_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonSitesLimitReached
	//
	// The number of sites exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonSitesLimitReached = "SITES_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonUserTeamsLimitReached
	//
	// The number of teams on the user exceeds the max number allowed.
	//
	EntityLimitReachedErrorReasonReasonUserTeamsLimitReached = "USER_TEAMS_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	EntityLimitReachedErrorReasonReasonUnknown = "UNKNOWN"
)

// FeatureErrorReasonReason
const (

	// FeatureErrorReasonReasonMissingFeature
	//
	// A feature is being used that is not enabled on the current network.
	//
	FeatureErrorReasonReasonMissingFeature = "MISSING_FEATURE"

	// FeatureErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	FeatureErrorReasonReasonUnknown = "UNKNOWN"
)

// FileErrorReasonReason
const (

	// FileErrorReasonReasonMissingContents
	//
	// The provided byte array is empty.
	//
	FileErrorReasonReasonMissingContents = "MISSING_CONTENTS"

	// FileErrorReasonReasonSizeTooLarge
	//
	// The provided file is larger than the maximum size defined for the
	// network.
	//
	FileErrorReasonReasonSizeTooLarge = "SIZE_TOO_LARGE"

	// FileErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	FileErrorReasonReasonUnknown = "UNKNOWN"
)

// HtmlBundleProcessorErrorReasonReason
//
// Error reasons that may arise during HTML5 bundle processing.
const (

	// HtmlBundleProcessorErrorReasonReasonCannotExtractFilesFromBundle
	//
	// Cannot extract files from HTML5 bundle.
	//
	HtmlBundleProcessorErrorReasonReasonCannotExtractFilesFromBundle = "CANNOT_EXTRACT_FILES_FROM_BUNDLE"

	// HtmlBundleProcessorErrorReasonReasonClickTagHardCoded
	//
	// Bundle cannot have hard-coded click tag url(s).
	//
	HtmlBundleProcessorErrorReasonReasonClickTagHardCoded = "CLICK_TAG_HARD_CODED"

	// HtmlBundleProcessorErrorReasonReasonClickTagInGwdUnupported
	//
	// Bundles created using GWD (Google Web Designer) cannot have click tags. GWD-published
	// bundles should use exit events instead of defining var {@code clickTAG}.
	//
	HtmlBundleProcessorErrorReasonReasonClickTagInGwdUnupported = "CLICK_TAG_IN_GWD_UNUPPORTED"

	// HtmlBundleProcessorErrorReasonReasonClickTagNotInPrimaryHtml
	//
	// Click tag detected outside of primary HTML file.
	//
	HtmlBundleProcessorErrorReasonReasonClickTagNotInPrimaryHtml = "CLICK_TAG_NOT_IN_PRIMARY_HTML"

	// HtmlBundleProcessorErrorReasonReasonClickTagInvalid
	//
	// Click tag or exit function has invalid name or url.
	//
	HtmlBundleProcessorErrorReasonReasonClickTagInvalid = "CLICK_TAG_INVALID"

	// HtmlBundleProcessorErrorReasonReasonFileSizeTooLarge
	//
	// HTML5 bundle or total size of extracted files cannot be more than 1000 KB.
	//
	HtmlBundleProcessorErrorReasonReasonFileSizeTooLarge = "FILE_SIZE_TOO_LARGE"

	// HtmlBundleProcessorErrorReasonReasonFilesTooMany
	//
	// HTML5 bundle cannot have more than 50 files.
	//
	HtmlBundleProcessorErrorReasonReasonFilesTooMany = "FILES_TOO_MANY"

	// HtmlBundleProcessorErrorReasonReasonFlashUnsupported
	//
	// Flash files in HTML5 bundles are not supported. Any file with a .swf or .flv extension
	// causes this error.
	//
	HtmlBundleProcessorErrorReasonReasonFlashUnsupported = "FLASH_UNSUPPORTED"

	// HtmlBundleProcessorErrorReasonReasonGwdComponentsUnsupported
	//
	// The HTML5 bundle contains unsupported GWD component(s).
	//
	HtmlBundleProcessorErrorReasonReasonGwdComponentsUnsupported = "GWD_COMPONENTS_UNSUPPORTED"

	// HtmlBundleProcessorErrorReasonReasonGwdEnablerMethodsUnsupported
	//
	// The HTML5 bundle contains Unsupported GWD Enabler method(s).
	//
	HtmlBundleProcessorErrorReasonReasonGwdEnablerMethodsUnsupported = "GWD_ENABLER_METHODS_UNSUPPORTED"

	// HtmlBundleProcessorErrorReasonReasonGwdPropertiesInvalid
	//
	// GWD properties are invalid.
	//
	HtmlBundleProcessorErrorReasonReasonGwdPropertiesInvalid = "GWD_PROPERTIES_INVALID"

	// HtmlBundleProcessorErrorReasonReasonLinkedFilesNotFound
	//
	// The HTML5 bundle contains broken relative file reference(s).
	//
	HtmlBundleProcessorErrorReasonReasonLinkedFilesNotFound = "LINKED_FILES_NOT_FOUND"

	// HtmlBundleProcessorErrorReasonReasonPrimaryHtmlMissing
	//
	// No primary HTML file detected.
	//
	HtmlBundleProcessorErrorReasonReasonPrimaryHtmlMissing = "PRIMARY_HTML_MISSING"

	// HtmlBundleProcessorErrorReasonReasonPrimaryHtmlUndetermined
	//
	// Multiple HTML files are detected. One of them should be named as {@code index.html}
	//
	HtmlBundleProcessorErrorReasonReasonPrimaryHtmlUndetermined = "PRIMARY_HTML_UNDETERMINED"

	// HtmlBundleProcessorErrorReasonReasonSvgBlockInvalid
	//
	// An SVG block could not be parsed.
	//
	HtmlBundleProcessorErrorReasonReasonSvgBlockInvalid = "SVG_BLOCK_INVALID"

	// HtmlBundleProcessorErrorReasonReasonCannotDecodeBundle
	//
	// The HTML5 bundle cannot be decoded.
	//
	HtmlBundleProcessorErrorReasonReasonCannotDecodeBundle = "CANNOT_DECODE_BUNDLE"

	// HtmlBundleProcessorErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	HtmlBundleProcessorErrorReasonReasonUnknown = "UNKNOWN"
)

// ImageErrorReasonReason
//
// The reasons for the target error.
const (

	// ImageErrorReasonReasonInvalidImage
	//
	// The file's format is invalid.
	//
	ImageErrorReasonReasonInvalidImage = "INVALID_IMAGE"

	// ImageErrorReasonReasonInvalidSize
	//
	// {@link Size#width} and {@link Size#height} cannot be negative.
	//
	ImageErrorReasonReasonInvalidSize = "INVALID_SIZE"

	// ImageErrorReasonReasonUnexpectedSize
	//
	// The actual image size does not match the expected image size.
	//
	ImageErrorReasonReasonUnexpectedSize = "UNEXPECTED_SIZE"

	// ImageErrorReasonReasonOverlaySizeTooLarge
	//
	// The size of the asset is larger than that of the overlay creative.
	//
	ImageErrorReasonReasonOverlaySizeTooLarge = "OVERLAY_SIZE_TOO_LARGE"

	// ImageErrorReasonReasonAnimatedNotAllowed
	//
	// Animated images are not allowed.
	//
	ImageErrorReasonReasonAnimatedNotAllowed = "ANIMATED_NOT_ALLOWED"

	// ImageErrorReasonReasonAnimationTooLong
	//
	// Animation length exceeded the allowed policy limit.
	//
	ImageErrorReasonReasonAnimationTooLong = "ANIMATION_TOO_LONG"

	// ImageErrorReasonReasonCmykJpegNotAllowed
	//
	// Images in CMYK color formats are not allowed.
	//
	ImageErrorReasonReasonCmykJpegNotAllowed = "CMYK_JPEG_NOT_ALLOWED"

	// ImageErrorReasonReasonFlashNotAllowed
	//
	// Flash files are not allowed.
	//
	ImageErrorReasonReasonFlashNotAllowed = "FLASH_NOT_ALLOWED"

	// ImageErrorReasonReasonFlashWithoutClicktag
	//
	// If {@link FlashCreative#clickTagRequired} is {@code true}, then the flash
	// file is required to have a click tag embedded in it.
	//
	ImageErrorReasonReasonFlashWithoutClicktag = "FLASH_WITHOUT_CLICKTAG"

	// ImageErrorReasonReasonAnimatedVisualEffect
	//
	// Animated visual effect is not allowed.
	//
	ImageErrorReasonReasonAnimatedVisualEffect = "ANIMATED_VISUAL_EFFECT"

	// ImageErrorReasonReasonFlashError
	//
	// An error was encountered in the flash file.
	//
	ImageErrorReasonReasonFlashError = "FLASH_ERROR"

	// ImageErrorReasonReasonLayoutProblem
	//
	// Incorrect image layout.
	//
	ImageErrorReasonReasonLayoutProblem = "LAYOUT_PROBLEM"

	// ImageErrorReasonReasonFlashHasNetworkObjects
	//
	// Flash files with network objects are not allowed.
	//
	ImageErrorReasonReasonFlashHasNetworkObjects = "FLASH_HAS_NETWORK_OBJECTS"

	// ImageErrorReasonReasonFlashHasNetworkMethods
	//
	// Flash files with network methods are not allowed.
	//
	ImageErrorReasonReasonFlashHasNetworkMethods = "FLASH_HAS_NETWORK_METHODS"

	// ImageErrorReasonReasonFlashHasUrl
	//
	// Flash files with hard-coded click thru URLs are not allowed.
	//
	ImageErrorReasonReasonFlashHasUrl = "FLASH_HAS_URL"

	// ImageErrorReasonReasonFlashHasMouseTracking
	//
	// Flash files with mouse tracking are not allowed.
	//
	ImageErrorReasonReasonFlashHasMouseTracking = "FLASH_HAS_MOUSE_TRACKING"

	// ImageErrorReasonReasonFlashHasRandomNum
	//
	// Flash files that generate or use random numbers are not allowed.
	//
	ImageErrorReasonReasonFlashHasRandomNum = "FLASH_HAS_RANDOM_NUM"

	// ImageErrorReasonReasonFlashSelfTargets
	//
	// Flash files with self targets are not allowed.
	//
	ImageErrorReasonReasonFlashSelfTargets = "FLASH_SELF_TARGETS"

	// ImageErrorReasonReasonFlashBadGeturlTarget
	//
	// Flash file contains a bad geturl target.
	//
	ImageErrorReasonReasonFlashBadGeturlTarget = "FLASH_BAD_GETURL_TARGET"

	// ImageErrorReasonReasonFlashVersionNotSupported
	//
	// Flash or ActionScript version in the submitted file is not supported.
	//
	ImageErrorReasonReasonFlashVersionNotSupported = "FLASH_VERSION_NOT_SUPPORTED"

	// ImageErrorReasonReasonFileTooLarge
	//
	// The uploaded file is too large.
	//
	ImageErrorReasonReasonFileTooLarge = "FILE_TOO_LARGE"

	// ImageErrorReasonReasonSystemErrorIrs
	//
	// A system error occurred, please try again.
	//
	ImageErrorReasonReasonSystemErrorIrs = "SYSTEM_ERROR_IRS"

	// ImageErrorReasonReasonSystemErrorScs
	//
	// A system error occurred, please try again.
	//
	ImageErrorReasonReasonSystemErrorScs = "SYSTEM_ERROR_SCS"

	// ImageErrorReasonReasonUnexpectedPrimaryAssetDensity
	//
	// The image density for a primary asset was not one of the expected image densities.
	//
	ImageErrorReasonReasonUnexpectedPrimaryAssetDensity = "UNEXPECTED_PRIMARY_ASSET_DENSITY"

	// ImageErrorReasonReasonDuplicateAssetDensity
	//
	// Two or more assets have the same image density.
	//
	ImageErrorReasonReasonDuplicateAssetDensity = "DUPLICATE_ASSET_DENSITY"

	// ImageErrorReasonReasonMissingDefaultAsset
	//
	// The creative does not contain a primary asset. (For high-density creatives, the primary
	// asset must be a standard image file with 1x density.)
	//
	ImageErrorReasonReasonMissingDefaultAsset = "MISSING_DEFAULT_ASSET"

	// ImageErrorReasonReasonPreverifiedMimetypeNotAllowed
	//
	// preverified_mime_type is not in the client spec's allowlist.
	//
	ImageErrorReasonReasonPreverifiedMimetypeNotAllowed = "PREVERIFIED_MIMETYPE_NOT_ALLOWED"

	// ImageErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ImageErrorReasonReasonUnknown = "UNKNOWN"
)

// InternalApiErrorReasonReason
//
// The single reason for the internal API error.
const (

	// InternalApiErrorReasonReasonUnexpectedInternalApiError
	//
	// API encountered an unexpected internal error.
	//
	InternalApiErrorReasonReasonUnexpectedInternalApiError = "UNEXPECTED_INTERNAL_API_ERROR"

	// InternalApiErrorReasonReasonTransientError
	//
	// A temporary error occurred during the request. Please retry.
	//
	InternalApiErrorReasonReasonTransientError = "TRANSIENT_ERROR"

	// InternalApiErrorReasonReasonUnknown
	//
	// The cause of the error is not known or only defined in newer versions.
	//
	InternalApiErrorReasonReasonUnknown = "UNKNOWN"

	// InternalApiErrorReasonReasonDowntime
	//
	// The API is currently unavailable for a planned downtime.
	//
	InternalApiErrorReasonReasonDowntime = "DOWNTIME"

	// InternalApiErrorReasonReasonErrorGeneratingResponse
	//
	// Mutate succeeded but server was unable to build response. Client should not retry mutate.
	//
	InternalApiErrorReasonReasonErrorGeneratingResponse = "ERROR_GENERATING_RESPONSE"
)

// InvalidPhoneNumberErrorReasonReason
const (

	// InvalidPhoneNumberErrorReasonReasonInvalidFormat
	//
	// The phone number is invalid.
	//
	InvalidPhoneNumberErrorReasonReasonInvalidFormat = "INVALID_FORMAT"

	// InvalidPhoneNumberErrorReasonReasonTooShort
	//
	// The phone number is too short.
	//
	InvalidPhoneNumberErrorReasonReasonTooShort = "TOO_SHORT"

	// InvalidPhoneNumberErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	InvalidPhoneNumberErrorReasonReasonUnknown = "UNKNOWN"
)

// InvalidUrlErrorReasonReason
const (

	// InvalidUrlErrorReasonReasonIllegalCharacters
	//
	// The URL contains invalid characters.
	//
	InvalidUrlErrorReasonReasonIllegalCharacters = "ILLEGAL_CHARACTERS"

	// InvalidUrlErrorReasonReasonInvalidFormat
	//
	// The format of the URL is not allowed. This could occur for a number of
	// reasons. For example, if an invalid scheme is specified (like "ftp://")
	// or if a port is specified when not required, or if a query was specified
	// when not required.
	//
	InvalidUrlErrorReasonReasonInvalidFormat = "INVALID_FORMAT"

	// InvalidUrlErrorReasonReasonInsecureScheme
	//
	// URL contains insecure scheme.
	//
	InvalidUrlErrorReasonReasonInsecureScheme = "INSECURE_SCHEME"

	// InvalidUrlErrorReasonReasonNoScheme
	//
	// The URL does not contain a scheme.
	//
	InvalidUrlErrorReasonReasonNoScheme = "NO_SCHEME"

	// InvalidUrlErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	InvalidUrlErrorReasonReasonUnknown = "UNKNOWN"
)

// LabelEntityAssociationErrorReasonReason
//
// The reasons for the target error.
const (

	// LabelEntityAssociationErrorReasonReasonDuplicateAssociation
	//
	// The label has already been attached to the entity.
	//
	LabelEntityAssociationErrorReasonReasonDuplicateAssociation = "DUPLICATE_ASSOCIATION"

	// LabelEntityAssociationErrorReasonReasonInvalidAssociation
	//
	// A label is being applied to an entity that does not support that entity
	// type.
	//
	LabelEntityAssociationErrorReasonReasonInvalidAssociation = "INVALID_ASSOCIATION"

	// LabelEntityAssociationErrorReasonReasonNegationNotAllowed
	//
	// Label negation cannot be applied to the entity type.
	//
	LabelEntityAssociationErrorReasonReasonNegationNotAllowed = "NEGATION_NOT_ALLOWED"

	// LabelEntityAssociationErrorReasonReasonDuplicateAssociationWithNegation
	//
	// The same label is being applied and negated to the same entity.
	//
	LabelEntityAssociationErrorReasonReasonDuplicateAssociationWithNegation = "DUPLICATE_ASSOCIATION_WITH_NEGATION"

	// LabelEntityAssociationErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	LabelEntityAssociationErrorReasonReasonUnknown = "UNKNOWN"
)

// LineItemCreativeAssociationStatusType
//
// Describes the status of the association.
type LineItemCreativeAssociationStatus string

const (

	// LineItemCreativeAssociationStatusTypeActive
	//
	// The association is active and the associated {@link Creative} can be served.
	//
	LineItemCreativeAssociationStatusTypeActive LineItemCreativeAssociationStatus = "ACTIVE"

	// LineItemCreativeAssociationStatusTypeNotServing
	//
	// The association is active but the associated {@link Creative} may not be served, because its
	// size is not targeted by the line item.
	//
	LineItemCreativeAssociationStatusTypeNotServing LineItemCreativeAssociationStatus = "NOT_SERVING"

	// LineItemCreativeAssociationStatusTypeInactive
	//
	// The association is inactive and the associated {@link Creative} is ineligible for being
	// served.
	//
	LineItemCreativeAssociationStatusTypeInactive LineItemCreativeAssociationStatus = "INACTIVE"

	// LineItemCreativeAssociationStatusTypeUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	LineItemCreativeAssociationStatusTypeUnknown LineItemCreativeAssociationStatus = "UNKNOWN"
)

// LineItemCreativeAssociationErrorReasonReason
//
// The reasons for the target error.
const (

	// LineItemCreativeAssociationErrorReasonReasonCreativeInWrongAdvertisersLibrary
	//
	// Cannot associate a creative to the wrong advertiser
	//
	LineItemCreativeAssociationErrorReasonReasonCreativeInWrongAdvertisersLibrary = "CREATIVE_IN_WRONG_ADVERTISERS_LIBRARY"

	// LineItemCreativeAssociationErrorReasonReasonInvalidLineitemCreativePairing
	//
	// The creative type being associated is a invalid for the line item type.
	//
	LineItemCreativeAssociationErrorReasonReasonInvalidLineitemCreativePairing = "INVALID_LINEITEM_CREATIVE_PAIRING"

	// LineItemCreativeAssociationErrorReasonReasonStartdateBeforeLineitemStartdate
	//
	// Association start date cannot be before line item start date
	//
	LineItemCreativeAssociationErrorReasonReasonStartdateBeforeLineitemStartdate = "STARTDATE_BEFORE_LINEITEM_STARTDATE"

	// LineItemCreativeAssociationErrorReasonReasonStartdateNotBeforeLineitemEnddate
	//
	// Association start date cannot be same as or after line item end date
	//
	LineItemCreativeAssociationErrorReasonReasonStartdateNotBeforeLineitemEnddate = "STARTDATE_NOT_BEFORE_LINEITEM_ENDDATE"

	// LineItemCreativeAssociationErrorReasonReasonEnddateAfterLineitemEnddate
	//
	// Association end date cannot be after line item end date
	//
	LineItemCreativeAssociationErrorReasonReasonEnddateAfterLineitemEnddate = "ENDDATE_AFTER_LINEITEM_ENDDATE"

	// LineItemCreativeAssociationErrorReasonReasonEnddateNotAfterLineitemStartdate
	//
	// Association end date cannot be same as or before line item start date
	//
	LineItemCreativeAssociationErrorReasonReasonEnddateNotAfterLineitemStartdate = "ENDDATE_NOT_AFTER_LINEITEM_STARTDATE"

	// LineItemCreativeAssociationErrorReasonReasonEnddateNotAfterStartdate
	//
	// Association end date cannot be same as or before its start date
	//
	LineItemCreativeAssociationErrorReasonReasonEnddateNotAfterStartdate = "ENDDATE_NOT_AFTER_STARTDATE"

	// LineItemCreativeAssociationErrorReasonReasonEnddateInThePast
	//
	// Association end date cannot be in the past.
	//
	LineItemCreativeAssociationErrorReasonReasonEnddateInThePast = "ENDDATE_IN_THE_PAST"

	// LineItemCreativeAssociationErrorReasonReasonCannotCopyWithinSameLineItem
	//
	// Cannot copy an association to the same line item without
	// creating new creative
	//
	LineItemCreativeAssociationErrorReasonReasonCannotCopyWithinSameLineItem = "CANNOT_COPY_WITHIN_SAME_LINE_ITEM"

	// LineItemCreativeAssociationErrorReasonReasonUnsupportedCreativeVastRedirectType
	//
	// Programmatic only supports the "Video" redirect type.
	//
	LineItemCreativeAssociationErrorReasonReasonUnsupportedCreativeVastRedirectType = "UNSUPPORTED_CREATIVE_VAST_REDIRECT_TYPE"

	// LineItemCreativeAssociationErrorReasonReasonUnsupportedYoutubeHostedCreative
	//
	// Programmatic does not support YouTube hosted creatives.
	//
	LineItemCreativeAssociationErrorReasonReasonUnsupportedYoutubeHostedCreative = "UNSUPPORTED_YOUTUBE_HOSTED_CREATIVE"

	// LineItemCreativeAssociationErrorReasonReasonProgrammaticCreativesCanOnlyBeAssignedToOneLineItem
	//
	// Programmatic creatives can only be assigned to one line item.
	//
	LineItemCreativeAssociationErrorReasonReasonProgrammaticCreativesCanOnlyBeAssignedToOneLineItem = "PROGRAMMATIC_CREATIVES_CAN_ONLY_BE_ASSIGNED_TO_ONE_LINE_ITEM"

	// LineItemCreativeAssociationErrorReasonReasonCannotActivateAssociationWithInactiveCreative
	//
	// Cannot activate a line item creative association if the associated creative is inactive.
	//
	LineItemCreativeAssociationErrorReasonReasonCannotActivateAssociationWithInactiveCreative = "CANNOT_ACTIVATE_ASSOCIATION_WITH_INACTIVE_CREATIVE"

	// LineItemCreativeAssociationErrorReasonReasonCannotCreateProgrammaticCreatives
	//
	// Cannot create programmatic creatives.
	//
	LineItemCreativeAssociationErrorReasonReasonCannotCreateProgrammaticCreatives = "CANNOT_CREATE_PROGRAMMATIC_CREATIVES"

	// LineItemCreativeAssociationErrorReasonReasonCannotUpdateProgrammaticCreatives
	//
	// Cannot update programmatic creatives.
	//
	LineItemCreativeAssociationErrorReasonReasonCannotUpdateProgrammaticCreatives = "CANNOT_UPDATE_PROGRAMMATIC_CREATIVES"

	// LineItemCreativeAssociationErrorReasonReasonCreativeAndLineItemMustBothBeSetTopBoxEnabled
	//
	// Cannot associate a creative with a line item if only one of them is set-top box enabled.
	//
	LineItemCreativeAssociationErrorReasonReasonCreativeAndLineItemMustBothBeSetTopBoxEnabled = "CREATIVE_AND_LINE_ITEM_MUST_BOTH_BE_SET_TOP_BOX_ENABLED"

	// LineItemCreativeAssociationErrorReasonReasonCannotDeleteSetTopBoxEnabledAssociations
	//
	// Cannot delete associations between set-top box enabled line items and set-top box enabled
	// creatives.
	//
	LineItemCreativeAssociationErrorReasonReasonCannotDeleteSetTopBoxEnabledAssociations = "CANNOT_DELETE_SET_TOP_BOX_ENABLED_ASSOCIATIONS"

	// LineItemCreativeAssociationErrorReasonReasonSetTopBoxCreativeRotationWeightMustBeInteger
	//
	// Creative rotation weights must be integers.
	//
	LineItemCreativeAssociationErrorReasonReasonSetTopBoxCreativeRotationWeightMustBeInteger = "SET_TOP_BOX_CREATIVE_ROTATION_WEIGHT_MUST_BE_INTEGER"

	// LineItemCreativeAssociationErrorReasonReasonInvalidCreativeRotationTypeForManualWeight
	//
	// Creative rotation weights are only valid when creative rotation type is set to
	// {@link CreativeRotationType#MANUAL}.
	//
	LineItemCreativeAssociationErrorReasonReasonInvalidCreativeRotationTypeForManualWeight = "INVALID_CREATIVE_ROTATION_TYPE_FOR_MANUAL_WEIGHT"

	// LineItemCreativeAssociationErrorReasonReasonClickMacrosRequired
	//
	// The code snippet of a creative must contain a click macro
	// (%%CLICK_URL_ESC%% or %%CLICK_URL_UNESC%%).
	//
	LineItemCreativeAssociationErrorReasonReasonClickMacrosRequired = "CLICK_MACROS_REQUIRED"

	// LineItemCreativeAssociationErrorReasonReasonViewMacrosNotAllowed
	//
	// The code snippet of a creative must not contain a view macro
	// (%%VIEW_URL_ESC%% or %%VIEW_URL_UNESC%%).
	//
	LineItemCreativeAssociationErrorReasonReasonViewMacrosNotAllowed = "VIEW_MACROS_NOT_ALLOWED"

	// LineItemCreativeAssociationErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	LineItemCreativeAssociationErrorReasonReasonUnknown = "UNKNOWN"
)

// LineItemCreativeAssociationOperationErrorReasonReason
//
// The reasons for the target error.
const (

	// LineItemCreativeAssociationOperationErrorReasonReasonNotAllowed
	//
	// The operation is not allowed due to permissions
	//
	LineItemCreativeAssociationOperationErrorReasonReasonNotAllowed = "NOT_ALLOWED"

	// LineItemCreativeAssociationOperationErrorReasonReasonNotApplicable
	//
	// The operation is not applicable to the current state
	//
	LineItemCreativeAssociationOperationErrorReasonReasonNotApplicable = "NOT_APPLICABLE"

	// LineItemCreativeAssociationOperationErrorReasonReasonCannotActivateInvalidCreative
	//
	// Cannot activate an invalid creative
	//
	LineItemCreativeAssociationOperationErrorReasonReasonCannotActivateInvalidCreative = "CANNOT_ACTIVATE_INVALID_CREATIVE"

	// LineItemCreativeAssociationOperationErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	LineItemCreativeAssociationOperationErrorReasonReasonUnknown = "UNKNOWN"
)

// LineItemErrorReasonReason
//
// The reasons for the target error.
const (

	// LineItemErrorReasonReasonAlreadyStarted
	//
	// Some changes may not be allowed because a line item has already started.
	//
	LineItemErrorReasonReasonAlreadyStarted = "ALREADY_STARTED"

	// LineItemErrorReasonReasonUpdateReservationNotAllowed
	//
	// Update reservation is not allowed because a line item has
	// already started, users must pause the line item first.
	//
	LineItemErrorReasonReasonUpdateReservationNotAllowed = "UPDATE_RESERVATION_NOT_ALLOWED"

	// LineItemErrorReasonReasonAllRoadblockNotAllowed
	//
	// Roadblocking to display all creatives is not allowed.
	//
	LineItemErrorReasonReasonAllRoadblockNotAllowed = "ALL_ROADBLOCK_NOT_ALLOWED"

	// LineItemErrorReasonReasonAllCompanionDeliveryNotAllowed
	//
	// Companion delivery to display all creatives is not allowed.
	//
	LineItemErrorReasonReasonAllCompanionDeliveryNotAllowed = "ALL_COMPANION_DELIVERY_NOT_ALLOWED"

	// LineItemErrorReasonReasonCreativeSetRoadblockNotAllowed
	//
	// Roadblocking to display all master and companion creative set is not allowed.
	//
	LineItemErrorReasonReasonCreativeSetRoadblockNotAllowed = "CREATIVE_SET_ROADBLOCK_NOT_ALLOWED"

	// LineItemErrorReasonReasonFractionalPercentageNotAllowed
	//
	// Fractional percentage is not allowed.
	//
	LineItemErrorReasonReasonFractionalPercentageNotAllowed = "FRACTIONAL_PERCENTAGE_NOT_ALLOWED"

	// LineItemErrorReasonReasonDiscountNotAllowed
	//
	// For certain LineItem configurations discounts are not allowed.
	//
	LineItemErrorReasonReasonDiscountNotAllowed = "DISCOUNT_NOT_ALLOWED"

	// LineItemErrorReasonReasonUpdateCanceledLineItemNotAllowed
	//
	// Updating a canceled line item is not allowed.
	//
	LineItemErrorReasonReasonUpdateCanceledLineItemNotAllowed = "UPDATE_CANCELED_LINE_ITEM_NOT_ALLOWED"

	// LineItemErrorReasonReasonUpdatePendingApprovalLineItemNotAllowed
	//
	// Updating a pending approval line item is not allowed.
	//
	LineItemErrorReasonReasonUpdatePendingApprovalLineItemNotAllowed = "UPDATE_PENDING_APPROVAL_LINE_ITEM_NOT_ALLOWED"

	// LineItemErrorReasonReasonUpdateArchivedLineItemNotAllowed
	//
	// Updating an archived line item is not allowed.
	//
	LineItemErrorReasonReasonUpdateArchivedLineItemNotAllowed = "UPDATE_ARCHIVED_LINE_ITEM_NOT_ALLOWED"

	// LineItemErrorReasonReasonCreateOrUpdateLegacyDfpLineItemTypeNotAllowed
	//
	// Create or update legacy dfp line item type is not allowed.
	//
	LineItemErrorReasonReasonCreateOrUpdateLegacyDfpLineItemTypeNotAllowed = "CREATE_OR_UPDATE_LEGACY_DFP_LINE_ITEM_TYPE_NOT_ALLOWED"

	// LineItemErrorReasonReasonCopyLineItemFromDifferentCompanyNotAllowed
	//
	// Copying line item from different company (advertiser)
	// to the same order is not allowed.
	//
	LineItemErrorReasonReasonCopyLineItemFromDifferentCompanyNotAllowed = "COPY_LINE_ITEM_FROM_DIFFERENT_COMPANY_NOT_ALLOWED"

	// LineItemErrorReasonReasonInvalidSizeForPlatform
	//
	// The size is invalid for the specified platform.
	//
	LineItemErrorReasonReasonInvalidSizeForPlatform = "INVALID_SIZE_FOR_PLATFORM"

	// LineItemErrorReasonReasonInvalidLineItemTypeForPlatform
	//
	// The line item type is invalid for the specified platform.
	//
	LineItemErrorReasonReasonInvalidLineItemTypeForPlatform = "INVALID_LINE_ITEM_TYPE_FOR_PLATFORM"

	// LineItemErrorReasonReasonInvalidWebPropertyForPlatform
	//
	// The web property cannot be served on the specified platform.
	//
	LineItemErrorReasonReasonInvalidWebPropertyForPlatform = "INVALID_WEB_PROPERTY_FOR_PLATFORM"

	// LineItemErrorReasonReasonInvalidWebPropertyForEnvironment
	//
	// The web property cannot be served on the specified environment.
	//
	LineItemErrorReasonReasonInvalidWebPropertyForEnvironment = "INVALID_WEB_PROPERTY_FOR_ENVIRONMENT"

	// LineItemErrorReasonReasonAfmaBackfillNotAllowed
	//
	// AFMA backfill not supported.
	//
	LineItemErrorReasonReasonAfmaBackfillNotAllowed = "AFMA_BACKFILL_NOT_ALLOWED"

	// LineItemErrorReasonReasonUpdateEnvironmentTypeNotAllowed
	//
	// Environment type cannot change once saved.
	//
	LineItemErrorReasonReasonUpdateEnvironmentTypeNotAllowed = "UPDATE_ENVIRONMENT_TYPE_NOT_ALLOWED"

	// LineItemErrorReasonReasonCompanionsNotAllowed
	//
	// The placeholders are invalid because they contain companions,
	// but the line item does not support companions.
	//
	LineItemErrorReasonReasonCompanionsNotAllowed = "COMPANIONS_NOT_ALLOWED"

	// LineItemErrorReasonReasonRoadblocksWithNonroadblocksNotAllowed
	//
	// The placeholders are invalid because some of them are roadblocks,
	// and some are not.  Either all roadblock placeholders must contain
	// companions, or no placeholders may contain companions.  This does
	// not apply to video creative sets.
	//
	LineItemErrorReasonReasonRoadblocksWithNonroadblocksNotAllowed = "ROADBLOCKS_WITH_NONROADBLOCKS_NOT_ALLOWED"

	// LineItemErrorReasonReasonCannotUpdateToOrFromCreativeSetRoadblock
	//
	// A line item cannot be updated from having
	// {@link RoadblockingType#CREATIVE_SET} to having a different
	// RoadblockingType, or vice versa.
	//
	LineItemErrorReasonReasonCannotUpdateToOrFromCreativeSetRoadblock = "CANNOT_UPDATE_TO_OR_FROM_CREATIVE_SET_ROADBLOCK"

	// LineItemErrorReasonReasonUpdateFromBackfillLineItemTypeNotAllowed
	//
	// Can not change from a backfill line item type once creatives have been
	// assigned.
	//
	LineItemErrorReasonReasonUpdateFromBackfillLineItemTypeNotAllowed = "UPDATE_FROM_BACKFILL_LINE_ITEM_TYPE_NOT_ALLOWED"

	// LineItemErrorReasonReasonUpdateToBackfillLineItemTypeNotAllowed
	//
	// Can not change to a backfill line item type once creatives have been
	// assigned.
	//
	LineItemErrorReasonReasonUpdateToBackfillLineItemTypeNotAllowed = "UPDATE_TO_BACKFILL_LINE_ITEM_TYPE_NOT_ALLOWED"

	// LineItemErrorReasonReasonUpdateBackfillWebPropertyNotAllowed
	//
	// Can not change to backfill web property once creatives have been
	// assigned.
	//
	LineItemErrorReasonReasonUpdateBackfillWebPropertyNotAllowed = "UPDATE_BACKFILL_WEB_PROPERTY_NOT_ALLOWED"

	// LineItemErrorReasonReasonInvalidCompanionDeliveryOptionForEnvironmentType
	//
	// The companion delivery option is not valid for your environment type.
	//
	LineItemErrorReasonReasonInvalidCompanionDeliveryOptionForEnvironmentType = "INVALID_COMPANION_DELIVERY_OPTION_FOR_ENVIRONMENT_TYPE"

	// LineItemErrorReasonReasonCompanionBackfillRequiresVideo
	//
	// Companion backfill is enabled but environment type not video.
	//
	LineItemErrorReasonReasonCompanionBackfillRequiresVideo = "COMPANION_BACKFILL_REQUIRES_VIDEO"

	// LineItemErrorReasonReasonCompanionDeliveryOptionRequirePremium
	//
	// Companion delivery options require Ad Manager 360 networks.
	//
	LineItemErrorReasonReasonCompanionDeliveryOptionRequirePremium = "COMPANION_DELIVERY_OPTION_REQUIRE_PREMIUM"

	// LineItemErrorReasonReasonDuplicateMasterSizes
	//
	// The master size of placeholders have duplicates.
	//
	LineItemErrorReasonReasonDuplicateMasterSizes = "DUPLICATE_MASTER_SIZES"

	// LineItemErrorReasonReasonInvalidPriorityForLineItemType
	//
	// The line item priority is invalid if for dynamic allocation line items
	// it is different than the default for free publishers.  When allowed,
	// Ad Manager 360 users can change the priority to any value.
	//
	LineItemErrorReasonReasonInvalidPriorityForLineItemType = "INVALID_PRIORITY_FOR_LINE_ITEM_TYPE"

	// LineItemErrorReasonReasonInvalidEnvironmentType
	//
	// The environment type is not valid.
	//
	LineItemErrorReasonReasonInvalidEnvironmentType = "INVALID_ENVIRONMENT_TYPE"

	// LineItemErrorReasonReasonInvalidEnvironmentTypeForPlatform
	//
	// The environment type is not valid for the target platform.
	//
	LineItemErrorReasonReasonInvalidEnvironmentTypeForPlatform = "INVALID_ENVIRONMENT_TYPE_FOR_PLATFORM"

	// LineItemErrorReasonReasonInvalidTypeForAutoExtension
	//
	// Only {@link LineItemType#STANDARD} line items can be auto extended.
	//
	LineItemErrorReasonReasonInvalidTypeForAutoExtension = "INVALID_TYPE_FOR_AUTO_EXTENSION"

	// LineItemErrorReasonReasonVideoInvalidRoadblocking
	//
	// Video line items cannot change the roadblocking type.
	//
	LineItemErrorReasonReasonVideoInvalidRoadblocking = "VIDEO_INVALID_ROADBLOCKING"

	// LineItemErrorReasonReasonBackfillTypeNotAllowed
	//
	// The backfill feature is not enabled according to your features.
	//
	LineItemErrorReasonReasonBackfillTypeNotAllowed = "BACKFILL_TYPE_NOT_ALLOWED"

	// LineItemErrorReasonReasonInvalidBackfillLinkType
	//
	// The web property is invalid. A line item must have an appropriate web property selected.
	//
	LineItemErrorReasonReasonInvalidBackfillLinkType = "INVALID_BACKFILL_LINK_TYPE"

	// LineItemErrorReasonReasonDifferentBackfillAccount
	//
	// All line items in a programmatic order must have web property codes from the same account.
	//
	LineItemErrorReasonReasonDifferentBackfillAccount = "DIFFERENT_BACKFILL_ACCOUNT"

	// LineItemErrorReasonReasonCompanionDeliveryOptionsNotAllowedWithBackfill
	//
	// Companion delivery options are not allowed with dynamic allocation line
	// items.
	//
	LineItemErrorReasonReasonCompanionDeliveryOptionsNotAllowedWithBackfill = "COMPANION_DELIVERY_OPTIONS_NOT_ALLOWED_WITH_BACKFILL"

	// LineItemErrorReasonReasonInvalidWebPropertyForAdxBackfill
	//
	// Dynamic allocation using the AdExchange should always use an AFC web
	// property.
	//
	LineItemErrorReasonReasonInvalidWebPropertyForAdxBackfill = "INVALID_WEB_PROPERTY_FOR_ADX_BACKFILL"

	// LineItemErrorReasonReasonInvalidCostPerUnitForBackfill
	//
	// CPM for backfill inventory must be 0.
	//
	LineItemErrorReasonReasonInvalidCostPerUnitForBackfill = "INVALID_COST_PER_UNIT_FOR_BACKFILL"

	// LineItemErrorReasonReasonInvalidSizeForEnvironment
	//
	// Aspect ratio sizes cannot be used with video line items.
	//
	LineItemErrorReasonReasonInvalidSizeForEnvironment = "INVALID_SIZE_FOR_ENVIRONMENT"

	// LineItemErrorReasonReasonTargetPlatofrmNotAllowed
	//
	// The specified target platform is not allowed.
	//
	LineItemErrorReasonReasonTargetPlatofrmNotAllowed = "TARGET_PLATOFRM_NOT_ALLOWED"

	// LineItemErrorReasonReasonInvalidLineItemCurrency
	//
	// Currency on a line item must be one of the specified network currencies.
	//
	LineItemErrorReasonReasonInvalidLineItemCurrency = "INVALID_LINE_ITEM_CURRENCY"

	// LineItemErrorReasonReasonLineItemCannotHaveMultipleCurrencies
	//
	// All money fields on a line item must specify the same currency.
	//
	LineItemErrorReasonReasonLineItemCannotHaveMultipleCurrencies = "LINE_ITEM_CANNOT_HAVE_MULTIPLE_CURRENCIES"

	// LineItemErrorReasonReasonCannotChangeCurrency
	//
	// Once a line item has moved into a a delivering state the currency cannot be changed.
	//
	LineItemErrorReasonReasonCannotChangeCurrency = "CANNOT_CHANGE_CURRENCY"

	// LineItemErrorReasonReasonInvalidLineItemDateTime
	//
	// A DateTime associated with the line item is not valid.
	//
	LineItemErrorReasonReasonInvalidLineItemDateTime = "INVALID_LINE_ITEM_DATE_TIME"

	// LineItemErrorReasonReasonInvalidCostPerUnitForCpa
	//
	// CPA {@link LineItem line items} must specify a zero cost for the
	// {@link LineItem#costPerUnit}.
	//
	LineItemErrorReasonReasonInvalidCostPerUnitForCpa = "INVALID_COST_PER_UNIT_FOR_CPA"

	// LineItemErrorReasonReasonUpdateCpaCostTypeNotAllowed
	//
	// Once a {@link LineItem} is activated its {@link LineItem#costPerUnit} cannot be updated
	// to/from CPA.
	//
	LineItemErrorReasonReasonUpdateCpaCostTypeNotAllowed = "UPDATE_CPA_COST_TYPE_NOT_ALLOWED"

	// LineItemErrorReasonReasonUpdateVcpmCostTypeNotAllowed
	//
	// Once a {@link LineItem} is activated its {@link LineItem#costPerUnit} cannot be updated
	// to/from Viewable CPM.
	//
	LineItemErrorReasonReasonUpdateVcpmCostTypeNotAllowed = "UPDATE_VCPM_COST_TYPE_NOT_ALLOWED"

	// LineItemErrorReasonReasonMasterCompanionLineItemCannotHaveVcpmCostType
	//
	// A {@link LineItem} with master/companion creative placeholders cannot have Viewable CPM
	// as its {@link LineItem#costPerUnit}.
	//
	LineItemErrorReasonReasonMasterCompanionLineItemCannotHaveVcpmCostType = "MASTER_COMPANION_LINE_ITEM_CANNOT_HAVE_VCPM_COST_TYPE"

	// LineItemErrorReasonReasonDuplicatedUnitType
	//
	// There cannot be goals with duplicated unit type among the secondary goals for a
	// {@link LineItem line items}.
	//
	LineItemErrorReasonReasonDuplicatedUnitType = "DUPLICATED_UNIT_TYPE"

	// LineItemErrorReasonReasonMultipleGoalTypeNotAllowed
	//
	// The secondary goals of a {@link LineItem line items} must have the same goal type.
	//
	LineItemErrorReasonReasonMultipleGoalTypeNotAllowed = "MULTIPLE_GOAL_TYPE_NOT_ALLOWED"

	// LineItemErrorReasonReasonInvalidUnitTypeCombinationForSecondaryGoals
	//
	// For a CPA {@link LineItem line item}, the possible combinations for secondary goals must
	// be either click-through conversion only, click-through conversion with view-through
	// conversion or total conversion only. For a Viewable CPM {@link LineItem line item} or a
	// CPM based Sponsorship {@link LineItem line item}, its secondary goal has to be
	// impression-based.
	//
	LineItemErrorReasonReasonInvalidUnitTypeCombinationForSecondaryGoals = "INVALID_UNIT_TYPE_COMBINATION_FOR_SECONDARY_GOALS"

	// LineItemErrorReasonReasonInvalidCreativeTargetingName
	//
	// One or more of the targeting names specified by a creative placeholder or line item
	// creative association were not found on the line item.
	//
	LineItemErrorReasonReasonInvalidCreativeTargetingName = "INVALID_CREATIVE_TARGETING_NAME"

	// LineItemErrorReasonReasonInvalidCreativeCustomTargetingMatchType
	//
	// Creative targeting expressions on the line item can only have custom criteria targeting
	// with {@link CustomTargetingValue.MatchType#EXACT}.
	//
	LineItemErrorReasonReasonInvalidCreativeCustomTargetingMatchType = "INVALID_CREATIVE_CUSTOM_TARGETING_MATCH_TYPE"

	// LineItemErrorReasonReasonInvalidCreativeRotationTypeWithCreativeTargeting
	//
	// Line item with creative targeting expressions cannot have creative rotation type set to
	// {@link CreativeRotationType#SEQUENTIAL}.
	//
	LineItemErrorReasonReasonInvalidCreativeRotationTypeWithCreativeTargeting = "INVALID_CREATIVE_ROTATION_TYPE_WITH_CREATIVE_TARGETING"

	// LineItemErrorReasonReasonCannotOverbookWithCreativeTargeting
	//
	// Line items cannot overbook inventory when applying creative-level targeting if the
	// originating proposal line item did not overbook inventory. Remove creative-level targeting
	// and try again.
	//
	LineItemErrorReasonReasonCannotOverbookWithCreativeTargeting = "CANNOT_OVERBOOK_WITH_CREATIVE_TARGETING"

	// LineItemErrorReasonReasonPlaceholdersDoNotMatchProposal
	//
	// For a managed line item, inventory sizes must match sizes that are set on the originating
	// proposal line item. In the case that a size is broken out by creative-level targeting,
	// the sum of the creative counts for each size must equal the expected creative count that
	// is set for that size on the originating proposal line item.
	//
	LineItemErrorReasonReasonPlaceholdersDoNotMatchProposal = "PLACEHOLDERS_DO_NOT_MATCH_PROPOSAL"

	// LineItemErrorReasonReasonUnsupportedLineItemTypeForThisApiVersion
	//
	// The line item type is not supported for this API version.
	//
	LineItemErrorReasonReasonUnsupportedLineItemTypeForThisApiVersion = "UNSUPPORTED_LINE_ITEM_TYPE_FOR_THIS_API_VERSION"

	// LineItemErrorReasonReasonNativeCreativeTemplateRequired
	//
	// Placeholders can only have native creative templates.
	//
	LineItemErrorReasonReasonNativeCreativeTemplateRequired = "NATIVE_CREATIVE_TEMPLATE_REQUIRED"

	// LineItemErrorReasonReasonCannotHaveCreativeTemplate
	//
	// Non-native placeholders cannot have creative templates.
	//
	LineItemErrorReasonReasonCannotHaveCreativeTemplate = "CANNOT_HAVE_CREATIVE_TEMPLATE"

	// LineItemErrorReasonReasonCannotIncludeNativeCreativeTemplate
	//
	// Cannot include native creative templates in the placeholders for Ad Exchange line items.
	//
	LineItemErrorReasonReasonCannotIncludeNativeCreativeTemplate = "CANNOT_INCLUDE_NATIVE_CREATIVE_TEMPLATE"

	// LineItemErrorReasonReasonCannotIncludeNativePlaceholderWithoutTemplateId
	//
	// Cannot include native placeholders without native creative templates for direct-sold line
	// items.
	//
	LineItemErrorReasonReasonCannotIncludeNativePlaceholderWithoutTemplateId = "CANNOT_INCLUDE_NATIVE_PLACEHOLDER_WITHOUT_TEMPLATE_ID"

	// LineItemErrorReasonReasonNoSizeWithDuration
	//
	// For forecasting only, error when line item has duration, but no creative sizes specified.
	//
	LineItemErrorReasonReasonNoSizeWithDuration = "NO_SIZE_WITH_DURATION"

	// LineItemErrorReasonReasonInvalidViewabilityProviderCompany
	//
	// Used when the company pointed to by the viewabilityProviderCompanyId is not of type
	// VIEWABILITY_PROVIDER.
	//
	LineItemErrorReasonReasonInvalidViewabilityProviderCompany = "INVALID_VIEWABILITY_PROVIDER_COMPANY"

	// LineItemErrorReasonReasonCannotAccessCustomPacingCurveCloudStorageBucket
	//
	// An error occurred while accessing the custom pacing curve Google Cloud Storage bucket.
	//
	LineItemErrorReasonReasonCannotAccessCustomPacingCurveCloudStorageBucket = "CANNOT_ACCESS_CUSTOM_PACING_CURVE_CLOUD_STORAGE_BUCKET"

	// LineItemErrorReasonReasonCmsMetadataLineItemEnvironmentTypeNotSupported
	//
	// CMS Metadata targeting is only supported for video line items.
	//
	LineItemErrorReasonReasonCmsMetadataLineItemEnvironmentTypeNotSupported = "CMS_METADATA_LINE_ITEM_ENVIRONMENT_TYPE_NOT_SUPPORTED"

	// LineItemErrorReasonReasonSkippableAdTypeNotAllowed
	//
	// The {@code SkippableAdType} is not allowed.
	//
	LineItemErrorReasonReasonSkippableAdTypeNotAllowed = "SKIPPABLE_AD_TYPE_NOT_ALLOWED"

	// LineItemErrorReasonReasonCustomPacingCurveStartTimeMustMatchLineItemStartTime
	//
	// Custom pacing curve start time must match the line item's start time.
	//
	LineItemErrorReasonReasonCustomPacingCurveStartTimeMustMatchLineItemStartTime = "CUSTOM_PACING_CURVE_START_TIME_MUST_MATCH_LINE_ITEM_START_TIME"

	// LineItemErrorReasonReasonCustomPacingCurveStartTimePastLineItemEndTime
	//
	// Custom pacing curve goal start time must be before line item end time.
	//
	LineItemErrorReasonReasonCustomPacingCurveStartTimePastLineItemEndTime = "CUSTOM_PACING_CURVE_START_TIME_PAST_LINE_ITEM_END_TIME"

	// LineItemErrorReasonReasonInvalidLineItemTypeForDeliveryForecastSource
	//
	// The line item type is invalid for the specified delivery forecast source.
	//
	LineItemErrorReasonReasonInvalidLineItemTypeForDeliveryForecastSource = "INVALID_LINE_ITEM_TYPE_FOR_DELIVERY_FORECAST_SOURCE"

	// LineItemErrorReasonReasonInvalidTotalCustomPacingGoalAmounts
	//
	// The sum of the custom pacing goal amounts is invalid.
	//
	LineItemErrorReasonReasonInvalidTotalCustomPacingGoalAmounts = "INVALID_TOTAL_CUSTOM_PACING_GOAL_AMOUNTS"

	// LineItemErrorReasonReasonCopyLineItemWithCustomPacingCurveFullyInPastNotAllowed
	//
	// Copying line items with custom pacing curves that are totally in the past is not allowed.
	//
	LineItemErrorReasonReasonCopyLineItemWithCustomPacingCurveFullyInPastNotAllowed = "COPY_LINE_ITEM_WITH_CUSTOM_PACING_CURVE_FULLY_IN_PAST_NOT_ALLOWED"

	// LineItemErrorReasonReasonLastCustomPacingGoalAmountCannotBeZero
	//
	// The last custom pacing goal cannot be zero.
	//
	LineItemErrorReasonReasonLastCustomPacingGoalAmountCannotBeZero = "LAST_CUSTOM_PACING_GOAL_AMOUNT_CANNOT_BE_ZERO"

	// LineItemErrorReasonReasonGrpPacedLineItemCannotHaveAbsoluteCustomPacingCurveGoals
	//
	// GRP paced line items cannot have absolute custom pacing curve goals.
	//
	LineItemErrorReasonReasonGrpPacedLineItemCannotHaveAbsoluteCustomPacingCurveGoals = "GRP_PACED_LINE_ITEM_CANNOT_HAVE_ABSOLUTE_CUSTOM_PACING_CURVE_GOALS"

	// LineItemErrorReasonReasonInvalidMaxVideoCreativeDuration
	//
	// {@link LineItem line item} has invalid video creative duration.
	//
	LineItemErrorReasonReasonInvalidMaxVideoCreativeDuration = "INVALID_MAX_VIDEO_CREATIVE_DURATION"

	// LineItemErrorReasonReasonInvalidNativeSize
	//
	// Native size services must by 1x1.
	//
	LineItemErrorReasonReasonInvalidNativeSize = "INVALID_NATIVE_SIZE"

	// LineItemErrorReasonReasonInvalidTargetedRequestPlatformForWebPropertyCode
	//
	// For AdExchange Line Items, the targeted request platform must match the syndication type of
	// the web property code.
	//
	LineItemErrorReasonReasonInvalidTargetedRequestPlatformForWebPropertyCode = "INVALID_TARGETED_REQUEST_PLATFORM_FOR_WEB_PROPERTY_CODE"

	// LineItemErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	LineItemErrorReasonReasonUnknown = "UNKNOWN"
)

// NotNullErrorReasonReason
//
// The reasons for the target error.
const (

	// NotNullErrorReasonReasonArg1Null
	//
	// Assuming that a method will not have more than 3 arguments, if it does,
	// return NULL
	//
	NotNullErrorReasonReasonArg1Null = "ARG1_NULL"

	// NotNullErrorReasonReasonArg2Null
	NotNullErrorReasonReasonArg2Null = "ARG2_NULL"

	// NotNullErrorReasonReasonArg3Null
	NotNullErrorReasonReasonArg3Null = "ARG3_NULL"

	// NotNullErrorReasonReasonNull
	NotNullErrorReasonReasonNull = "NULL"

	// NotNullErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	NotNullErrorReasonReasonUnknown = "UNKNOWN"
)

// NullErrorReasonReason
//
// The reasons for the validation error.
const (

	// NullErrorReasonReasonNullContent
	//
	// Specified list/container must not contain any null elements
	//
	NullErrorReasonReasonNullContent = "NULL_CONTENT"
)

// OrderErrorReasonReason
//
// The reasons for the target error.
const (

	// OrderErrorReasonReasonUpdateCanceledOrderNotAllowed
	//
	// Updating a canceled order is not allowed.
	//
	OrderErrorReasonReasonUpdateCanceledOrderNotAllowed = "UPDATE_CANCELED_ORDER_NOT_ALLOWED"

	// OrderErrorReasonReasonUpdatePendingApprovalOrderNotAllowed
	//
	// Updating an order that has its approval pending is not allowed.
	//
	OrderErrorReasonReasonUpdatePendingApprovalOrderNotAllowed = "UPDATE_PENDING_APPROVAL_ORDER_NOT_ALLOWED"

	// OrderErrorReasonReasonUpdateArchivedOrderNotAllowed
	//
	// Updating an archived order is not allowed.
	//
	OrderErrorReasonReasonUpdateArchivedOrderNotAllowed = "UPDATE_ARCHIVED_ORDER_NOT_ALLOWED"

	// OrderErrorReasonReasonCannotModifyProposalId
	//
	// DSM can set the proposal ID only at the time of creation of order.
	// Setting or changing proposal ID at the time of order update is not
	// allowed.
	//
	OrderErrorReasonReasonCannotModifyProposalId = "CANNOT_MODIFY_PROPOSAL_ID"

	// OrderErrorReasonReasonPrimaryUserRequired
	//
	// Cannot have secondary user without a primary user.
	//
	OrderErrorReasonReasonPrimaryUserRequired = "PRIMARY_USER_REQUIRED"

	// OrderErrorReasonReasonPrimaryUserCannotBeSecondary
	//
	// Primary user cannot be added as a secondary user too.
	//
	OrderErrorReasonReasonPrimaryUserCannotBeSecondary = "PRIMARY_USER_CANNOT_BE_SECONDARY"

	// OrderErrorReasonReasonOrderTeamNotAssociatedWithAdvertiser
	//
	// A team associated with the order must also be associated with the
	// advertiser.
	//
	OrderErrorReasonReasonOrderTeamNotAssociatedWithAdvertiser = "ORDER_TEAM_NOT_ASSOCIATED_WITH_ADVERTISER"

	// OrderErrorReasonReasonUserNotOnOrdersTeams
	//
	// The user assigned to the order, like salesperson or trafficker, must
	// be on one of the order's teams.
	//
	OrderErrorReasonReasonUserNotOnOrdersTeams = "USER_NOT_ON_ORDERS_TEAMS"

	// OrderErrorReasonReasonAgencyNotOnOrdersTeams
	//
	// The agency assigned to the order must belong to one of the order's teams.
	//
	OrderErrorReasonReasonAgencyNotOnOrdersTeams = "AGENCY_NOT_ON_ORDERS_TEAMS"

	// OrderErrorReasonReasonInvalidFieldsSetForNonProgrammaticOrder
	//
	// Programmatic info fields should not be set for a non-programmatic order.
	//
	OrderErrorReasonReasonInvalidFieldsSetForNonProgrammaticOrder = "INVALID_FIELDS_SET_FOR_NON_PROGRAMMATIC_ORDER"

	// OrderErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	OrderErrorReasonReasonUnknown = "UNKNOWN"
)

// ParseErrorReasonReason
//
// The reasons for the target error.
const (

	// ParseErrorReasonReasonUnparsable
	//
	// Indicates an error in parsing an attribute.
	//
	ParseErrorReasonReasonUnparsable = "UNPARSABLE"

	// ParseErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ParseErrorReasonReasonUnknown = "UNKNOWN"
)

// PermissionErrorReasonReason
//
// Describes reasons for permission errors.
const (

	// PermissionErrorReasonReasonPermissionDenied
	//
	// User does not have the required permission for the request.
	//
	PermissionErrorReasonReasonPermissionDenied = "PERMISSION_DENIED"

	// PermissionErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PermissionErrorReasonReasonUnknown = "UNKNOWN"
)

// PublisherQueryLanguageContextErrorReasonReason
//
// The reasons for the target error.
const (

	// PublisherQueryLanguageContextErrorReasonReasonUnexecutable
	//
	// Indicates that there was an error executing the PQL.
	//
	PublisherQueryLanguageContextErrorReasonReasonUnexecutable = "UNEXECUTABLE"

	// PublisherQueryLanguageContextErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PublisherQueryLanguageContextErrorReasonReasonUnknown = "UNKNOWN"
)

// PublisherQueryLanguageSyntaxErrorReasonReason
//
// The reasons for the target error.
const (

	// PublisherQueryLanguageSyntaxErrorReasonReasonUnparsable
	//
	// Indicates that there was a PQL syntax error.
	//
	PublisherQueryLanguageSyntaxErrorReasonReasonUnparsable = "UNPARSABLE"

	// PublisherQueryLanguageSyntaxErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PublisherQueryLanguageSyntaxErrorReasonReasonUnknown = "UNKNOWN"
)

// QuotaErrorReasonReason
const (

	// QuotaErrorReasonReasonExceededQuota
	//
	// The number of requests made per second is too high and has exceeded the
	// allowable limit. The recommended approach to handle this error is to wait
	// about 5 seconds and then retry the request. Note that this does not
	// guarantee the request will succeed. If it fails again, try increasing the
	// wait time.
	// <p>Another way to mitigate this error is to limit requests to 8 per second for Ad Manager
	// 360 accounts, or 2 per second for Ad Manager accounts. Once again
	// this does not guarantee that every request will succeed, but may help
	// reduce the number of times you receive this error.
	//
	QuotaErrorReasonReasonExceededQuota = "EXCEEDED_QUOTA"

	// QuotaErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	QuotaErrorReasonReasonUnknown = "UNKNOWN"

	// QuotaErrorReasonReasonReportJobLimit
	//
	// This user has exceeded the allowed number of new report requests per hour
	// (this includes both reports run via the UI and reports
	// run via {@link ReportService#runReportJob}).
	// The recommended approach to handle this error is to wait about 10 minutes
	// and then retry the request. Note that this does not guarantee the request
	// will succeed. If it fails again, try increasing the wait time.
	// <p>Another way to mitigate this error is to limit the number of new report
	// requests to 250 per hour per user. Once again, this does not guarantee that
	// every request will succeed, but may help reduce the number of times you
	// receive this error.
	//
	QuotaErrorReasonReasonReportJobLimit = "REPORT_JOB_LIMIT"

	// QuotaErrorReasonReasonSegmentPopulationLimit
	//
	// This network has exceeded the allowed number of identifiers uploaded within a 24 hour period.
	// The recommended approach to handle this error is to wait 30 minutes and then retry the
	// request. Note that this does not guarantee the request will succeed. If it fails again, try
	// increasing the wait time.
	//
	QuotaErrorReasonReasonSegmentPopulationLimit = "SEGMENT_POPULATION_LIMIT"
)

// RangeErrorReasonReason
const (

	// RangeErrorReasonReasonTooHigh
	RangeErrorReasonReasonTooHigh = "TOO_HIGH"

	// RangeErrorReasonReasonTooLow
	RangeErrorReasonReasonTooLow = "TOO_LOW"

	// RangeErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RangeErrorReasonReasonUnknown = "UNKNOWN"
)

// RequiredCollectionErrorReasonReason
const (

	// RequiredCollectionErrorReasonReasonRequired
	//
	// A required collection is missing.
	//
	RequiredCollectionErrorReasonReasonRequired = "REQUIRED"

	// RequiredCollectionErrorReasonReasonTooLarge
	//
	// Collection size is too large.
	//
	RequiredCollectionErrorReasonReasonTooLarge = "TOO_LARGE"

	// RequiredCollectionErrorReasonReasonTooSmall
	//
	// Collection size is too small.
	//
	RequiredCollectionErrorReasonReasonTooSmall = "TOO_SMALL"

	// RequiredCollectionErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RequiredCollectionErrorReasonReasonUnknown = "UNKNOWN"
)

// RequiredErrorReasonReason
//
// The reasons for the target error.
const (

	// RequiredErrorReasonReasonRequired
	//
	// Missing required field.
	//
	RequiredErrorReasonReasonRequired = "REQUIRED"
)

// RequiredNumberErrorReasonReason
//
// Describes reasons for a number to be invalid.
const (

	// RequiredNumberErrorReasonReasonRequired
	RequiredNumberErrorReasonReasonRequired = "REQUIRED"

	// RequiredNumberErrorReasonReasonTooLarge
	RequiredNumberErrorReasonReasonTooLarge = "TOO_LARGE"

	// RequiredNumberErrorReasonReasonTooSmall
	RequiredNumberErrorReasonReasonTooSmall = "TOO_SMALL"

	// RequiredNumberErrorReasonReasonTooLargeWithDetails
	RequiredNumberErrorReasonReasonTooLargeWithDetails = "TOO_LARGE_WITH_DETAILS"

	// RequiredNumberErrorReasonReasonTooSmallWithDetails
	RequiredNumberErrorReasonReasonTooSmallWithDetails = "TOO_SMALL_WITH_DETAILS"

	// RequiredNumberErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RequiredNumberErrorReasonReasonUnknown = "UNKNOWN"
)

// RequiredSizeErrorReasonReason
const (

	// RequiredSizeErrorReasonReasonRequired
	//
	// {@link Creative#size} or {@link LineItem#creativePlaceholders} size is
	// missing.
	//
	RequiredSizeErrorReasonReasonRequired = "REQUIRED"

	// RequiredSizeErrorReasonReasonNotAllowed
	//
	// {@link LineItemCreativeAssociation#sizes} must be a subset of
	// {@link LineItem#creativePlaceholders} sizes.
	//
	RequiredSizeErrorReasonReasonNotAllowed = "NOT_ALLOWED"

	// RequiredSizeErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RequiredSizeErrorReasonReasonUnknown = "UNKNOWN"
)

// RichMediaStudioCreativeErrorReasonReason
//
// The reasons for the target error.
const (

	// RichMediaStudioCreativeErrorReasonReasonCreationNotAllowed
	//
	// Only Studio can create a {@code RichMediaStudioCreative}.
	//
	RichMediaStudioCreativeErrorReasonReasonCreationNotAllowed = "CREATION_NOT_ALLOWED"

	// RichMediaStudioCreativeErrorReasonReasonUknownError
	//
	// Unknown error
	//
	RichMediaStudioCreativeErrorReasonReasonUknownError = "UKNOWN_ERROR"

	// RichMediaStudioCreativeErrorReasonReasonInvalidCodeGenerationRequest
	//
	// Invalid request indicating missing/invalid request parameters.
	//
	RichMediaStudioCreativeErrorReasonReasonInvalidCodeGenerationRequest = "INVALID_CODE_GENERATION_REQUEST"

	// RichMediaStudioCreativeErrorReasonReasonInvalidCreativeObject
	//
	// Invalid creative object.
	//
	RichMediaStudioCreativeErrorReasonReasonInvalidCreativeObject = "INVALID_CREATIVE_OBJECT"

	// RichMediaStudioCreativeErrorReasonReasonStudioConnectionError
	//
	// Unable to connect to Rich Media Studio to save the creative. Please try again later.
	//
	RichMediaStudioCreativeErrorReasonReasonStudioConnectionError = "STUDIO_CONNECTION_ERROR"

	// RichMediaStudioCreativeErrorReasonReasonPushdownDurationNotAllowed
	//
	// The push down duration is not allowed
	//
	RichMediaStudioCreativeErrorReasonReasonPushdownDurationNotAllowed = "PUSHDOWN_DURATION_NOT_ALLOWED"

	// RichMediaStudioCreativeErrorReasonReasonInvalidPosition
	//
	// The position is invalid
	//
	RichMediaStudioCreativeErrorReasonReasonInvalidPosition = "INVALID_POSITION"

	// RichMediaStudioCreativeErrorReasonReasonInvalidZIndex
	//
	// The Z-index is invalid
	//
	RichMediaStudioCreativeErrorReasonReasonInvalidZIndex = "INVALID_Z_INDEX"

	// RichMediaStudioCreativeErrorReasonReasonInvalidPushdownDuration
	//
	// The push-down duration is invalid
	//
	RichMediaStudioCreativeErrorReasonReasonInvalidPushdownDuration = "INVALID_PUSHDOWN_DURATION"

	// RichMediaStudioCreativeErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RichMediaStudioCreativeErrorReasonReasonUnknown = "UNKNOWN"
)

// ServerErrorReasonReason
//
// Describes reasons for server errors
const (

	// ServerErrorReasonReasonServerError
	//
	// Indicates that an unexpected error occured.
	//
	ServerErrorReasonReasonServerError = "SERVER_ERROR"

	// ServerErrorReasonReasonServerBusy
	//
	// Indicates that the server is currently experiencing a high load. Please
	// wait and try your request again.
	//
	ServerErrorReasonReasonServerBusy = "SERVER_BUSY"

	// ServerErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ServerErrorReasonReasonUnknown = "UNKNOWN"
)

// SetTopBoxCreativeErrorReasonReason
//
// Error reasons for set-top box creatives.
const (

	// SetTopBoxCreativeErrorReasonReasonExternalAssetIdImmutable
	//
	// Set-top box creative external asset IDs are immutable after creation.
	//
	SetTopBoxCreativeErrorReasonReasonExternalAssetIdImmutable = "EXTERNAL_ASSET_ID_IMMUTABLE"

	// SetTopBoxCreativeErrorReasonReasonExternalAssetIdRequired
	//
	// Set-top box creatives require an external asset ID.
	//
	SetTopBoxCreativeErrorReasonReasonExternalAssetIdRequired = "EXTERNAL_ASSET_ID_REQUIRED"

	// SetTopBoxCreativeErrorReasonReasonProviderIdImmutable
	//
	// Set-top box creative provider IDs are immutable after creation.
	//
	SetTopBoxCreativeErrorReasonReasonProviderIdImmutable = "PROVIDER_ID_IMMUTABLE"

	// SetTopBoxCreativeErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	SetTopBoxCreativeErrorReasonReasonUnknown = "UNKNOWN"
)

// StartDateTimeType
//
// Specifies the start type to use for an entity with a start date time field.
// For example, a {@link LineItem} or {@link LineItemCreativeAssociation}.
type StartDateTimeType string

const (

	// StartDateTimeTypeUseStartDateTime
	//
	// Use the value in {@link #startDateTime}.
	//
	StartDateTimeTypeUseStartDateTime StartDateTimeType = "USE_START_DATE_TIME"

	// StartDateTimeTypeImmediately
	//
	// The entity will start serving immediately. {@link #startDateTime} in the
	// request is ignored and will be set to the current time. Additionally,
	// {@link #startDateTimeType} will be set to
	// {@link StartDateTimeType#USE_START_DATE_TIME}.
	//
	StartDateTimeTypeImmediately StartDateTimeType = "IMMEDIATELY"

	// StartDateTimeTypeOneHourFromNow
	//
	// The entity will start serving one hour from now. {@link #startDateTime}
	// in the request is ignored and will be set to one hour from the current
	// time. Additionally, {@link #startDateTimeType} will be set to
	// {@link StartDateTimeType#USE_START_DATE_TIME}.
	//
	StartDateTimeTypeOneHourFromNow StartDateTimeType = "ONE_HOUR_FROM_NOW"

	// StartDateTimeTypeUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	StartDateTimeTypeUnknown StartDateTimeType = "UNKNOWN"
)

// StatementErrorReasonReason
const (

	// StatementErrorReasonReasonVariableNotBoundToValue
	//
	// A bind variable has not been bound to a value.
	//
	StatementErrorReasonReasonVariableNotBoundToValue = "VARIABLE_NOT_BOUND_TO_VALUE"

	// StatementErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	StatementErrorReasonReasonUnknown = "UNKNOWN"
)

// StringFormatErrorReasonReason
//
// The reasons for the target error.
const (

	// StringFormatErrorReasonReasonUnknown
	StringFormatErrorReasonReasonUnknown = "UNKNOWN"

	// StringFormatErrorReasonReasonIllegalChars
	//
	// The input string value contains disallowed characters.
	//
	StringFormatErrorReasonReasonIllegalChars = "ILLEGAL_CHARS"

	// StringFormatErrorReasonReasonInvalidFormat
	//
	// The input string value is invalid for the associated field.
	//
	StringFormatErrorReasonReasonInvalidFormat = "INVALID_FORMAT"
)

// StringLengthErrorReasonReason
const (

	// StringLengthErrorReasonReasonTooLong
	StringLengthErrorReasonReasonTooLong = "TOO_LONG"

	// StringLengthErrorReasonReasonTooShort
	StringLengthErrorReasonReasonTooShort = "TOO_SHORT"

	// StringLengthErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	StringLengthErrorReasonReasonUnknown = "UNKNOWN"
)

// SwiffyConversionErrorReasonReason
//
// Error reason for {@link SwiffyConversionError}.
const (

	// SwiffyConversionErrorReasonReasonServerError
	//
	// Indicates the Swiffy service has an internal error that prevents the flash
	// asset being converted.
	//
	SwiffyConversionErrorReasonReasonServerError = "SERVER_ERROR"

	// SwiffyConversionErrorReasonReasonInvalidFlashFile
	//
	// Indicates the uploaded flash asset is not a valid flash file.
	//
	SwiffyConversionErrorReasonReasonInvalidFlashFile = "INVALID_FLASH_FILE"

	// SwiffyConversionErrorReasonReasonUnsupportedFlash
	//
	// Indicates the Swiffy service currently does not support converting this
	// flash asset.
	//
	SwiffyConversionErrorReasonReasonUnsupportedFlash = "UNSUPPORTED_FLASH"

	// SwiffyConversionErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	SwiffyConversionErrorReasonReasonUnknown = "UNKNOWN"
)

// TemplateInstantiatedCreativeErrorReasonReason
//
// The reason for the error
const (

	// TemplateInstantiatedCreativeErrorReasonReasonInactiveCreativeTemplate
	//
	// A new creative cannot be created from an inactive creative template.
	//
	TemplateInstantiatedCreativeErrorReasonReasonInactiveCreativeTemplate = "INACTIVE_CREATIVE_TEMPLATE"

	// TemplateInstantiatedCreativeErrorReasonReasonFileTypeNotAllowed
	//
	// An uploaded file type is not allowed
	//
	TemplateInstantiatedCreativeErrorReasonReasonFileTypeNotAllowed = "FILE_TYPE_NOT_ALLOWED"

	// TemplateInstantiatedCreativeErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	TemplateInstantiatedCreativeErrorReasonReasonUnknown = "UNKNOWN"
)

// TranscodingErrorReasonReason
//
// The type of transcode request rejection.
const (

	// TranscodingErrorReasonReasonCannotCopyCreativePendingTranscode
	//
	// The request to copy the creative(s) was rejected because the source is not transcoded.
	//
	TranscodingErrorReasonReasonCannotCopyCreativePendingTranscode = "CANNOT_COPY_CREATIVE_PENDING_TRANSCODE"

	// TranscodingErrorReasonReasonCannotCopyInvalidCreative
	//
	// The request to copy the creative(s) was rejected because the source is invalid.
	//
	TranscodingErrorReasonReasonCannotCopyInvalidCreative = "CANNOT_COPY_INVALID_CREATIVE"

	// TranscodingErrorReasonReasonTranscodingIsInProgress
	//
	// The creative is still being transcoded or processed. Please try again later.
	//
	TranscodingErrorReasonReasonTranscodingIsInProgress = "TRANSCODING_IS_IN_PROGRESS"

	// TranscodingErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	TranscodingErrorReasonReasonUnknown = "UNKNOWN"
)

// createLineItemCreativeAssociations
//
// Creates new {@link LineItemCreativeAssociation} objects
type CreateLineItemCreativeAssociations struct {
	LineItemCreativeAssociations []*LineItemCreativeAssociation `xml:"lineItemCreativeAssociations"`
}

// createLineItemCreativeAssociationsResponse
type CreateLineItemCreativeAssociationsResponse struct {
	Rval []*LineItemCreativeAssociation `xml:"rval"`
}

// getLineItemCreativeAssociationsByStatement
//
// Gets a {@link LineItemCreativeAssociationPage} of {@link LineItemCreativeAssociation} objects
// that satisfy the given {@link Statement#query}. The following fields are supported for
// filtering:
//
// <table>
// <tr>
// <th scope="col">PQL Property</th> <th scope="col">Object Property</th>
// </tr>
// <tr>
// <td>{@code creativeId}</td>
// <td>{@link LineItemCreativeAssociation#creativeId}</td>
// </tr>
// <tr>
// <td>{@code manualCreativeRotationWeight}</td>
// <td>{@link LineItemCreativeAssociation#manualCreativeRotationWeight}</td>
// </tr>
// <tr>
// <td>{@code destinationUrl}</td>
// <td>{@link LineItemCreativeAssociation#destinationUrl}</td>
// </tr>
// <tr>
// <td>{@code lineItemId}</td>
// <td>{@link LineItemCreativeAssociation#lineItemId}</td>
// </tr>
// <tr>
// <td>{@code status}</td>
// <td>{@link LineItemCreativeAssociation#status}</td>
// </tr>
// <tr>
// <td>{@code lastModifiedDateTime}</td>
// <td>{@link LineItemCreativeAssociation#lastModifiedDateTime}</td>
// </tr>
// </table>
type GetLineItemCreativeAssociationsByStatement struct {
	FilterStatement *Statement `xml:"filterStatement"`
}

// getLineItemCreativeAssociationsByStatementResponse
type GetLineItemCreativeAssociationsByStatementResponse struct {
	Rval *LineItemCreativeAssociationPage `xml:"rval"`
}

// getPreviewUrl
//
// Returns an insite preview URL that references the specified site URL with the specified
// creative from the association served to it. For Creative Set previewing you may specify the
// master creative Id.
type GetPreviewUrl struct {
	LineItemId *int64 `xml:"lineItemId"`

	CreativeId *int64 `xml:"creativeId"`

	SiteUrl *string `xml:"siteUrl"`
}

// getPreviewUrlResponse
type GetPreviewUrlResponse struct {
	Rval *string `xml:"rval"`
}

// getPreviewUrlsForNativeStyles
//
// Returns a list of URLs that reference the specified site URL with the specified creative from
// the association served to it. For Creative Set previewing you may specify the master creative
// Id. Each URL corresponds to one available native style for previewing the specified creative.
type GetPreviewUrlsForNativeStyles struct {
	LineItemId *int64 `xml:"lineItemId"`

	CreativeId *int64 `xml:"creativeId"`

	SiteUrl *string `xml:"siteUrl"`
}

// getPreviewUrlsForNativeStylesResponse
type GetPreviewUrlsForNativeStylesResponse struct {
	Rval []*CreativeNativeStylePreview `xml:"rval"`
}

// performLineItemCreativeAssociationAction
//
// Performs actions on {@link LineItemCreativeAssociation} objects that match the given {@link
// Statement#query}.
type PerformLineItemCreativeAssociationAction struct {
	LineItemCreativeAssociationAction *LineItemCreativeAssociationAction `xml:"lineItemCreativeAssociationAction"`

	FilterStatement *Statement `xml:"filterStatement"`
}

// performLineItemCreativeAssociationActionResponse
type PerformLineItemCreativeAssociationActionResponse struct {
	Rval *UpdateResult `xml:"rval"`
}

// pushCreativeToDevices
//
// Pushes a creative to devices that that satisfy the given {@link Statement#query}. *
type PushCreativeToDevices struct {
	FilterStatement *Statement `xml:"filterStatement"`

	Options *CreativePushOptions `xml:"options"`
}

// pushCreativeToDevicesResponse
type PushCreativeToDevicesResponse struct {
	Rval *UpdateResult `xml:"rval"`
}

// updateLineItemCreativeAssociations
//
// Updates the specified {@link LineItemCreativeAssociation} objects
type UpdateLineItemCreativeAssociations struct {
	LineItemCreativeAssociations []*LineItemCreativeAssociation `xml:"lineItemCreativeAssociations"`
}

// updateLineItemCreativeAssociationsResponse
type UpdateLineItemCreativeAssociationsResponse struct {
	Rval []*LineItemCreativeAssociation `xml:"rval"`
}

// RequestHeader
type RequestHeader struct {
}

// ResponseHeader
type ResponseHeader struct {
}
