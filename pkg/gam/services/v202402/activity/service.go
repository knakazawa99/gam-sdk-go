// Code generated by gamwsdl/main.go. DO NOT EDIT.
package activity

import (
	"context"
	"encoding/xml"
	"fmt"

	"github.com/knakazawa99/gam-sdk-go/pkg/gam/requestbody"
	"github.com/knakazawa99/gam-sdk-go/pkg/gam/soap"
	gamxml "github.com/knakazawa99/gam-sdk-go/pkg/xml"
)

const (
	wsdl = "https://ads.google.com/apis/ads/publisher/v202402/ActivityService"

	OperationCreateActivities = "createActivities"

	OperationGetActivitiesByStatement = "getActivitiesByStatement"

	OperationUpdateActivities = "updateActivities"
)

// ActivityServiceInterface
//
// As of February 22, 2024 this service will become read only as part of Spotlight deprecation, <a
// href="https://support.google.com/admanager/answer/7519021#spotlight">learn more</a>.
//
// <p>Provides methods for creating, updating and retrieving {@link Activity} objects.
//
// <p>An activity group contains {@link Activity} objects. Activities have a many-to-one
// relationship with activity groups, meaning each activity can belong to only one activity group,
// but activity groups can have multiple activities. An activity group can be used to manage the
// activities it contains.
type ActivityServiceInterface interface {

	// CreateActivities
	//
	// Creates a new {@link Activity} objects.
	//
	CreateActivities(ctx context.Context, input CreateActivities) (*CreateActivitiesResponse, error)

	// GetActivitiesByStatement
	//
	// Gets an {@link ActivityPage} of {@link Activity} objects that satisfy the given {@link
	// Statement#query}. The following fields are supported for filtering:
	//
	// <table>
	// <tr>
	// <th scope="col">PQL Property</th> <th scope="col">Object Property</th>
	// </tr>
	// <tr>
	// <td>{@code id}</td>
	// <td>{@link Activity#id}</td>
	// </tr>
	// <tr>
	// <td>{@code name}</td>
	// <td>{@link Activity#name}</td>
	// </tr>
	// <tr>
	// <td>{@code expectedURL}</td>
	// <td>{@link Activity#expectedURL}</td>
	// </tr>
	// <tr>
	// <td>{@code status}</td>
	// <td>{@link Activity#status}</td>
	// </tr>
	// <tr>
	// <td>{@code activityGroupId}</td>
	// <td>{@link Activity#activityGroupId}</td>
	// </tr>
	// </table>
	//
	GetActivitiesByStatement(ctx context.Context, input GetActivitiesByStatement) (*GetActivitiesByStatementResponse, error)

	// UpdateActivities
	//
	// Updates the specified {@link Activity} objects.
	//
	UpdateActivities(ctx context.Context, input UpdateActivities) (*UpdateActivitiesResponse, error)
}

type Envelope struct {
	xmlName xml.Name `xml:"Envelope"`
	Body    Body     `xml:"Body"`
}

type Body struct {
	xmlName xml.Name   `xml:"Body"`
	Fault   soap.Fault `xml:"Fault"`

	// CreateActivitiesResponse
	//
	// Creates a new {@link Activity} objects.
	//
	CreateActivitiesResponse CreateActivitiesResponse `xml:"createActivitiesResponse"`

	// GetActivitiesByStatementResponse
	//
	// Gets an {@link ActivityPage} of {@link Activity} objects that satisfy the given {@link
	// Statement#query}. The following fields are supported for filtering:
	//
	// <table>
	// <tr>
	// <th scope="col">PQL Property</th> <th scope="col">Object Property</th>
	// </tr>
	// <tr>
	// <td>{@code id}</td>
	// <td>{@link Activity#id}</td>
	// </tr>
	// <tr>
	// <td>{@code name}</td>
	// <td>{@link Activity#name}</td>
	// </tr>
	// <tr>
	// <td>{@code expectedURL}</td>
	// <td>{@link Activity#expectedURL}</td>
	// </tr>
	// <tr>
	// <td>{@code status}</td>
	// <td>{@link Activity#status}</td>
	// </tr>
	// <tr>
	// <td>{@code activityGroupId}</td>
	// <td>{@link Activity#activityGroupId}</td>
	// </tr>
	// </table>
	//
	GetActivitiesByStatementResponse GetActivitiesByStatementResponse `xml:"getActivitiesByStatementResponse"`

	// UpdateActivitiesResponse
	//
	// Updates the specified {@link Activity} objects.
	//
	UpdateActivitiesResponse UpdateActivitiesResponse `xml:"updateActivitiesResponse"`
}

type Service struct {
	client          soap.Client
	wsdl            string
	networkCode     int
	applicationName string
}

func NewService(client soap.Client, networkCode int, applicationName string) ActivityServiceInterface {
	return &Service{
		client:          client,
		wsdl:            wsdl,
		networkCode:     networkCode,
		applicationName: applicationName,
	}
}

// ActivityServiceInterface
//
// As of February 22, 2024 this service will become read only as part of Spotlight deprecation, <a
// href="https://support.google.com/admanager/answer/7519021#spotlight">learn more</a>.
//
// <p>Provides methods for creating, updating and retrieving {@link Activity} objects.
//
// <p>An activity group contains {@link Activity} objects. Activities have a many-to-one
// relationship with activity groups, meaning each activity can belong to only one activity group,
// but activity groups can have multiple activities. An activity group can be used to manage the
// activities it contains.
//

// CreateActivities
//
// Creates a new {@link Activity} objects.
func (s *Service) CreateActivities(ctx context.Context, input CreateActivities) (*CreateActivitiesResponse, error) {
	parameterXML, err := gamxml.DeepMarshal(input, true)
	data := requestbody.DefaultRequestBody{
		NetworkCode:     s.networkCode,
		ApplicationName: s.applicationName,
		OperationName:   OperationCreateActivities,
		Parameters:      string(parameterXML),
	}

	soapBody, err := requestbody.GenerateDefaultRequestSoapBody(data)
	if err != nil {
		return nil, fmt.Errorf("failed to generate soap body: %w", err)
	}

	body, err := s.client.Call(ctx, s.wsdl, soapBody)
	if err != nil {
		return nil, err
	}

	var envelope Envelope
	if err := xml.Unmarshal(body, &envelope); err != nil {
		return nil, err
	}

	if envelope.Body.Fault.Detail.APIExecutionFault != nil {
		apiExceptionFaultErrors := envelope.Body.Fault.Detail.APIExecutionFault.Errors[0]
		return nil, RaiseError(apiExceptionFaultErrors.ErrorType, apiExceptionFaultErrors.Reason)
	}
	return &envelope.Body.CreateActivitiesResponse, nil
}

// GetActivitiesByStatement
//
// Gets an {@link ActivityPage} of {@link Activity} objects that satisfy the given {@link
// Statement#query}. The following fields are supported for filtering:
//
// <table>
// <tr>
// <th scope="col">PQL Property</th> <th scope="col">Object Property</th>
// </tr>
// <tr>
// <td>{@code id}</td>
// <td>{@link Activity#id}</td>
// </tr>
// <tr>
// <td>{@code name}</td>
// <td>{@link Activity#name}</td>
// </tr>
// <tr>
// <td>{@code expectedURL}</td>
// <td>{@link Activity#expectedURL}</td>
// </tr>
// <tr>
// <td>{@code status}</td>
// <td>{@link Activity#status}</td>
// </tr>
// <tr>
// <td>{@code activityGroupId}</td>
// <td>{@link Activity#activityGroupId}</td>
// </tr>
// </table>
func (s *Service) GetActivitiesByStatement(ctx context.Context, input GetActivitiesByStatement) (*GetActivitiesByStatementResponse, error) {
	parameterXML, err := gamxml.DeepMarshal(input, true)
	data := requestbody.DefaultRequestBody{
		NetworkCode:     s.networkCode,
		ApplicationName: s.applicationName,
		OperationName:   OperationGetActivitiesByStatement,
		Parameters:      string(parameterXML),
	}

	soapBody, err := requestbody.GenerateDefaultRequestSoapBody(data)
	if err != nil {
		return nil, fmt.Errorf("failed to generate soap body: %w", err)
	}

	body, err := s.client.Call(ctx, s.wsdl, soapBody)
	if err != nil {
		return nil, err
	}

	var envelope Envelope
	if err := xml.Unmarshal(body, &envelope); err != nil {
		return nil, err
	}

	if envelope.Body.Fault.Detail.APIExecutionFault != nil {
		apiExceptionFaultErrors := envelope.Body.Fault.Detail.APIExecutionFault.Errors[0]
		return nil, RaiseError(apiExceptionFaultErrors.ErrorType, apiExceptionFaultErrors.Reason)
	}
	return &envelope.Body.GetActivitiesByStatementResponse, nil
}

// UpdateActivities
//
// Updates the specified {@link Activity} objects.
func (s *Service) UpdateActivities(ctx context.Context, input UpdateActivities) (*UpdateActivitiesResponse, error) {
	parameterXML, err := gamxml.DeepMarshal(input, true)
	data := requestbody.DefaultRequestBody{
		NetworkCode:     s.networkCode,
		ApplicationName: s.applicationName,
		OperationName:   OperationUpdateActivities,
		Parameters:      string(parameterXML),
	}

	soapBody, err := requestbody.GenerateDefaultRequestSoapBody(data)
	if err != nil {
		return nil, fmt.Errorf("failed to generate soap body: %w", err)
	}

	body, err := s.client.Call(ctx, s.wsdl, soapBody)
	if err != nil {
		return nil, err
	}

	var envelope Envelope
	if err := xml.Unmarshal(body, &envelope); err != nil {
		return nil, err
	}

	if envelope.Body.Fault.Detail.APIExecutionFault != nil {
		apiExceptionFaultErrors := envelope.Body.Fault.Detail.APIExecutionFault.Errors[0]
		return nil, RaiseError(apiExceptionFaultErrors.ErrorType, apiExceptionFaultErrors.Reason)
	}
	return &envelope.Body.UpdateActivitiesResponse, nil
}
