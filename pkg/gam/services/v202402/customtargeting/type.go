// Code generated by gamwsdl/main.go. DO NOT EDIT.
package customtargeting

import (
	"github.com/knakazawa99/gam-sdk-go/pkg/gam/requestbody"
	gamxml "github.com/knakazawa99/gam-sdk-go/pkg/xml"
)

// ObjectValue
//
// Contains an object value.
// <p>
// <b>This object is experimental!
// <code>ObjectValue</code> is an experimental, innovative, and rapidly
// changing new feature for Ad Manager. Unfortunately, being on the bleeding edge means that
// we may make backwards-incompatible changes to
// <code>ObjectValue</code>. We will inform the community when this feature
// is no longer experimental.</b>
//

type ObjectValue struct {
}

// ActivateCustomTargetingKeys
//
// The action used for activating inactive (i.e. deleted) {@link CustomTargetingKey} objects.
//

type ActivateCustomTargetingKeys struct {
}

func NewActivateCustomTargetingKeys() (requestbody.PerformAction, error) {
	return &ActivateCustomTargetingKeys{}, nil
}
func (a ActivateCustomTargetingKeys) GetPerformActionBody() (string, error) {
	performActionXML, err := gamxml.DeepMarshal(a, true)
	if err != nil {
		return "", err
	}
	return string(performActionXML), nil
}

func (a ActivateCustomTargetingKeys) GetActionType() string {
	return "ActivateCustomTargetingKeys"
}

// ActivateCustomTargetingValues
//
// The action used for activating inactive (i.e. deleted) {@link CustomTargetingValue} objects.
//

type ActivateCustomTargetingValues struct {
}

func NewActivateCustomTargetingValues() (requestbody.PerformAction, error) {
	return &ActivateCustomTargetingValues{}, nil
}
func (a ActivateCustomTargetingValues) GetPerformActionBody() (string, error) {
	performActionXML, err := gamxml.DeepMarshal(a, true)
	if err != nil {
		return "", err
	}
	return string(performActionXML), nil
}

func (a ActivateCustomTargetingValues) GetActionType() string {
	return "ActivateCustomTargetingValues"
}

// ApiError
//
// The API error base class that provides details about an error that occurred
// while processing a service request.
//
// <p>The OGNL field path is provided for parsers to identify the request data
// element that may have caused the error.</p>
//

type ApiError struct {
	Reason string `xml:"reason"`
}

// ApiException
//
// Exception class for holding a list of service errors.
//

type ApiException struct {
	Reason string `xml:"reason"`
}

// ApiVersionError
//
// Errors related to the usage of API versions.
//

type ApiVersionError struct {
	Reason string `xml:"reason"`
}

// ApplicationException
//
// Base class for exceptions.
//

type ApplicationException struct {
	Reason string `xml:"reason"`
}

// AuthenticationError
//
// An error for an exception that occurred when authenticating.
//

type AuthenticationError struct {
	Reason string `xml:"reason"`
}

// BooleanValue
//
// Contains a boolean value.
//

type BooleanValue struct {

	// Value
	//
	// The boolean value.
	//

	Value *bool `xml:"value"`
}

// CollectionSizeError
//
// Error for the size of the collection being too large
//

type CollectionSizeError struct {
	Reason string `xml:"reason"`
}

// CommonError
//
// A place for common errors that can be used across services.
//

type CommonError struct {
	Reason string `xml:"reason"`
}

// CustomTargetingError
//
// Lists all errors related to {@link CustomTargetingKey} and
// {@link CustomTargetingValue} objects.
//

type CustomTargetingError struct {
	Reason string `xml:"reason"`
}

// CustomTargetingKeyAction
//
// Represents the actions that can be performed on {@link CustomTargetingKey} objects.
//

type CustomTargetingKeyAction struct {
}

// CustomTargetingKey
//
// {@code CustomTargetingKey} represents a key used for custom targeting.
//

type CustomTargetingKey struct {

	// Id
	//
	// The ID of the {@code CustomTargetingKey}. This value is readonly and is populated by Google.
	//

	Id *int64 `xml:"id"`

	// Name
	//
	// Name of the key. Keys can contain up to 10 characters each. You can use alphanumeric characters
	// and symbols other than the following: ", ', =, !, +, #, *, ~, ;, ^, (, ), <, >, [, ], the white
	// space character.
	//

	Name *string `xml:"name"`

	// DisplayName
	//
	// Descriptive name for the key.
	//

	DisplayName *string `xml:"displayName"`

	// Type
	//
	// Indicates whether users will select from predefined values or create new targeting values,
	// while specifying targeting criteria for a line item.
	//

	Type *CustomTargetingKeyType `xml:"type"`

	// Status
	//
	// Status of the {@code CustomTargetingKey}. This field is read-only. A key can be activated and
	// deactivated by calling {@link CustomTargetingService#performCustomTargetingKeyAction}.
	//

	Status *CustomTargetingKeyStatus `xml:"status"`

	// ReportableType
	//
	// Reportable state of a {@CustomTargetingKey} as defined in {@link ReportableType}.
	//

	ReportableType *ReportableType `xml:"reportableType"`
}

// CustomTargetingKeyPage
//
// Captures a page of {@link CustomTargetingKey} objects.
//

type CustomTargetingKeyPage struct {

	// TotalResultSetSize
	//
	// The size of the total result set to which this page belongs.
	//

	TotalResultSetSize *int `xml:"totalResultSetSize"`

	// StartIndex
	//
	// The absolute index in the total result set on which this page begins.
	//

	StartIndex *int `xml:"startIndex"`

	// Results
	//
	// The collection of custom targeting keys contained within this page.
	//

	Results []*CustomTargetingKey `xml:"results"`
}

// CustomTargetingValueAction
//
// Represents the actions that can be performed on {@link CustomTargetingValue}
// objects.
//

type CustomTargetingValueAction struct {
}

// CustomTargetingValue
//
// {@code CustomTargetingValue} represents a value used for custom targeting.
//

type CustomTargetingValue struct {

	// CustomTargetingKeyId
	//
	// The ID of the {@code CustomTargetingKey} for which this is the value.
	//

	CustomTargetingKeyId *int64 `xml:"customTargetingKeyId"`

	// Id
	//
	// The ID of the {@code CustomTargetingValue}. This value is readonly and is populated by Google.
	//

	Id *int64 `xml:"id"`

	// Name
	//
	// Name of the value. Values can contain up to 40 characters each. You can use alphanumeric
	// characters and symbols other than the following: ", ', =, !, +, #, *, ~, ;, ^, (, ), <, >, [,
	// ]. Values are not data-specific; all values are treated as string. For example, instead of
	// using "age>=18 AND <=34", try "18-34"
	//

	Name *string `xml:"name"`

	// DisplayName
	//
	// Descriptive name for the value.
	//

	DisplayName *string `xml:"displayName"`

	// MatchType
	//
	// The way in which the {@link CustomTargetingValue#name} strings will be matched.
	//

	MatchType *CustomTargetingValueMatchType `xml:"matchType"`

	// Status
	//
	// Status of the {@code CustomTargetingValue}. This field is read-only. A value can be activated
	// and deactivated by calling {@link CustomTargetingService#performCustomTargetingValueAction}.
	//

	Status *CustomTargetingValueStatus `xml:"status"`
}

// CustomTargetingValuePage
//
// Captures a page of {@link CustomTargetingValue} objects.
//

type CustomTargetingValuePage struct {

	// TotalResultSetSize
	//
	// The size of the total result set to which this page belongs.
	//

	TotalResultSetSize *int `xml:"totalResultSetSize"`

	// StartIndex
	//
	// The absolute index in the total result set on which this page begins.
	//

	StartIndex *int `xml:"startIndex"`

	// Results
	//
	// The collection of custom targeting keys contained within this page.
	//

	Results []*CustomTargetingValue `xml:"results"`
}

// Date
//
// Represents a date.
//

type Date struct {

	// Year
	//
	// Year (e.g., 2009)
	//

	Year *int `xml:"year"`

	// Month
	//
	// Month (1..12)
	//

	Month *int `xml:"month"`

	// Day
	//
	// Day (1..31)
	//

	Day *int `xml:"day"`
}

// DateTime
//
// Represents a date combined with the time of day.
//

type DateTime struct {

	// Date

	Date *Date `xml:"date"`

	// Hour

	Hour *int `xml:"hour"`

	// Minute

	Minute *int `xml:"minute"`

	// Second

	Second *int `xml:"second"`

	// TimeZoneId

	TimeZoneId *string `xml:"timeZoneId"`
}

// DateTimeValue
//
// Contains a date-time value.
//

type DateTimeValue struct {

	// Value
	//
	// The {@code DateTime} value.
	//

	Value *DateTime `xml:"value"`
}

// DateValue
//
// Contains a date value.
//

type DateValue struct {

	// Value
	//
	// The {@code Date} value.
	//

	Value *Date `xml:"value"`
}

// DeleteCustomTargetingKeys
//
// Represents the delete action that can be performed on
// {@link CustomTargetingKey} objects. Deleting a key will not delete the
// {@link CustomTargetingValue} objects associated with it. Also, if a custom
// targeting key that has been deleted is recreated, any previous custom
// targeting values associated with it that were not deleted will continue to
// exist.
//

type DeleteCustomTargetingKeys struct {
}

func NewDeleteCustomTargetingKeys() (requestbody.PerformAction, error) {
	return &DeleteCustomTargetingKeys{}, nil
}
func (a DeleteCustomTargetingKeys) GetPerformActionBody() (string, error) {
	performActionXML, err := gamxml.DeepMarshal(a, true)
	if err != nil {
		return "", err
	}
	return string(performActionXML), nil
}

func (a DeleteCustomTargetingKeys) GetActionType() string {
	return "DeleteCustomTargetingKeys"
}

// DeleteCustomTargetingValues
//
// Represents the delete action that can be performed on
// {@link CustomTargetingValue} objects.
//

type DeleteCustomTargetingValues struct {
}

func NewDeleteCustomTargetingValues() (requestbody.PerformAction, error) {
	return &DeleteCustomTargetingValues{}, nil
}
func (a DeleteCustomTargetingValues) GetPerformActionBody() (string, error) {
	performActionXML, err := gamxml.DeepMarshal(a, true)
	if err != nil {
		return "", err
	}
	return string(performActionXML), nil
}

func (a DeleteCustomTargetingValues) GetActionType() string {
	return "DeleteCustomTargetingValues"
}

// EntityChildrenLimitReachedError
//
// Lists errors relating to having too many children on an entity.
//

type EntityChildrenLimitReachedError struct {
	Reason string `xml:"reason"`
}

// EntityLimitReachedError
//
// An error that occurs when creating an entity if the limit on the number of allowed entities for
// a network has already been reached.
//

type EntityLimitReachedError struct {
	Reason string `xml:"reason"`
}

// FeatureError
//
// Errors related to feature management.  If you attempt using a feature that is not available to
// the current network you'll receive a FeatureError with the missing feature as the trigger.
//

type FeatureError struct {
	Reason string `xml:"reason"`
}

// FieldPathElement
//
// A segment of a field path. Each dot in a field path defines a new segment.
//

type FieldPathElement struct {

	// Field
	//
	// The name of a field in lower camelcase. (e.g. "biddingStrategy")
	//

	Field *string `xml:"field"`

	// Index
	//
	// For list fields, this is a 0-indexed position in the list. Null for non-list fields.
	//

	Index *int `xml:"index"`
}

// InternalApiError
//
// Indicates that a server-side error has occured. {@code InternalApiError}s
// are generally not the result of an invalid request or message sent by the
// client.
//

type InternalApiError struct {
	Reason string `xml:"reason"`
}

// NotNullError
//
// Caused by supplying a null value for an attribute that cannot be null.
//

type NotNullError struct {
	Reason string `xml:"reason"`
}

// NullError
//
// Errors associated with violation of a NOT NULL check.
//

type NullError struct {
	Reason string `xml:"reason"`
}

// NumberValue
//
// Contains a numeric value.
//

type NumberValue struct {

	// Value
	//
	// The numeric value represented as a string.
	//

	Value *string `xml:"value"`
}

// ParseError
//
// Lists errors related to parsing.
//

type ParseError struct {
	Reason string `xml:"reason"`
}

// PermissionError
//
// Errors related to incorrect permission.
//

type PermissionError struct {
	Reason string `xml:"reason"`
}

// PublisherQueryLanguageContextError
//
// An error that occurs while executing a PQL query contained in
// a {@link Statement} object.
//

type PublisherQueryLanguageContextError struct {
	Reason string `xml:"reason"`
}

// PublisherQueryLanguageSyntaxError
//
// An error that occurs while parsing a PQL query contained in a
// {@link Statement} object.
//

type PublisherQueryLanguageSyntaxError struct {
	Reason string `xml:"reason"`
}

// QuotaError
//
// Describes a client-side error on which a user is attempting
// to perform an action to which they have no quota remaining.
//

type QuotaError struct {
	Reason string `xml:"reason"`
}

// RequiredCollectionError
//
// A list of all errors to be used for validating sizes of collections.
//

type RequiredCollectionError struct {
	Reason string `xml:"reason"`
}

// RequiredError
//
// Errors due to missing required field.
//

type RequiredError struct {
	Reason string `xml:"reason"`
}

// ServerError
//
// Errors related to the server.
//

type ServerError struct {
	Reason string `xml:"reason"`
}

// SetValue
//
// Contains a set of {@link Value Values}. May not contain duplicates.
//

type SetValue struct {

	// Value
	*Value

	// Values
	//
	// The values. They must all be the same type of {@code Value} and not contain duplicates.
	//

	Values []*Value `xml:"values"`
}

// SoapRequestHeader
//
// Represents the SOAP request header used by API requests.
//

type SoapRequestHeader struct {

	// NetworkCode
	//
	// The network code to use in the context of a request.
	//

	NetworkCode *string `xml:"networkCode"`

	// ApplicationName
	//
	// The name of client library application.
	//

	ApplicationName *string `xml:"applicationName"`
}

// SoapResponseHeader
//
// Represents the SOAP request header used by API responses.
//

type SoapResponseHeader struct {

	// RequestId

	RequestId *string `xml:"requestId"`

	// ResponseTime

	ResponseTime *int64 `xml:"responseTime"`
}

// Statement
//
// Captures the {@code WHERE}, {@code ORDER BY} and {@code LIMIT} clauses of a
// PQL query. Statements are typically used to retrieve objects of a predefined
// domain type, which makes SELECT clause unnecessary.
// <p>
// An example query text might be {@code "WHERE status = 'ACTIVE' ORDER BY id
// LIMIT 30"}.
// </p>
// <p>
// Statements support bind variables. These are substitutes for literals
// and can be thought of as input parameters to a PQL query.
// </p>
// <p>
// An example of such a query might be {@code "WHERE id = :idValue"}.
// </p>
// <p>
// Statements also support use of the LIKE keyword. This provides wildcard string matching.
// </p>
// <p>
// An example of such a query might be {@code "WHERE name LIKE '%searchString%'"}.
// </p>
// The value for the variable idValue must then be set with an object of type
// {@link Value}, e.g., {@link NumberValue}, {@link TextValue} or
// {@link BooleanValue}.
//

type Statement struct {

	// Query
	//
	// Holds the query in PQL syntax. The syntax is:<br>
	// <code>[WHERE <condition> {[AND | OR] <condition> ...}]</code><br>
	// <code>[ORDER BY <property> [ASC | DESC]]</code><br>
	// <code>[LIMIT {[<offset>,] <count>} | {<count> OFFSET <offset>}]</code><br>
	// <p>
	// <code><condition></code><br>
	// &nbsp;&nbsp;&nbsp;&nbsp;
	// <code>:= <property> {< | <= | > | >= | = | != } <value></code><br>
	// <code><condition></code><br>
	// &nbsp;&nbsp;&nbsp;&nbsp;
	// <code>:= <property> {< | <= | > | >= | = | != } <bind variable></code><br>
	// <code><condition> := <property> IN <list></code><br>
	// <code><condition> := <property> IS NULL</code><br>
	// <code><condition> := <property> LIKE <wildcard%match></code><br>
	// <code><bind variable> := :<name></code><br>
	// </p>
	//

	Query *string `xml:"query"`

	// Values
	//
	// Holds keys and values for bind variables and their values. The key is the
	// name of the bind variable. The value is the literal value of the variable.
	// <p>
	// In the example {@code "WHERE status = :bindStatus ORDER BY id LIMIT 30"},
	// the bind variable, represented by {@code :bindStatus} is named {@code
	// bindStatus}, which would also be the parameter map key. The bind variable's
	// value would be represented by a parameter map value of type
	// {@link TextValue}. The final result, for example, would be an entry of
	// {@code "bindStatus" => StringParam("ACTIVE")}.
	// </p>
	//

	Values []*String_ValueMapEntry `xml:"values"`
}

// StatementError
//
// An error that occurs while parsing {@link Statement} objects.
//

type StatementError struct {
	Reason string `xml:"reason"`
}

// StringFormatError
//
// A list of error code for reporting invalid content of input strings.
//

type StringFormatError struct {
	Reason string `xml:"reason"`
}

// StringLengthError
//
// Errors for Strings which do not meet given length constraints.
//

type StringLengthError struct {
	Reason string `xml:"reason"`
}

// String_ValueMapEntry
//
// This represents an entry in a map with a key of type String
// and value of type Value.
//

type String_ValueMapEntry struct {

	// Key

	Key *string `xml:"key"`

	// Value

	Value *Value `xml:"value"`
}

// TextValue
//
// Contains a string value.
//

type TextValue struct {

	// Value
	//
	// The string value.
	//

	Value *string `xml:"value"`
}

// TypeError
//
// An error for a field which is an invalid type.
//

type TypeError struct {
	Reason string `xml:"reason"`
}

// UniqueError
//
// An error for a field which must satisfy a uniqueness constraint
//

type UniqueError struct {
	Reason string `xml:"reason"`
}

// UpdateResult
//
// Represents the result of performing an action on objects.
//

type UpdateResult struct {

	// NumChanges
	//
	// The number of objects that were changed as a result of performing the
	// action.
	//

	NumChanges *int `xml:"numChanges"`
}

// Value
//
// {@code Value} represents a value.
//

type Value struct {
}

// ApiVersionErrorReasonReason
const (

	// ApiVersionErrorReasonReasonUpdateToNewerVersion
	//
	// Indicates that the operation is not allowed in the version the request
	// was made in.
	//
	ApiVersionErrorReasonReasonUpdateToNewerVersion = "UPDATE_TO_NEWER_VERSION"

	// ApiVersionErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ApiVersionErrorReasonReasonUnknown = "UNKNOWN"
)

// AuthenticationErrorReasonReason
const (

	// AuthenticationErrorReasonReasonAmbiguousSoapRequestHeader
	//
	// The SOAP message contains a request header with an ambiguous definition of the authentication
	// header fields. This means either the {@code authToken} and {@code oAuthToken} fields were
	// both null or both were specified. Exactly one value should be specified with each request.
	//
	AuthenticationErrorReasonReasonAmbiguousSoapRequestHeader = "AMBIGUOUS_SOAP_REQUEST_HEADER"

	// AuthenticationErrorReasonReasonInvalidEmail
	//
	// The login provided is invalid.
	//
	AuthenticationErrorReasonReasonInvalidEmail = "INVALID_EMAIL"

	// AuthenticationErrorReasonReasonAuthenticationFailed
	//
	// Tried to authenticate with provided information, but failed.
	//
	AuthenticationErrorReasonReasonAuthenticationFailed = "AUTHENTICATION_FAILED"

	// AuthenticationErrorReasonReasonInvalidOauthSignature
	//
	// The OAuth provided is invalid.
	//
	AuthenticationErrorReasonReasonInvalidOauthSignature = "INVALID_OAUTH_SIGNATURE"

	// AuthenticationErrorReasonReasonInvalidService
	//
	// The specified service to use was not recognized.
	//
	AuthenticationErrorReasonReasonInvalidService = "INVALID_SERVICE"

	// AuthenticationErrorReasonReasonMissingSoapRequestHeader
	//
	// The SOAP message is missing a request header with an {@code authToken} and optional {@code
	// networkCode}.
	//
	AuthenticationErrorReasonReasonMissingSoapRequestHeader = "MISSING_SOAP_REQUEST_HEADER"

	// AuthenticationErrorReasonReasonMissingAuthenticationHttpHeader
	//
	// The HTTP request is missing a request header with an {@code authToken}
	//
	AuthenticationErrorReasonReasonMissingAuthenticationHttpHeader = "MISSING_AUTHENTICATION_HTTP_HEADER"

	// AuthenticationErrorReasonReasonMissingAuthentication
	//
	// The request is missing an {@code authToken}
	//
	AuthenticationErrorReasonReasonMissingAuthentication = "MISSING_AUTHENTICATION"

	// AuthenticationErrorReasonReasonNetworkApiAccessDisabled
	//
	// The network does not have API access enabled.
	//
	AuthenticationErrorReasonReasonNetworkApiAccessDisabled = "NETWORK_API_ACCESS_DISABLED"

	// AuthenticationErrorReasonReasonNoNetworksToAccess
	//
	// The user is not associated with any network.
	//
	AuthenticationErrorReasonReasonNoNetworksToAccess = "NO_NETWORKS_TO_ACCESS"

	// AuthenticationErrorReasonReasonNetworkNotFound
	//
	// No network for the given {@code networkCode} was found.
	//
	AuthenticationErrorReasonReasonNetworkNotFound = "NETWORK_NOT_FOUND"

	// AuthenticationErrorReasonReasonNetworkCodeRequired
	//
	// The user has access to more than one network, but did not provide a {@code networkCode}.
	//
	AuthenticationErrorReasonReasonNetworkCodeRequired = "NETWORK_CODE_REQUIRED"

	// AuthenticationErrorReasonReasonConnectionError
	//
	// An error happened on the server side during connection to authentication service.
	//
	AuthenticationErrorReasonReasonConnectionError = "CONNECTION_ERROR"

	// AuthenticationErrorReasonReasonGoogleAccountAlreadyAssociatedWithNetwork
	//
	// The user tried to create a test network using an account that already is associated with a
	// network.
	//
	AuthenticationErrorReasonReasonGoogleAccountAlreadyAssociatedWithNetwork = "GOOGLE_ACCOUNT_ALREADY_ASSOCIATED_WITH_NETWORK"

	// AuthenticationErrorReasonReasonUnderInvestigation
	//
	// The account is blocked and under investigation by the collections team. Please contact Google
	// for more information.
	//
	AuthenticationErrorReasonReasonUnderInvestigation = "UNDER_INVESTIGATION"

	// AuthenticationErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	AuthenticationErrorReasonReasonUnknown = "UNKNOWN"
)

// CollectionSizeErrorReasonReason
const (

	// CollectionSizeErrorReasonReasonTooLarge
	CollectionSizeErrorReasonReasonTooLarge = "TOO_LARGE"

	// CollectionSizeErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CollectionSizeErrorReasonReasonUnknown = "UNKNOWN"
)

// CommonErrorReasonReason
//
// Describes reasons for common errors
const (

	// CommonErrorReasonReasonNotFound
	//
	// Indicates that an attempt was made to retrieve an entity that does not
	// exist.
	//
	CommonErrorReasonReasonNotFound = "NOT_FOUND"

	// CommonErrorReasonReasonAlreadyExists
	//
	// Indicates that an attempt was made to create an entity that already
	// exists.
	//
	CommonErrorReasonReasonAlreadyExists = "ALREADY_EXISTS"

	// CommonErrorReasonReasonNotApplicable
	//
	// Indicates that a value is not applicable for given use case.
	//
	CommonErrorReasonReasonNotApplicable = "NOT_APPLICABLE"

	// CommonErrorReasonReasonDuplicateObject
	//
	// Indicates that two elements in the collection were identical.
	//
	CommonErrorReasonReasonDuplicateObject = "DUPLICATE_OBJECT"

	// CommonErrorReasonReasonCannotUpdate
	//
	// Indicates that an attempt was made to change an immutable field.
	//
	CommonErrorReasonReasonCannotUpdate = "CANNOT_UPDATE"

	// CommonErrorReasonReasonUnsupportedOperation
	//
	// Indicates that the requested operation is not supported.
	//
	CommonErrorReasonReasonUnsupportedOperation = "UNSUPPORTED_OPERATION"

	// CommonErrorReasonReasonConcurrentModification
	//
	// Indicates that another request attempted to update the same data in the same network
	// at about the same time. Please wait and try the request again.
	//
	CommonErrorReasonReasonConcurrentModification = "CONCURRENT_MODIFICATION"

	// CommonErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CommonErrorReasonReasonUnknown = "UNKNOWN"
)

// CustomTargetingErrorReasonReason
//
// The reasons for the target error.
const (

	// CustomTargetingErrorReasonReasonKeyNotFound
	//
	// Requested {@link CustomTargetingKey} is not found.
	//
	CustomTargetingErrorReasonReasonKeyNotFound = "KEY_NOT_FOUND"

	// CustomTargetingErrorReasonReasonKeyCountTooLarge
	//
	// Number of {@link CustomTargetingKey} objects created exceeds the limit
	// allowed for the network.
	//
	CustomTargetingErrorReasonReasonKeyCountTooLarge = "KEY_COUNT_TOO_LARGE"

	// CustomTargetingErrorReasonReasonKeyNameDuplicate
	//
	// {@link CustomTargetingKey} with the same {@link CustomTargetingKey#name}
	// already exists.
	//
	CustomTargetingErrorReasonReasonKeyNameDuplicate = "KEY_NAME_DUPLICATE"

	// CustomTargetingErrorReasonReasonKeyNameEmpty
	//
	// {@link CustomTargetingKey#name} is empty.
	//
	CustomTargetingErrorReasonReasonKeyNameEmpty = "KEY_NAME_EMPTY"

	// CustomTargetingErrorReasonReasonKeyNameInvalidLength
	//
	// {@link CustomTargetingKey#name} is too long.
	//
	CustomTargetingErrorReasonReasonKeyNameInvalidLength = "KEY_NAME_INVALID_LENGTH"

	// CustomTargetingErrorReasonReasonKeyNameInvalidChars
	//
	// {@link CustomTargetingKey#name} contains unsupported or reserved
	// characters.
	//
	CustomTargetingErrorReasonReasonKeyNameInvalidChars = "KEY_NAME_INVALID_CHARS"

	// CustomTargetingErrorReasonReasonKeyNameReserved
	//
	// {@link CustomTargetingKey#name} matches one of the reserved custom
	// targeting key names.
	//
	CustomTargetingErrorReasonReasonKeyNameReserved = "KEY_NAME_RESERVED"

	// CustomTargetingErrorReasonReasonKeyDisplayNameInvalidLength
	//
	// {@link CustomTargetingKey#displayName} is too long.
	//
	CustomTargetingErrorReasonReasonKeyDisplayNameInvalidLength = "KEY_DISPLAY_NAME_INVALID_LENGTH"

	// CustomTargetingErrorReasonReasonKeyStatusNotActive
	//
	// Key is not active.
	//
	CustomTargetingErrorReasonReasonKeyStatusNotActive = "KEY_STATUS_NOT_ACTIVE"

	// CustomTargetingErrorReasonReasonValueNotFound
	//
	// Requested {@link CustomTargetingValue} is not found.
	//
	CustomTargetingErrorReasonReasonValueNotFound = "VALUE_NOT_FOUND"

	// CustomTargetingErrorReasonReasonGetValuesByStatementMustContainKeyId
	//
	// The {@code WHERE} clause in the {@link Statement#query} must always
	// contain {@link CustomTargetingValue#customTargetingKeyId} as one of its
	// columns in a way that it is AND'ed with the rest of the query.
	//
	CustomTargetingErrorReasonReasonGetValuesByStatementMustContainKeyId = "GET_VALUES_BY_STATEMENT_MUST_CONTAIN_KEY_ID"

	// CustomTargetingErrorReasonReasonValueCountForKeyTooLarge
	//
	// The number of {@link CustomTargetingValue} objects associated with a
	// {@link CustomTargetingKey} exceeds the network limit. This is only
	// applicable for keys of type {@code CustomTargetingKey.Type#PREDEFINED}.
	//
	CustomTargetingErrorReasonReasonValueCountForKeyTooLarge = "VALUE_COUNT_FOR_KEY_TOO_LARGE"

	// CustomTargetingErrorReasonReasonValueNameDuplicate
	//
	// {@link CustomTargetingValue} with the same
	// {@link CustomTargetingValue#name} already exists.
	//
	CustomTargetingErrorReasonReasonValueNameDuplicate = "VALUE_NAME_DUPLICATE"

	// CustomTargetingErrorReasonReasonValueNameEmpty
	//
	// {@link CustomTargetingValue#name} is empty.
	//
	CustomTargetingErrorReasonReasonValueNameEmpty = "VALUE_NAME_EMPTY"

	// CustomTargetingErrorReasonReasonValueNameInvalidLength
	//
	// {@link CustomTargetingValue#name} is too long.
	//
	CustomTargetingErrorReasonReasonValueNameInvalidLength = "VALUE_NAME_INVALID_LENGTH"

	// CustomTargetingErrorReasonReasonValueNameInvalidChars
	//
	// {@link CustomTargetingValue#name} contains unsupported or reserved
	// characters.
	//
	CustomTargetingErrorReasonReasonValueNameInvalidChars = "VALUE_NAME_INVALID_CHARS"

	// CustomTargetingErrorReasonReasonValueDisplayNameInvalidLength
	//
	// {@link CustomTargetingValue#displayName} is too long.
	//
	CustomTargetingErrorReasonReasonValueDisplayNameInvalidLength = "VALUE_DISPLAY_NAME_INVALID_LENGTH"

	// CustomTargetingErrorReasonReasonValueMatchTypeNotAllowed
	//
	// Only Ad Manager 360 networks can have {@link CustomTargetingValue#matchType}
	// other than {@link CustomTargetingValue.MatchType#EXACT}.
	//
	CustomTargetingErrorReasonReasonValueMatchTypeNotAllowed = "VALUE_MATCH_TYPE_NOT_ALLOWED"

	// CustomTargetingErrorReasonReasonValueMatchTypeNotExactForPredefinedKey
	//
	// You can only create {@link CustomTargetingValue} objects with match type
	// {@link CustomTargetingValue.MatchType#EXACT} when associating
	// with {@link CustomTargetingKey} objects of type
	// {@link CustomTargetingKey.Type#PREDEFINED}
	//
	CustomTargetingErrorReasonReasonValueMatchTypeNotExactForPredefinedKey = "VALUE_MATCH_TYPE_NOT_EXACT_FOR_PREDEFINED_KEY"

	// CustomTargetingErrorReasonReasonSuffixMatchTypeNotAllowed
	//
	// {@link CustomTargetingValue} object cannot have match type of
	// {@link CustomTargetingValue.MatchType#SUFFIX} when adding a
	// {@link CustomTargetingValue} to a line item.
	//
	CustomTargetingErrorReasonReasonSuffixMatchTypeNotAllowed = "SUFFIX_MATCH_TYPE_NOT_ALLOWED"

	// CustomTargetingErrorReasonReasonContainsMatchTypeNotAllowed
	//
	// {@link CustomTargetingValue} object cannot have match type of
	// {@link CustomTargetingValue.MatchType#CONTAINS} when adding a
	// {@link CustomTargetingValue} to targeting expression of a line item.
	//
	CustomTargetingErrorReasonReasonContainsMatchTypeNotAllowed = "CONTAINS_MATCH_TYPE_NOT_ALLOWED"

	// CustomTargetingErrorReasonReasonValueStatusNotActive
	//
	// Value is not active.
	//
	CustomTargetingErrorReasonReasonValueStatusNotActive = "VALUE_STATUS_NOT_ACTIVE"

	// CustomTargetingErrorReasonReasonKeyWithMissingValues
	//
	// The {@link CustomTargetingKey} does not have any
	// {@link CustomTargetingValue} associated with it.
	//
	CustomTargetingErrorReasonReasonKeyWithMissingValues = "KEY_WITH_MISSING_VALUES"

	// CustomTargetingErrorReasonReasonInvalidValueForKey
	//
	// The {@link CustomTargetingKey} has a {@link CustomTargetingValue} specified for which the
	// value is not a valid child.
	//
	CustomTargetingErrorReasonReasonInvalidValueForKey = "INVALID_VALUE_FOR_KEY"

	// CustomTargetingErrorReasonReasonCannotOrDifferentKeys
	//
	// {@link CustomCriteriaSet.LogicalOperator#OR} operation cannot be applied
	// to values with different keys.
	//
	CustomTargetingErrorReasonReasonCannotOrDifferentKeys = "CANNOT_OR_DIFFERENT_KEYS"

	// CustomTargetingErrorReasonReasonInvalidTargetingExpression
	//
	// Targeting expression is invalid. This can happen if the sequence of
	// operators is wrong, or a node contains invalid number of children.
	//
	CustomTargetingErrorReasonReasonInvalidTargetingExpression = "INVALID_TARGETING_EXPRESSION"

	// CustomTargetingErrorReasonReasonDeletedKeyCannotBeUsedForTargeting
	//
	// The key has been deleted. {@link CustomCriteria} cannot have deleted
	// keys.
	//
	CustomTargetingErrorReasonReasonDeletedKeyCannotBeUsedForTargeting = "DELETED_KEY_CANNOT_BE_USED_FOR_TARGETING"

	// CustomTargetingErrorReasonReasonDeletedValueCannotBeUsedForTargeting
	//
	// The value has been deleted. {@link CustomCriteria} cannot have deleted
	// values.
	//
	CustomTargetingErrorReasonReasonDeletedValueCannotBeUsedForTargeting = "DELETED_VALUE_CANNOT_BE_USED_FOR_TARGETING"

	// CustomTargetingErrorReasonReasonVideoBrowseByKeyCannotBeUsedForCustomTargeting
	//
	// The key is set as the video browse-by key, which cannot be used for
	// custom targeting.
	//
	CustomTargetingErrorReasonReasonVideoBrowseByKeyCannotBeUsedForCustomTargeting = "VIDEO_BROWSE_BY_KEY_CANNOT_BE_USED_FOR_CUSTOM_TARGETING"

	// CustomTargetingErrorReasonReasonCannotDeleteCustomKeyUsedInContentMetadataMapping
	//
	// Only active custom-criteria keys are supported in content metadata mapping.
	//
	CustomTargetingErrorReasonReasonCannotDeleteCustomKeyUsedInContentMetadataMapping = "CANNOT_DELETE_CUSTOM_KEY_USED_IN_CONTENT_METADATA_MAPPING"

	// CustomTargetingErrorReasonReasonCannotDeleteCustomValueUsedInContentMetadataMapping
	//
	// Only active custom-criteria values are supported in content metadata mapping.
	//
	CustomTargetingErrorReasonReasonCannotDeleteCustomValueUsedInContentMetadataMapping = "CANNOT_DELETE_CUSTOM_VALUE_USED_IN_CONTENT_METADATA_MAPPING"

	// CustomTargetingErrorReasonReasonCannotDeleteCustomKeyUsedInPartnerAssignmentTargeting
	//
	// Cannot delete a custom criteria key that is targeted by an active partner assignment.
	//
	CustomTargetingErrorReasonReasonCannotDeleteCustomKeyUsedInPartnerAssignmentTargeting = "CANNOT_DELETE_CUSTOM_KEY_USED_IN_PARTNER_ASSIGNMENT_TARGETING"

	// CustomTargetingErrorReasonReasonCannotDeleteCustomValueUsedInPartnerAssignmentTargeting
	//
	// Cannot delete a custom criteria value that is targeted by an active partner assignment.
	//
	CustomTargetingErrorReasonReasonCannotDeleteCustomValueUsedInPartnerAssignmentTargeting = "CANNOT_DELETE_CUSTOM_VALUE_USED_IN_PARTNER_ASSIGNMENT_TARGETING"

	// CustomTargetingErrorReasonReasonCannotTargetAudienceSegment
	//
	// {@link AudienceSegment} object cannot be targeted.
	//
	CustomTargetingErrorReasonReasonCannotTargetAudienceSegment = "CANNOT_TARGET_AUDIENCE_SEGMENT"

	// CustomTargetingErrorReasonReasonCannotTargetThirdPartyAudienceSegment
	//
	// Third party {@link AudienceSegment} cannot be targeted.
	//
	CustomTargetingErrorReasonReasonCannotTargetThirdPartyAudienceSegment = "CANNOT_TARGET_THIRD_PARTY_AUDIENCE_SEGMENT"

	// CustomTargetingErrorReasonReasonCannotTargetInactiveAudienceSegment
	//
	// Inactive {@link AudienceSegment} object cannot be targeted.
	//
	CustomTargetingErrorReasonReasonCannotTargetInactiveAudienceSegment = "CANNOT_TARGET_INACTIVE_AUDIENCE_SEGMENT"

	// CustomTargetingErrorReasonReasonInvalidAudienceSegments
	//
	// Targeted {@link AudienceSegment} object is not valid.
	//
	CustomTargetingErrorReasonReasonInvalidAudienceSegments = "INVALID_AUDIENCE_SEGMENTS"

	// CustomTargetingErrorReasonReasonCannotTargetMappedMetadata
	//
	// Mapped metadata key-values are deprecated and cannot be targeted.
	//
	CustomTargetingErrorReasonReasonCannotTargetMappedMetadata = "CANNOT_TARGET_MAPPED_METADATA"

	// CustomTargetingErrorReasonReasonOnlyApprovedAudienceSegmentsCanBeTargeted
	//
	// Targeted {@link AudienceSegment} objects have not been approved.
	//
	CustomTargetingErrorReasonReasonOnlyApprovedAudienceSegmentsCanBeTargeted = "ONLY_APPROVED_AUDIENCE_SEGMENTS_CAN_BE_TARGETED"

	// CustomTargetingErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CustomTargetingErrorReasonReasonUnknown = "UNKNOWN"
)

// CustomTargetingKeyStatusType
//
// Describes the statuses for {@code CustomTargetingKey} objects.
type CustomTargetingKeyStatus string

const (

	// CustomTargetingKeyStatusTypeActive
	//
	// The object is active.
	//
	CustomTargetingKeyStatusTypeActive CustomTargetingKeyStatus = "ACTIVE"

	// CustomTargetingKeyStatusTypeInactive
	//
	// The object is no longer active.
	//
	CustomTargetingKeyStatusTypeInactive CustomTargetingKeyStatus = "INACTIVE"

	// CustomTargetingKeyStatusTypeUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CustomTargetingKeyStatusTypeUnknown CustomTargetingKeyStatus = "UNKNOWN"
)

// CustomTargetingKeyTypeType
//
// Specifies the services for {@code CustomTargetingKey} objects.
type CustomTargetingKeyType string

const (

	// CustomTargetingKeyTypeTypePredefined
	//
	// Target audiences by criteria values that are defined in advance.
	//
	CustomTargetingKeyTypeTypePredefined CustomTargetingKeyType = "PREDEFINED"

	// CustomTargetingKeyTypeTypeFreeform
	//
	// Target audiences by adding criteria values when creating line items.
	//
	CustomTargetingKeyTypeTypeFreeform CustomTargetingKeyType = "FREEFORM"
)

// CustomTargetingValueMatchTypeType
//
// Represents the ways in which {@link CustomTargetingValue#name} strings will be matched with ad
// requests.
type CustomTargetingValueMatchType string

const (

	// CustomTargetingValueMatchTypeTypeExact
	//
	// Used for exact matching. For example, the targeting value {@code car=honda} will only match
	// to the ad request {@code car=honda}.
	//
	CustomTargetingValueMatchTypeTypeExact CustomTargetingValueMatchType = "EXACT"

	// CustomTargetingValueMatchTypeTypeBroad
	//
	// Used for lenient matching when at least one of the words in the ad request matches the
	// targeted value. The targeting value {@code car=honda} will match to ad requests containing
	// the word {@code honda}. So ad requests {@code car=honda} or {@code car=honda civic} or {@code
	// car=buy honda} or {@code car=how much does a honda cost} will all have the line item
	// delivered.
	//
	// <p>This match type can not be used within an audience segment rule.
	//
	CustomTargetingValueMatchTypeTypeBroad CustomTargetingValueMatchType = "BROAD"

	// CustomTargetingValueMatchTypeTypePrefix
	//
	// Used for 'starts with' matching when the first few characters in the ad request match all of
	// the characters in the targeted value. The targeting value {@code car=honda} will match to ad
	// requests {@code car=honda} or {@code car=hondas for sale} but not to {@code car=I want a
	// honda}.
	//
	CustomTargetingValueMatchTypeTypePrefix CustomTargetingValueMatchType = "PREFIX"

	// CustomTargetingValueMatchTypeTypeBroadPrefix
	//
	// This is a combination of {@code MatchType#BROAD} and {@code MatchType#PREFIX} matching. The
	// targeting value {@code car=honda} will match to ad requests that contain words that start
	// with the characters in the targeted value, for example with {@code car=civic hondas}.
	//
	// <p>This match type can not be used within an audience segment rule.
	//
	CustomTargetingValueMatchTypeTypeBroadPrefix CustomTargetingValueMatchType = "BROAD_PREFIX"

	// CustomTargetingValueMatchTypeTypeSuffix
	//
	// Used for 'ends with' matching when the last characters in the ad request match all of the
	// characters in the targeted value. The targeting value {@code car=honda} will match with ad
	// requests {@code car=honda} or {@code car=I want a honda} but not to {@code car=hondas for
	// sale}.
	//
	// <p>This match type can not be used within line item targeting.
	//
	CustomTargetingValueMatchTypeTypeSuffix CustomTargetingValueMatchType = "SUFFIX"

	// CustomTargetingValueMatchTypeTypeContains
	//
	// Used for 'within' matching when the string in the ad request contains the string in the
	// targeted value. The targeting value {@code car=honda} will match with ad requests {@code
	// car=honda}, {@code car=I want a honda}, and also with {@code car=hondas for sale}, but not
	// with {@code car=misspelled hond a}.
	//
	// <p>This match type can not be used within line item targeting.
	//
	CustomTargetingValueMatchTypeTypeContains CustomTargetingValueMatchType = "CONTAINS"

	// CustomTargetingValueMatchTypeTypeUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CustomTargetingValueMatchTypeTypeUnknown CustomTargetingValueMatchType = "UNKNOWN"
)

// CustomTargetingValueStatusType
//
// Describes the statuses for {@code CustomTargetingValue} objects.
type CustomTargetingValueStatus string

const (

	// CustomTargetingValueStatusTypeActive
	//
	// The object is active.
	//
	CustomTargetingValueStatusTypeActive CustomTargetingValueStatus = "ACTIVE"

	// CustomTargetingValueStatusTypeInactive
	//
	// The object is no longer active.
	//
	CustomTargetingValueStatusTypeInactive CustomTargetingValueStatus = "INACTIVE"

	// CustomTargetingValueStatusTypeUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CustomTargetingValueStatusTypeUnknown CustomTargetingValueStatus = "UNKNOWN"
)

// EntityChildrenLimitReachedErrorReasonReason
//
// The reasons for the entity children limit reached error.
const (

	// EntityChildrenLimitReachedErrorReasonReasonLineItemLimitForOrderReached
	//
	// The number of line items on the order exceeds the max number of line items allowed per order
	// in the network.
	//
	EntityChildrenLimitReachedErrorReasonReasonLineItemLimitForOrderReached = "LINE_ITEM_LIMIT_FOR_ORDER_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonCreativeAssociationLimitForLineItemReached
	//
	// The number of creatives associated with the line item exceeds the max number of creatives
	// allowed to be associated with a line item in the network.
	//
	EntityChildrenLimitReachedErrorReasonReasonCreativeAssociationLimitForLineItemReached = "CREATIVE_ASSOCIATION_LIMIT_FOR_LINE_ITEM_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonAdUnitLimitForPlacementReached
	//
	// The number of ad units on the placement exceeds the max number of ad units
	// allowed per placement in the network.
	//
	EntityChildrenLimitReachedErrorReasonReasonAdUnitLimitForPlacementReached = "AD_UNIT_LIMIT_FOR_PLACEMENT_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonTargetingExpressionLimitForLineItemReached
	//
	// The number of targeting expressions on the line item exceeds the max number of targeting
	// expressions allowed per line item in the network.
	//
	EntityChildrenLimitReachedErrorReasonReasonTargetingExpressionLimitForLineItemReached = "TARGETING_EXPRESSION_LIMIT_FOR_LINE_ITEM_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonTargetingExpressionSizeLimitReached
	//
	// The size of a single targeting expression tree exceeds the max size allowed by the network.
	//
	EntityChildrenLimitReachedErrorReasonReasonTargetingExpressionSizeLimitReached = "TARGETING_EXPRESSION_SIZE_LIMIT_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonCustomTargetingValuesForKeyLimitReached
	//
	// The number of custom targeting values for the free-form or predefined custom targeting key
	// exceeds the max number allowed.
	//
	EntityChildrenLimitReachedErrorReasonReasonCustomTargetingValuesForKeyLimitReached = "CUSTOM_TARGETING_VALUES_FOR_KEY_LIMIT_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonTargetingExpressionLimitForCreativesOnLineItemReached
	//
	// The total number of targeting expressions on the creatives for the line item exceeds
	// the max number allowed per line item in the network.
	//
	EntityChildrenLimitReachedErrorReasonReasonTargetingExpressionLimitForCreativesOnLineItemReached = "TARGETING_EXPRESSION_LIMIT_FOR_CREATIVES_ON_LINE_ITEM_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonAttachmentLimitForProposalReached
	//
	// The number of attachments added to the proposal exceeds the max number
	// allowed per proposal in the network.
	//
	EntityChildrenLimitReachedErrorReasonReasonAttachmentLimitForProposalReached = "ATTACHMENT_LIMIT_FOR_PROPOSAL_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonProposalLineItemLimitForProposalReached
	//
	// The number of proposal line items on the proposal exceeds the max number
	// allowed per proposal in the network.
	//
	EntityChildrenLimitReachedErrorReasonReasonProposalLineItemLimitForProposalReached = "PROPOSAL_LINE_ITEM_LIMIT_FOR_PROPOSAL_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonProductLimitForProductPackageReached
	//
	// The number of product package items on the product package exceeds the max number
	// allowed per product package in the network.
	//
	EntityChildrenLimitReachedErrorReasonReasonProductLimitForProductPackageReached = "PRODUCT_LIMIT_FOR_PRODUCT_PACKAGE_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonProductTemplateAndProductBaseRateLimitForRateCardReached
	//
	// The number of product template and product base rates on the rate card (including excluded
	// product base rates) exceeds the max number allowed per rate card in the network.
	//
	EntityChildrenLimitReachedErrorReasonReasonProductTemplateAndProductBaseRateLimitForRateCardReached = "PRODUCT_TEMPLATE_AND_PRODUCT_BASE_RATE_LIMIT_FOR_RATE_CARD_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonProductPackageItemBaseRateLimitForRateCardReached
	//
	// The number of product package item base rates on the rate card exceeds the max number
	// allowed per rate card in the network.
	//
	EntityChildrenLimitReachedErrorReasonReasonProductPackageItemBaseRateLimitForRateCardReached = "PRODUCT_PACKAGE_ITEM_BASE_RATE_LIMIT_FOR_RATE_CARD_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonPremiumLimitForRateCardReached
	//
	// The number of premiums of the rate card exceeds the max number allowed per rate card
	// in the network.
	//
	EntityChildrenLimitReachedErrorReasonReasonPremiumLimitForRateCardReached = "PREMIUM_LIMIT_FOR_RATE_CARD_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonAdUnitLimitForAdExclusionRuleTargetingReached
	//
	// The number of ad units on {@link AdExclusionRule#inventoryTargeting} exceeds the max number
	// of ad units allowed per ad exclusion rule inventory targeting in the network.
	//
	EntityChildrenLimitReachedErrorReasonReasonAdUnitLimitForAdExclusionRuleTargetingReached = "AD_UNIT_LIMIT_FOR_AD_EXCLUSION_RULE_TARGETING_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonNativeStyleLimitForNativeAdFormatReached
	//
	// The number of native styles under the native creative template exceeds the
	// max number of native styles allowed per native creative template in the
	// network.
	//
	EntityChildrenLimitReachedErrorReasonReasonNativeStyleLimitForNativeAdFormatReached = "NATIVE_STYLE_LIMIT_FOR_NATIVE_AD_FORMAT_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonTargetingExpressionLimitForPresentationAssignmentReached
	//
	// The number of targeting expressions on the native style exceeds the max number of targeting
	// expressions allowed per native style in the network.
	//
	EntityChildrenLimitReachedErrorReasonReasonTargetingExpressionLimitForPresentationAssignmentReached = "TARGETING_EXPRESSION_LIMIT_FOR_PRESENTATION_ASSIGNMENT_REACHED"

	// EntityChildrenLimitReachedErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	EntityChildrenLimitReachedErrorReasonReasonUnknown = "UNKNOWN"
)

// EntityLimitReachedErrorReasonReason
//
// The reasons for the entity limit reached error.
const (

	// EntityLimitReachedErrorReasonReasonCustomTargetingValuesLimitReached
	//
	// The number of custom targeting values exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonCustomTargetingValuesLimitReached = "CUSTOM_TARGETING_VALUES_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonAdExclusionRulesLimitReached
	//
	// The number of ad exclusion rules exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonAdExclusionRulesLimitReached = "AD_EXCLUSION_RULES_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonFirstPartyAudienceSegmentsLimitReached
	//
	// The number of first party audience segments exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonFirstPartyAudienceSegmentsLimitReached = "FIRST_PARTY_AUDIENCE_SEGMENTS_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonPlacementsLimitReached
	//
	// The number of active placements exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonPlacementsLimitReached = "PLACEMENTS_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonLineItemsLimitReached
	//
	// The number of line items excceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonLineItemsLimitReached = "LINE_ITEMS_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonActiveLineItemsLimitReached
	//
	// The number of active line items exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonActiveLineItemsLimitReached = "ACTIVE_LINE_ITEMS_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonDaiEncodingProfilesLimitReached
	//
	// The number of not-archived encoding profiles exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonDaiEncodingProfilesLimitReached = "DAI_ENCODING_PROFILES_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonTrafficForecastSegmentsLimitReached
	//
	// The number of traffic forecast segments exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonTrafficForecastSegmentsLimitReached = "TRAFFIC_FORECAST_SEGMENTS_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonForecastAdjustmentsLimitReached
	//
	// The number of forecast adjustments exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonForecastAdjustmentsLimitReached = "FORECAST_ADJUSTMENTS_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonActiveExperimentsLimitReached
	//
	// The number of active experiments exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonActiveExperimentsLimitReached = "ACTIVE_EXPERIMENTS_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonSitesLimitReached
	//
	// The number of sites exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonSitesLimitReached = "SITES_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonUserTeamsLimitReached
	//
	// The number of teams on the user exceeds the max number allowed.
	//
	EntityLimitReachedErrorReasonReasonUserTeamsLimitReached = "USER_TEAMS_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	EntityLimitReachedErrorReasonReasonUnknown = "UNKNOWN"
)

// FeatureErrorReasonReason
const (

	// FeatureErrorReasonReasonMissingFeature
	//
	// A feature is being used that is not enabled on the current network.
	//
	FeatureErrorReasonReasonMissingFeature = "MISSING_FEATURE"

	// FeatureErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	FeatureErrorReasonReasonUnknown = "UNKNOWN"
)

// InternalApiErrorReasonReason
//
// The single reason for the internal API error.
const (

	// InternalApiErrorReasonReasonUnexpectedInternalApiError
	//
	// API encountered an unexpected internal error.
	//
	InternalApiErrorReasonReasonUnexpectedInternalApiError = "UNEXPECTED_INTERNAL_API_ERROR"

	// InternalApiErrorReasonReasonTransientError
	//
	// A temporary error occurred during the request. Please retry.
	//
	InternalApiErrorReasonReasonTransientError = "TRANSIENT_ERROR"

	// InternalApiErrorReasonReasonUnknown
	//
	// The cause of the error is not known or only defined in newer versions.
	//
	InternalApiErrorReasonReasonUnknown = "UNKNOWN"

	// InternalApiErrorReasonReasonDowntime
	//
	// The API is currently unavailable for a planned downtime.
	//
	InternalApiErrorReasonReasonDowntime = "DOWNTIME"

	// InternalApiErrorReasonReasonErrorGeneratingResponse
	//
	// Mutate succeeded but server was unable to build response. Client should not retry mutate.
	//
	InternalApiErrorReasonReasonErrorGeneratingResponse = "ERROR_GENERATING_RESPONSE"
)

// NotNullErrorReasonReason
//
// The reasons for the target error.
const (

	// NotNullErrorReasonReasonArg1Null
	//
	// Assuming that a method will not have more than 3 arguments, if it does,
	// return NULL
	//
	NotNullErrorReasonReasonArg1Null = "ARG1_NULL"

	// NotNullErrorReasonReasonArg2Null
	NotNullErrorReasonReasonArg2Null = "ARG2_NULL"

	// NotNullErrorReasonReasonArg3Null
	NotNullErrorReasonReasonArg3Null = "ARG3_NULL"

	// NotNullErrorReasonReasonNull
	NotNullErrorReasonReasonNull = "NULL"

	// NotNullErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	NotNullErrorReasonReasonUnknown = "UNKNOWN"
)

// NullErrorReasonReason
//
// The reasons for the validation error.
const (

	// NullErrorReasonReasonNullContent
	//
	// Specified list/container must not contain any null elements
	//
	NullErrorReasonReasonNullContent = "NULL_CONTENT"
)

// ParseErrorReasonReason
//
// The reasons for the target error.
const (

	// ParseErrorReasonReasonUnparsable
	//
	// Indicates an error in parsing an attribute.
	//
	ParseErrorReasonReasonUnparsable = "UNPARSABLE"

	// ParseErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ParseErrorReasonReasonUnknown = "UNKNOWN"
)

// PermissionErrorReasonReason
//
// Describes reasons for permission errors.
const (

	// PermissionErrorReasonReasonPermissionDenied
	//
	// User does not have the required permission for the request.
	//
	PermissionErrorReasonReasonPermissionDenied = "PERMISSION_DENIED"

	// PermissionErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PermissionErrorReasonReasonUnknown = "UNKNOWN"
)

// PublisherQueryLanguageContextErrorReasonReason
//
// The reasons for the target error.
const (

	// PublisherQueryLanguageContextErrorReasonReasonUnexecutable
	//
	// Indicates that there was an error executing the PQL.
	//
	PublisherQueryLanguageContextErrorReasonReasonUnexecutable = "UNEXECUTABLE"

	// PublisherQueryLanguageContextErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PublisherQueryLanguageContextErrorReasonReasonUnknown = "UNKNOWN"
)

// PublisherQueryLanguageSyntaxErrorReasonReason
//
// The reasons for the target error.
const (

	// PublisherQueryLanguageSyntaxErrorReasonReasonUnparsable
	//
	// Indicates that there was a PQL syntax error.
	//
	PublisherQueryLanguageSyntaxErrorReasonReasonUnparsable = "UNPARSABLE"

	// PublisherQueryLanguageSyntaxErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PublisherQueryLanguageSyntaxErrorReasonReasonUnknown = "UNKNOWN"
)

// QuotaErrorReasonReason
const (

	// QuotaErrorReasonReasonExceededQuota
	//
	// The number of requests made per second is too high and has exceeded the
	// allowable limit. The recommended approach to handle this error is to wait
	// about 5 seconds and then retry the request. Note that this does not
	// guarantee the request will succeed. If it fails again, try increasing the
	// wait time.
	// <p>Another way to mitigate this error is to limit requests to 8 per second for Ad Manager
	// 360 accounts, or 2 per second for Ad Manager accounts. Once again
	// this does not guarantee that every request will succeed, but may help
	// reduce the number of times you receive this error.
	//
	QuotaErrorReasonReasonExceededQuota = "EXCEEDED_QUOTA"

	// QuotaErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	QuotaErrorReasonReasonUnknown = "UNKNOWN"

	// QuotaErrorReasonReasonReportJobLimit
	//
	// This user has exceeded the allowed number of new report requests per hour
	// (this includes both reports run via the UI and reports
	// run via {@link ReportService#runReportJob}).
	// The recommended approach to handle this error is to wait about 10 minutes
	// and then retry the request. Note that this does not guarantee the request
	// will succeed. If it fails again, try increasing the wait time.
	// <p>Another way to mitigate this error is to limit the number of new report
	// requests to 250 per hour per user. Once again, this does not guarantee that
	// every request will succeed, but may help reduce the number of times you
	// receive this error.
	//
	QuotaErrorReasonReasonReportJobLimit = "REPORT_JOB_LIMIT"

	// QuotaErrorReasonReasonSegmentPopulationLimit
	//
	// This network has exceeded the allowed number of identifiers uploaded within a 24 hour period.
	// The recommended approach to handle this error is to wait 30 minutes and then retry the
	// request. Note that this does not guarantee the request will succeed. If it fails again, try
	// increasing the wait time.
	//
	QuotaErrorReasonReasonSegmentPopulationLimit = "SEGMENT_POPULATION_LIMIT"
)

// ReportableType
//
// Represents the reportable state of a custom key.
type ReportableType string

const (

	// ReportableTypeUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ReportableTypeUnknown ReportableType = "UNKNOWN"

	// ReportableTypeOn
	//
	// Available for reporting in the Ad Manager query tool.
	//
	ReportableTypeOn ReportableType = "ON"

	// ReportableTypeOff
	//
	// Not available for reporting in the Ad Manager query tool.
	//
	ReportableTypeOff ReportableType = "OFF"

	// ReportableTypeCustomDimension
	//
	// Custom dimension available for reporting in the AdManager query tool.
	//
	ReportableTypeCustomDimension ReportableType = "CUSTOM_DIMENSION"
)

// RequiredCollectionErrorReasonReason
const (

	// RequiredCollectionErrorReasonReasonRequired
	//
	// A required collection is missing.
	//
	RequiredCollectionErrorReasonReasonRequired = "REQUIRED"

	// RequiredCollectionErrorReasonReasonTooLarge
	//
	// Collection size is too large.
	//
	RequiredCollectionErrorReasonReasonTooLarge = "TOO_LARGE"

	// RequiredCollectionErrorReasonReasonTooSmall
	//
	// Collection size is too small.
	//
	RequiredCollectionErrorReasonReasonTooSmall = "TOO_SMALL"

	// RequiredCollectionErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RequiredCollectionErrorReasonReasonUnknown = "UNKNOWN"
)

// RequiredErrorReasonReason
//
// The reasons for the target error.
const (

	// RequiredErrorReasonReasonRequired
	//
	// Missing required field.
	//
	RequiredErrorReasonReasonRequired = "REQUIRED"
)

// ServerErrorReasonReason
//
// Describes reasons for server errors
const (

	// ServerErrorReasonReasonServerError
	//
	// Indicates that an unexpected error occured.
	//
	ServerErrorReasonReasonServerError = "SERVER_ERROR"

	// ServerErrorReasonReasonServerBusy
	//
	// Indicates that the server is currently experiencing a high load. Please
	// wait and try your request again.
	//
	ServerErrorReasonReasonServerBusy = "SERVER_BUSY"

	// ServerErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ServerErrorReasonReasonUnknown = "UNKNOWN"
)

// StatementErrorReasonReason
const (

	// StatementErrorReasonReasonVariableNotBoundToValue
	//
	// A bind variable has not been bound to a value.
	//
	StatementErrorReasonReasonVariableNotBoundToValue = "VARIABLE_NOT_BOUND_TO_VALUE"

	// StatementErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	StatementErrorReasonReasonUnknown = "UNKNOWN"
)

// StringFormatErrorReasonReason
//
// The reasons for the target error.
const (

	// StringFormatErrorReasonReasonUnknown
	StringFormatErrorReasonReasonUnknown = "UNKNOWN"

	// StringFormatErrorReasonReasonIllegalChars
	//
	// The input string value contains disallowed characters.
	//
	StringFormatErrorReasonReasonIllegalChars = "ILLEGAL_CHARS"

	// StringFormatErrorReasonReasonInvalidFormat
	//
	// The input string value is invalid for the associated field.
	//
	StringFormatErrorReasonReasonInvalidFormat = "INVALID_FORMAT"
)

// StringLengthErrorReasonReason
const (

	// StringLengthErrorReasonReasonTooLong
	StringLengthErrorReasonReasonTooLong = "TOO_LONG"

	// StringLengthErrorReasonReasonTooShort
	StringLengthErrorReasonReasonTooShort = "TOO_SHORT"

	// StringLengthErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	StringLengthErrorReasonReasonUnknown = "UNKNOWN"
)

// createCustomTargetingKeys
//
// Creates new {@link CustomTargetingKey} objects.
//
// <p>The following fields are required:
//
// <ul>
// <li>{@link CustomTargetingKey#name}
// <li>{@link CustomTargetingKey#type}
// </ul>
type CreateCustomTargetingKeys struct {
	Keys []*CustomTargetingKey `xml:"keys"`
}

// createCustomTargetingKeysResponse
type CreateCustomTargetingKeysResponse struct {
	Rval []*CustomTargetingKey `xml:"rval"`
}

// createCustomTargetingValues
//
// Creates new {@link CustomTargetingValue} objects.
//
// <p>The following fields are required:
//
// <ul>
// <li>{@link CustomTargetingValue#customTargetingKeyId}
// <li>{@link CustomTargetingValue#name}
// </ul>
type CreateCustomTargetingValues struct {
	Values []*CustomTargetingValue `xml:"values"`
}

// createCustomTargetingValuesResponse
type CreateCustomTargetingValuesResponse struct {
	Rval []*CustomTargetingValue `xml:"rval"`
}

// getCustomTargetingKeysByStatement
//
// Gets a {@link CustomTargetingKeyPage} of {@link CustomTargetingKey} objects that satisfy the
// given {@link Statement#query}. The following fields are supported for filtering:
//
// <table>
// <tr>
// <th scope="col">PQL Property</th> <th scope="col">Object Property</th>
// </tr>
// <tr>
// <tr>
// <td>{@code id}</td>
// <td>{@link CustomTargetingKey#id}</td>
// </tr>
// <tr>
// <td>{@code name}</td>
// <td>{@link CustomTargetingKey#name}</td>
// </tr>
// <tr>
// <td>{@code displayName}</td>
// <td>{@link CustomTargetingKey#displayName}</td>
// </tr>
// <tr>
// <td>{@code type}</td>
// <td>{@link CustomTargetingKey#type}</td>
// </tr>
// </table>
type GetCustomTargetingKeysByStatement struct {
	FilterStatement *Statement `xml:"filterStatement"`
}

// getCustomTargetingKeysByStatementResponse
type GetCustomTargetingKeysByStatementResponse struct {
	Rval *CustomTargetingKeyPage `xml:"rval"`
}

// getCustomTargetingValuesByStatement
//
// Gets a {@link CustomTargetingValuePage} of {@link CustomTargetingValue} objects that satisfy
// the given {@link Statement#query}.
//
// <p>The {@code WHERE} clause in the {@link Statement#query} must always contain {@link
// CustomTargetingValue#customTargetingKeyId} as one of its columns in a way that it is AND'ed
// with the rest of the query. So, if you want to retrieve values for a known set of key ids,
// valid {@link Statement#query} would look like:
//
// <ol>
// <li>"WHERE customTargetingKeyId IN ('17','18','19')" retrieves all values that are associated
// with keys having ids 17, 18, 19.
// <li>"WHERE customTargetingKeyId = '17' AND name = 'red'" retrieves values that are associated
// with keys having id 17 and value name is 'red'.
// </ol>
//
// <p>The following fields are supported for filtering:
//
// <table>
// <tr>
// <th scope="col">PQL Property</th>
// <th scope="col">Object Property</th>
// </tr>
// <tr>
// <td>{@code id}</td>
// <td>{@link CustomTargetingValue#id}</td>
// </tr>
// <tr>
// <td>{@code customTargetingKeyId}</td>
// <td>{@link CustomTargetingValue#customTargetingKeyId}</td>
// </tr>
// <tr>
// <td>{@code name}</td>
// <td>{@link CustomTargetingValue#name}</td>
// </tr>
// <tr>
// <td>{@code displayName}</td>
// <td>{@link CustomTargetingValue#displayName}</td>
// </tr>
// <tr>
// <td>{@code matchType}</td>
// <td>{@link CustomTargetingValue#matchType}</td>
// </tr>
// </table>
type GetCustomTargetingValuesByStatement struct {
	FilterStatement *Statement `xml:"filterStatement"`
}

// getCustomTargetingValuesByStatementResponse
type GetCustomTargetingValuesByStatementResponse struct {
	Rval *CustomTargetingValuePage `xml:"rval"`
}

// performCustomTargetingKeyAction
//
// Performs actions on {@link CustomTargetingKey} objects that match the given {@link
// Statement#query}.
type PerformCustomTargetingKeyAction struct {
	CustomTargetingKeyAction *CustomTargetingKeyAction `xml:"customTargetingKeyAction"`

	FilterStatement *Statement `xml:"filterStatement"`
}

// performCustomTargetingKeyActionResponse
type PerformCustomTargetingKeyActionResponse struct {
	Rval *UpdateResult `xml:"rval"`
}

// performCustomTargetingValueAction
//
// Performs actions on {@link CustomTargetingValue} objects that match the given {@link
// Statement#query}.
type PerformCustomTargetingValueAction struct {
	CustomTargetingValueAction *CustomTargetingValueAction `xml:"customTargetingValueAction"`

	FilterStatement *Statement `xml:"filterStatement"`
}

// performCustomTargetingValueActionResponse
type PerformCustomTargetingValueActionResponse struct {
	Rval *UpdateResult `xml:"rval"`
}

// updateCustomTargetingKeys
//
// Updates the specified {@link CustomTargetingKey} objects.
type UpdateCustomTargetingKeys struct {
	Keys []*CustomTargetingKey `xml:"keys"`
}

// updateCustomTargetingKeysResponse
type UpdateCustomTargetingKeysResponse struct {
	Rval []*CustomTargetingKey `xml:"rval"`
}

// updateCustomTargetingValues
//
// Updates the specified {@link CustomTargetingValue} objects.
type UpdateCustomTargetingValues struct {
	Values []*CustomTargetingValue `xml:"values"`
}

// updateCustomTargetingValuesResponse
type UpdateCustomTargetingValuesResponse struct {
	Rval []*CustomTargetingValue `xml:"rval"`
}

// RequestHeader
type RequestHeader struct {
}

// ResponseHeader
type ResponseHeader struct {
}
