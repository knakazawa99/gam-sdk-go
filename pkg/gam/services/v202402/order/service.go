// Code generated by gamwsdl/main.go. DO NOT EDIT.
package order

import (
	"context"
	"encoding/xml"
	"fmt"

	"github.com/knakazawa99/gam-sdk-go/pkg/gam/requestbody"
	"github.com/knakazawa99/gam-sdk-go/pkg/gam/soap"
	gamxml "github.com/knakazawa99/gam-sdk-go/pkg/xml"
)

const (
	wsdl = "https://ads.google.com/apis/ads/publisher/v202402/OrderService"

	OperationCreateOrders = "createOrders"

	OperationGetOrdersByStatement = "getOrdersByStatement"

	OperationPerformOrderAction = "performOrderAction"

	OperationUpdateOrders = "updateOrders"
)

// OrderServiceInterface
//
// Provides methods for creating, updating and retrieving {@link Order} objects.
//
// <p>An order is a grouping of {@link LineItem} objects. Line items have a many-to-one relationship
// with orders, meaning each line item can belong to only one order, but orders can have multiple
// line items. An order can be used to manage the line items it contains.
type OrderServiceInterface interface {

	// CreateOrders
	//
	// Creates new {@link Order} objects.
	//
	CreateOrders(ctx context.Context, input CreateOrders) (*CreateOrdersResponse, error)

	// GetOrdersByStatement
	//
	// Gets an {@link OrderPage} of {@link Order} objects that satisfy the given {@link
	// Statement#query}. The following fields are supported for filtering:
	//
	// <table>
	// <tr>
	// <th scope="col">PQL Property</th> <th scope="col">Object Property</th>
	// </tr>
	// <tr>
	// <td>{@code advertiserId}</td>
	// <td>{@link Order#advertiserId}</td>
	// </tr>
	// <tr>
	// <td>{@code endDateTime}</td>
	// <td>{@link Order#endDateTime}</td>
	// </tr>
	// <tr>
	// <td>{@code id}</td>
	// <td>{@link Order#id}</td>
	// </tr>
	// <tr>
	// <td>{@code name}</td>
	// <td>{@link Order#name}</td>
	// </tr>
	// <tr>
	// <td>{@code salespersonId}</td>
	// <td>{@link Order#salespersonId}</td>
	// </tr>
	// <tr>
	// <td>{@code startDateTime}</td>
	// <td>{@link Order#startDateTime}</td>
	// </tr>
	// <tr>
	// <td>{@code status}</td>
	// <td>{@link Order#status}</td>
	// </tr>
	// <tr>
	// <td>{@code traffickerId}</td>
	// <td>{@link Order#traffickerId}</td>
	// </tr>
	// <tr>
	// <td>{@code lastModifiedDateTime}</td>
	// <td>{@link Order#lastModifiedDateTime}</td>
	// </tr>
	// </table>
	//
	GetOrdersByStatement(ctx context.Context, input GetOrdersByStatement) (*GetOrdersByStatementResponse, error)

	// PerformOrderAction
	//
	// Performs actions on {@link Order} objects that match the given {@link Statement#query}.
	//
	PerformOrderAction(ctx context.Context, action requestbody.PerformAction, input PerformOrderAction) (*PerformOrderActionResponse, error)

	// UpdateOrders
	//
	// Updates the specified {@link Order} objects.
	//
	UpdateOrders(ctx context.Context, input UpdateOrders) (*UpdateOrdersResponse, error)
}

type Envelope struct {
	xmlName xml.Name `xml:"Envelope"`
	Body    Body     `xml:"Body"`
}

type Body struct {
	xmlName xml.Name   `xml:"Body"`
	Fault   soap.Fault `xml:"Fault"`

	// CreateOrdersResponse
	//
	// Creates new {@link Order} objects.
	//
	CreateOrdersResponse CreateOrdersResponse `xml:"createOrdersResponse"`

	// GetOrdersByStatementResponse
	//
	// Gets an {@link OrderPage} of {@link Order} objects that satisfy the given {@link
	// Statement#query}. The following fields are supported for filtering:
	//
	// <table>
	// <tr>
	// <th scope="col">PQL Property</th> <th scope="col">Object Property</th>
	// </tr>
	// <tr>
	// <td>{@code advertiserId}</td>
	// <td>{@link Order#advertiserId}</td>
	// </tr>
	// <tr>
	// <td>{@code endDateTime}</td>
	// <td>{@link Order#endDateTime}</td>
	// </tr>
	// <tr>
	// <td>{@code id}</td>
	// <td>{@link Order#id}</td>
	// </tr>
	// <tr>
	// <td>{@code name}</td>
	// <td>{@link Order#name}</td>
	// </tr>
	// <tr>
	// <td>{@code salespersonId}</td>
	// <td>{@link Order#salespersonId}</td>
	// </tr>
	// <tr>
	// <td>{@code startDateTime}</td>
	// <td>{@link Order#startDateTime}</td>
	// </tr>
	// <tr>
	// <td>{@code status}</td>
	// <td>{@link Order#status}</td>
	// </tr>
	// <tr>
	// <td>{@code traffickerId}</td>
	// <td>{@link Order#traffickerId}</td>
	// </tr>
	// <tr>
	// <td>{@code lastModifiedDateTime}</td>
	// <td>{@link Order#lastModifiedDateTime}</td>
	// </tr>
	// </table>
	//
	GetOrdersByStatementResponse GetOrdersByStatementResponse `xml:"getOrdersByStatementResponse"`

	// PerformOrderActionResponse
	//
	// Performs actions on {@link Order} objects that match the given {@link Statement#query}.
	//
	PerformOrderActionResponse PerformOrderActionResponse `xml:"performOrderActionResponse"`

	// UpdateOrdersResponse
	//
	// Updates the specified {@link Order} objects.
	//
	UpdateOrdersResponse UpdateOrdersResponse `xml:"updateOrdersResponse"`
}

type Service struct {
	client          soap.Client
	wsdl            string
	networkCode     int
	applicationName string
}

func NewService(client soap.Client, networkCode int, applicationName string) OrderServiceInterface {
	return &Service{
		client:          client,
		wsdl:            wsdl,
		networkCode:     networkCode,
		applicationName: applicationName,
	}
}

// OrderServiceInterface
//
// Provides methods for creating, updating and retrieving {@link Order} objects.
//
// <p>An order is a grouping of {@link LineItem} objects. Line items have a many-to-one relationship
// with orders, meaning each line item can belong to only one order, but orders can have multiple
// line items. An order can be used to manage the line items it contains.
//

// CreateOrders
//
// Creates new {@link Order} objects.
func (s *Service) CreateOrders(ctx context.Context, input CreateOrders) (*CreateOrdersResponse, error) {
	parameterXML, err := gamxml.DeepMarshal(input, true)
	data := requestbody.DefaultRequestBody{
		NetworkCode:     s.networkCode,
		ApplicationName: s.applicationName,
		OperationName:   OperationCreateOrders,
		Parameters:      string(parameterXML),
	}

	soapBody, err := requestbody.GenerateDefaultRequestSoapBody(data)
	if err != nil {
		return nil, fmt.Errorf("failed to generate soap body: %w", err)
	}

	body, err := s.client.Call(ctx, s.wsdl, soapBody)
	if err != nil {
		return nil, err
	}

	var envelope Envelope
	if err := xml.Unmarshal(body, &envelope); err != nil {
		return nil, err
	}

	if envelope.Body.Fault.Detail.APIExecutionFault != nil {
		apiExceptionFaultErrors := envelope.Body.Fault.Detail.APIExecutionFault.Errors[0]
		return nil, RaiseError(apiExceptionFaultErrors.ErrorType, apiExceptionFaultErrors.Reason)
	}
	return &envelope.Body.CreateOrdersResponse, nil
}

// GetOrdersByStatement
//
// Gets an {@link OrderPage} of {@link Order} objects that satisfy the given {@link
// Statement#query}. The following fields are supported for filtering:
//
// <table>
// <tr>
// <th scope="col">PQL Property</th> <th scope="col">Object Property</th>
// </tr>
// <tr>
// <td>{@code advertiserId}</td>
// <td>{@link Order#advertiserId}</td>
// </tr>
// <tr>
// <td>{@code endDateTime}</td>
// <td>{@link Order#endDateTime}</td>
// </tr>
// <tr>
// <td>{@code id}</td>
// <td>{@link Order#id}</td>
// </tr>
// <tr>
// <td>{@code name}</td>
// <td>{@link Order#name}</td>
// </tr>
// <tr>
// <td>{@code salespersonId}</td>
// <td>{@link Order#salespersonId}</td>
// </tr>
// <tr>
// <td>{@code startDateTime}</td>
// <td>{@link Order#startDateTime}</td>
// </tr>
// <tr>
// <td>{@code status}</td>
// <td>{@link Order#status}</td>
// </tr>
// <tr>
// <td>{@code traffickerId}</td>
// <td>{@link Order#traffickerId}</td>
// </tr>
// <tr>
// <td>{@code lastModifiedDateTime}</td>
// <td>{@link Order#lastModifiedDateTime}</td>
// </tr>
// </table>
func (s *Service) GetOrdersByStatement(ctx context.Context, input GetOrdersByStatement) (*GetOrdersByStatementResponse, error) {
	parameterXML, err := gamxml.DeepMarshal(input, true)
	data := requestbody.DefaultRequestBody{
		NetworkCode:     s.networkCode,
		ApplicationName: s.applicationName,
		OperationName:   OperationGetOrdersByStatement,
		Parameters:      string(parameterXML),
	}

	soapBody, err := requestbody.GenerateDefaultRequestSoapBody(data)
	if err != nil {
		return nil, fmt.Errorf("failed to generate soap body: %w", err)
	}

	body, err := s.client.Call(ctx, s.wsdl, soapBody)
	if err != nil {
		return nil, err
	}

	var envelope Envelope
	if err := xml.Unmarshal(body, &envelope); err != nil {
		return nil, err
	}

	if envelope.Body.Fault.Detail.APIExecutionFault != nil {
		apiExceptionFaultErrors := envelope.Body.Fault.Detail.APIExecutionFault.Errors[0]
		return nil, RaiseError(apiExceptionFaultErrors.ErrorType, apiExceptionFaultErrors.Reason)
	}
	return &envelope.Body.GetOrdersByStatementResponse, nil
}

func (s *Service) PerformOrderAction(ctx context.Context, action requestbody.PerformAction, input PerformOrderAction) (*PerformOrderActionResponse, error) {
	performActionBody, err := action.GetPerformActionBody()
	if err != nil {
		return nil, fmt.Errorf("failed to perform action: %w", err)
	}

	parameterXML, err := gamxml.DeepMarshal(input.FilterStatement, true)
	if err != nil {
		return nil, fmt.Errorf("failed to DeepMarshal: %w", err)
	}

	data := requestbody.PerformActionBodyData{
		NetworkCode:        s.networkCode,
		ApplicationName:    s.applicationName,
		OperationName:      OperationPerformOrderAction,
		ActionName:         "orderAction",
		ActionType:         action.GetActionType(),
		ActionField:        performActionBody,
		Statement:          "filterStatement",
		StatementParameter: string(parameterXML),
	}

	soapBody, err := requestbody.GeneratePerformActionSoapBody(data)
	if err != nil {
		return nil, fmt.Errorf("failed to generate soap body: %w", err)
	}

	body, err := s.client.Call(ctx, s.wsdl, soapBody)
	if err != nil {
		return nil, fmt.Errorf("failed to call: %w", err)
	}

	var envelope Envelope
	if err := xml.Unmarshal(body, &envelope); err != nil {
		return nil, fmt.Errorf("failed to unmarshal: %w", err)
	}

	if envelope.Body.Fault.Detail.APIExecutionFault != nil {
		// TODO handle multiple errors
		apiExceptionFaultErrors := envelope.Body.Fault.Detail.APIExecutionFault.Errors[0]
		return nil, RaiseError(apiExceptionFaultErrors.ErrorType, apiExceptionFaultErrors.Reason)
	}
	return &envelope.Body.PerformOrderActionResponse, nil
}

// UpdateOrders
//
// Updates the specified {@link Order} objects.
func (s *Service) UpdateOrders(ctx context.Context, input UpdateOrders) (*UpdateOrdersResponse, error) {
	parameterXML, err := gamxml.DeepMarshal(input, true)
	data := requestbody.DefaultRequestBody{
		NetworkCode:     s.networkCode,
		ApplicationName: s.applicationName,
		OperationName:   OperationUpdateOrders,
		Parameters:      string(parameterXML),
	}

	soapBody, err := requestbody.GenerateDefaultRequestSoapBody(data)
	if err != nil {
		return nil, fmt.Errorf("failed to generate soap body: %w", err)
	}

	body, err := s.client.Call(ctx, s.wsdl, soapBody)
	if err != nil {
		return nil, err
	}

	var envelope Envelope
	if err := xml.Unmarshal(body, &envelope); err != nil {
		return nil, err
	}

	if envelope.Body.Fault.Detail.APIExecutionFault != nil {
		apiExceptionFaultErrors := envelope.Body.Fault.Detail.APIExecutionFault.Errors[0]
		return nil, RaiseError(apiExceptionFaultErrors.ErrorType, apiExceptionFaultErrors.Reason)
	}
	return &envelope.Body.UpdateOrdersResponse, nil
}
