// Code generated by gamwsdl/main.go. DO NOT EDIT.
package creative

import (
	"github.com/knakazawa99/gam-sdk-go/pkg/gam/requestbody"
	gamxml "github.com/knakazawa99/gam-sdk-go/pkg/xml"
)

// BaseDynamicAllocationCreative
//
// A base class for dynamic allocation creatives.
//

type BaseDynamicAllocationCreative struct {
}

// BaseCreativeTemplateVariableValue
//
// A base class for storing values of the {@link CreativeTemplateVariable}.
//

type BaseCreativeTemplateVariableValue struct {

	// UniqueName
	//
	// A uniqueName of the {@link CreativeTemplateVariable}.
	//

	UniqueName *string `xml:"uniqueName"`
}

// ObjectValue
//
// Contains an object value.
// <p>
// <b>This object is experimental!
// <code>ObjectValue</code> is an experimental, innovative, and rapidly
// changing new feature for Ad Manager. Unfortunately, being on the bleeding edge means that
// we may make backwards-incompatible changes to
// <code>ObjectValue</code>. We will inform the community when this feature
// is no longer experimental.</b>
//

type ObjectValue struct {
}

// ActivateCreatives
//
// The action used for activating {@link Creative} objects.
//

type ActivateCreatives struct {
}

func NewActivateCreatives() (requestbody.PerformAction, error) {
	return &ActivateCreatives{}, nil
}
func (a ActivateCreatives) GetPerformActionBody() (string, error) {
	performActionXML, err := gamxml.DeepMarshal(a, true)
	if err != nil {
		return "", err
	}
	return string(performActionXML), nil
}

func (a ActivateCreatives) GetActionType() string {
	return "ActivateCreatives"
}

// AdExchangeCreative
//
// An Ad Exchange dynamic allocation creative.
//

type AdExchangeCreative struct {

	// HasHtmlSnippetDynamicAllocationCreative
	*HasHtmlSnippetDynamicAllocationCreative

	// IsNativeEligible
	//
	// Whether this creative is eligible for native ad-serving. This value is optional and defaults to
	// {@code false}.
	//

	IsNativeEligible *bool `xml:"isNativeEligible"`

	// IsInterstitial
	//
	// {@code true} if this creative is interstitial. An interstitial creative will not consider an
	// impression served until it is fully rendered in the browser.
	//

	IsInterstitial *bool `xml:"isInterstitial"`

	// IsAllowsAllRequestedSizes
	//
	// {@code true} if this creative is eligible for all requested sizes.
	//

	IsAllowsAllRequestedSizes *bool `xml:"isAllowsAllRequestedSizes"`
}

// AdSenseCreative
//
// An AdSense dynamic allocation creative.
//

type AdSenseCreative struct {
}

// ApiError
//
// The API error base class that provides details about an error that occurred
// while processing a service request.
//
// <p>The OGNL field path is provided for parsers to identify the request data
// element that may have caused the error.</p>
//

type ApiError struct {
	Reason string `xml:"reason"`
}

// ApiException
//
// Exception class for holding a list of service errors.
//

type ApiException struct {
	Reason string `xml:"reason"`
}

// ApiVersionError
//
// Errors related to the usage of API versions.
//

type ApiVersionError struct {
	Reason string `xml:"reason"`
}

// ApplicationException
//
// Base class for exceptions.
//

type ApplicationException struct {
	Reason string `xml:"reason"`
}

// AppliedLabel
//
// Represents a {@link Label} that can be applied to an entity. To negate an inherited label, create
// an {@code AppliedLabel} with {@code labelId} as the inherited label's ID and {@code isNegated}
// set to true.
//

type AppliedLabel struct {

	// LabelId
	//
	// The ID of a created {@link Label}.
	//

	LabelId *int64 `xml:"labelId"`

	// IsNegated
	//
	// {@code isNegated} should be set to {@code true} to negate the effects of {@code labelId}.
	//

	IsNegated *bool `xml:"isNegated"`
}

// AspectRatioImageCreative
//
// A {@code Creative} intended for mobile platforms that displays an image, whose {@link
// LineItem#creativePlaceholders size} is defined as an {@link CreativeSizeType#ASPECT_RATIO aspect
// ratio}, i.e. {@link Size#isAspectRatio}. It can have multiple images whose dimensions conform to
// that aspect ratio.
//

type AspectRatioImageCreative struct {

	// HasDestinationUrlCreative
	*HasDestinationUrlCreative

	// ImageAssets
	//
	// The images associated with this creative. The ad server will choose one based on the
	// capabilities of the device. Each asset should have a size which is of the same aspect ratio as
	// the {@link Creative#size}. This attribute is required and must have at least one asset.
	//

	ImageAssets []*CreativeAsset `xml:"imageAssets"`

	// AltText
	//
	// The text that is served along with the image creative, primarily for accessibility. If no
	// suitable image size is available for the device, this text replaces the image completely. This
	// field is optional and has a maximum length of 500 characters.
	//

	AltText *string `xml:"altText"`

	// ThirdPartyImpressionTrackingUrls
	//
	// A list of impression tracking URL to ping when this creative is displayed. This field is
	// optional and each string has a maximum length of 1024 characters.
	//

	ThirdPartyImpressionTrackingUrls []*string `xml:"thirdPartyImpressionTrackingUrls"`

	// OverrideSize
	//
	// Allows the actual image asset sizes to differ from the creative size. This attribute is
	// optional.
	//

	OverrideSize *bool `xml:"overrideSize"`
}

// AssetCreativeTemplateVariableValue
//
// Stores values of {@link CreativeTemplateVariable} of {@link VariableType#ASSET}.
//

type AssetCreativeTemplateVariableValue struct {

	// BaseCreativeTemplateVariableValue
	*BaseCreativeTemplateVariableValue

	// Asset
	//
	// The associated asset. This attribute is required when creating a new {@code TemplateCreative}.
	// To view the asset, use {@link CreativeAsset#assetUrl}.
	//

	Asset *CreativeAsset `xml:"asset"`
}

// Asset
//
// Base asset properties.
//

type Asset struct {
}

// AssetError
//
// Lists all errors associated with assets.
//

type AssetError struct {
	Reason string `xml:"reason"`
}

// AudioCreative
//
// A {@code Creative} that contains Ad Manager hosted audio ads and is served via VAST XML. This
// creative is read-only.
//

type AudioCreative struct {

	// BaseAudioCreative
	*BaseAudioCreative

	// AudioSourceUrl
	//
	// A URL that points to the source media that will be used for transcoding.
	//

	AudioSourceUrl *string `xml:"audioSourceUrl"`
}

// AudioRedirectCreative
//
// A {@code Creative} that contains externally hosted audio ads and is served via VAST XML.
//

type AudioRedirectCreative struct {

	// BaseAudioCreative
	*BaseAudioCreative

	// AudioAssets
	//
	// The audio creative assets.
	//

	AudioAssets []*VideoRedirectAsset `xml:"audioAssets"`

	// MezzanineFile
	//
	// The high quality mezzanine audio asset.
	//

	MezzanineFile *VideoRedirectAsset `xml:"mezzanineFile"`
}

// AuthenticationError
//
// An error for an exception that occurred when authenticating.
//

type AuthenticationError struct {
	Reason string `xml:"reason"`
}

// BaseAudioCreative
//
// A base type for audio creatives.
//

type BaseAudioCreative struct {

	// HasDestinationUrlCreative
	*HasDestinationUrlCreative

	// Duration
	//
	// The expected duration of this creative in milliseconds.
	//

	Duration *int `xml:"duration"`

	// AllowDurationOverride
	//
	// Allows the creative duration to differ from the actual asset durations. This attribute is
	// optional.
	//

	AllowDurationOverride *bool `xml:"allowDurationOverride"`

	// TrackingUrls
	//
	// A map from {@code ConversionEvent} to a list of URLs that will be pinged when the event
	// happens. This attribute is optional.
	//

	TrackingUrls []*ConversionEvent_TrackingUrlsMapEntry `xml:"trackingUrls"`

	// CompanionCreativeIds
	//
	// The IDs of the companion creatives that are associated with this creative. This attribute is
	// optional.
	//

	CompanionCreativeIds []*int64 `xml:"companionCreativeIds"`

	// CustomParameters
	//
	// A comma separated key=value list of parameters that will be supplied to the creative, written
	// into the VAST {@code AdParameters} node. This attribute is optional.
	//

	CustomParameters *string `xml:"customParameters"`

	// AdId
	//
	// The ad id associated with the video as defined by the {@code adIdType} registry. This field is
	// required if {@code adIdType} is not {@link AdIdType#NONE}.
	//

	AdId *string `xml:"adId"`

	// AdIdType
	//
	// The registry which the ad id of this creative belongs to. This field is optional and defaults
	// to {@link AdIdType#NONE}.
	//

	AdIdType *AdIdType `xml:"adIdType"`

	// SkippableAdType
	//
	// The type of skippable ad.
	//

	SkippableAdType *SkippableAdType `xml:"skippableAdType"`

	// VastPreviewUrl
	//
	// An ad tag URL that will return a preview of the VAST XML response specific to this creative.
	// This attribute is read-only.
	//

	VastPreviewUrl *string `xml:"vastPreviewUrl"`

	// SslScanResult
	//
	// The SSL compatibility scan result of this creative.
	//
	// <p>This attribute is read-only and determined by Google.
	//

	SslScanResult *SslScanResult `xml:"sslScanResult"`

	// SslManualOverride
	//
	// The manual override for the SSL compatibility of this creative.
	//
	// <p>This attribute is optional and defaults to {@link SslManualOverride#NO_OVERRIDE}.
	//

	SslManualOverride *SslManualOverride `xml:"sslManualOverride"`
}

// BaseCustomFieldValue
//
// The value of a {@link CustomField} for a particular entity.
//

type BaseCustomFieldValue struct {

	// CustomFieldId
	//
	// Id of the {@code CustomField} to which this value belongs. This attribute is required.
	//

	CustomFieldId *int64 `xml:"customFieldId"`
}

// BaseImageCreative
//
// The base type for creatives that display an image.
//

type BaseImageCreative struct {

	// HasDestinationUrlCreative
	*HasDestinationUrlCreative

	// OverrideSize
	//
	// Allows the creative size to differ from the actual image asset size. This attribute is
	// optional.
	//

	OverrideSize *bool `xml:"overrideSize"`

	// PrimaryImageAsset
	//
	// The primary image asset associated with this creative. This attribute is required.
	//

	PrimaryImageAsset *CreativeAsset `xml:"primaryImageAsset"`
}

// BaseImageRedirectCreative
//
// The base type for creatives that load an image asset from a specified URL.
//

type BaseImageRedirectCreative struct {

	// HasDestinationUrlCreative
	*HasDestinationUrlCreative

	// ImageUrl
	//
	// The URL where the actual asset resides. This attribute is required and has a maximum length of
	// 1024 characters.
	//

	ImageUrl *string `xml:"imageUrl"`
}

// BaseRichMediaStudioCreative
//
// A {@code Creative} that is created by a Rich Media Studio.
//

type BaseRichMediaStudioCreative struct {

	// Creative
	*Creative

	// StudioCreativeId
	//
	// The creative ID as known by Rich Media Studio creative. This attribute is readonly.
	//

	StudioCreativeId *int64 `xml:"studioCreativeId"`

	// CreativeFormat
	//
	// The creative format of the Rich Media Studio creative. This attribute is readonly.
	//

	CreativeFormat *RichMediaStudioCreativeFormat `xml:"creativeFormat"`

	// ArtworkType
	//
	// The type of artwork used in this creative. This attribute is readonly.
	//

	ArtworkType *RichMediaStudioCreativeArtworkType `xml:"artworkType"`

	// TotalFileSize
	//
	// The total size of all assets in bytes. This attribute is readonly.
	//

	TotalFileSize *int64 `xml:"totalFileSize"`

	// AdTagKeys
	//
	// Ad tag keys. This attribute is optional and updatable.
	//

	AdTagKeys []*string `xml:"adTagKeys"`

	// CustomKeyValues
	//
	// Custom key values. This attribute is optional and updatable.
	//

	CustomKeyValues []*string `xml:"customKeyValues"`

	// SurveyUrl
	//
	// The survey URL for this creative. This attribute is optional and updatable.
	//

	SurveyUrl *string `xml:"surveyUrl"`

	// AllImpressionsUrl
	//
	// The tracking URL to be triggered when an ad starts to play, whether Rich Media or backup
	// content is displayed. Behaves like the {@code /imp} URL that DART used to track impressions.
	// This URL can't exceed 1024 characters and must start with http:// or https://. This attribute
	// is optional and updatable.
	//

	AllImpressionsUrl *string `xml:"allImpressionsUrl"`

	// RichMediaImpressionsUrl
	//
	// The tracking URL to be triggered when any rich media artwork is displayed in an ad. Behaves
	// like the {@code /imp} URL that DART used to track impressions. This URL can't exceed 1024
	// characters and must start with http:// or https://. This attribute is optional and updatable.
	//

	RichMediaImpressionsUrl *string `xml:"richMediaImpressionsUrl"`

	// BackupImageImpressionsUrl
	//
	// The tracking URL to be triggered when the Rich Media backup image is served. This attribute is
	// optional and updatable.
	//

	BackupImageImpressionsUrl *string `xml:"backupImageImpressionsUrl"`

	// OverrideCss
	//
	// The override CSS. You can put custom CSS code here to repair creative styling; e.g. {@code tr
	// td { background-color:#FBB; }}. This attribute is optional and updatable.
	//

	OverrideCss *string `xml:"overrideCss"`

	// RequiredFlashPluginVersion
	//
	// The Flash plugin version required to view this creative; e.g. {@code Flash 10.2/AS 3}. This
	// attribute is read only.
	//

	RequiredFlashPluginVersion *string `xml:"requiredFlashPluginVersion"`

	// Duration
	//
	// The duration of the creative in milliseconds. This attribute is optional and updatable.
	//

	Duration *int `xml:"duration"`

	// BillingAttribute
	//
	// The billing attribute associated with this creative. This attribute is read only.
	//

	BillingAttribute *RichMediaStudioCreativeBillingAttribute `xml:"billingAttribute"`

	// RichMediaStudioChildAssetProperties
	//
	// The list of child assets associated with this creative. This attribute is read only.
	//

	RichMediaStudioChildAssetProperties []*RichMediaStudioChildAssetProperty `xml:"richMediaStudioChildAssetProperties"`

	// SslScanResult
	//
	// The SSL compatibility scan result of this creative.
	//
	// <p>This attribute is read-only and determined by Google.
	//

	SslScanResult *SslScanResult `xml:"sslScanResult"`

	// SslManualOverride
	//
	// The manual override for the SSL compatibility of this creative.
	//
	// <p>This attribute is optional and defaults to {@link SslManualOverride#NO_OVERRIDE}.
	//

	SslManualOverride *SslManualOverride `xml:"sslManualOverride"`
}

// BaseVideoCreative
//
// A base type for video creatives.
//

type BaseVideoCreative struct {

	// HasDestinationUrlCreative
	*HasDestinationUrlCreative

	// Duration
	//
	// The expected duration of this creative in milliseconds.
	//

	Duration *int `xml:"duration"`

	// AllowDurationOverride
	//
	// Allows the creative duration to differ from the actual asset durations. This attribute is
	// optional.
	//

	AllowDurationOverride *bool `xml:"allowDurationOverride"`

	// TrackingUrls
	//
	// A map from {@code ConversionEvent} to a list of URLs that will be pinged when the event
	// happens. This attribute is optional.
	//

	TrackingUrls []*ConversionEvent_TrackingUrlsMapEntry `xml:"trackingUrls"`

	// CompanionCreativeIds
	//
	// The IDs of the companion creatives that are associated with this creative. This attribute is
	// optional.
	//

	CompanionCreativeIds []*int64 `xml:"companionCreativeIds"`

	// CustomParameters
	//
	// A comma separated key=value list of parameters that will be supplied to the creative, written
	// into the VAST {@code AdParameters} node. This attribute is optional.
	//

	CustomParameters *string `xml:"customParameters"`

	// AdId
	//
	// The ad id associated with the video as defined by the {@code adIdType} registry. This field is
	// required if {@code adIdType} is not {@link AdIdType#NONE}.
	//

	AdId *string `xml:"adId"`

	// AdIdType
	//
	// The registry which the ad id of this creative belongs to. This field is optional and defaults
	// to {@link AdIdType#NONE}.
	//

	AdIdType *AdIdType `xml:"adIdType"`

	// SkippableAdType
	//
	// The type of skippable ad.
	//

	SkippableAdType *SkippableAdType `xml:"skippableAdType"`

	// VastPreviewUrl
	//
	// An ad tag URL that will return a preview of the VAST XML response specific to this creative.
	// This attribute is read-only.
	//

	VastPreviewUrl *string `xml:"vastPreviewUrl"`

	// SslScanResult
	//
	// The SSL compatibility scan result of this creative.
	//
	// <p>This attribute is read-only and determined by Google.
	//

	SslScanResult *SslScanResult `xml:"sslScanResult"`

	// SslManualOverride
	//
	// The manual override for the SSL compatibility of this creative.
	//
	// <p>This attribute is optional and defaults to {@link SslManualOverride#NO_OVERRIDE}.
	//

	SslManualOverride *SslManualOverride `xml:"sslManualOverride"`
}

// BooleanValue
//
// Contains a boolean value.
//

type BooleanValue struct {

	// Value
	//
	// The boolean value.
	//

	Value *bool `xml:"value"`
}

// ClickTag
//
// Click tags define click-through URLs for each exit on an HTML5 creative. An exit is any
// area that can be clicked that directs the browser to a landing page. Each click tag defines
// the click-through URL for a different exit. In Ad Manager, tracking pixels are attached to the
// click tags if URLs are valid.
//

type ClickTag struct {

	// Name
	//
	// Name of the click tag, follows the regex "clickTag\\d*"
	//

	Name *string `xml:"name"`

	// Url
	//
	// URL of the click tag.
	//

	Url *string `xml:"url"`
}

// ClickTrackingCreative
//
// A creative that is used for tracking clicks on ads that are served directly from the customers'
// web servers or media servers. NOTE: The size attribute is not used for click tracking creative
// and it will not be persisted upon save.
//

type ClickTrackingCreative struct {

	// Creative
	*Creative

	// ClickTrackingUrl
	//
	// The click tracking URL. This attribute is required.
	//

	ClickTrackingUrl *string `xml:"clickTrackingUrl"`
}

// CollectionSizeError
//
// Error for the size of the collection being too large
//

type CollectionSizeError struct {
	Reason string `xml:"reason"`
}

// CommonError
//
// A place for common errors that can be used across services.
//

type CommonError struct {
	Reason string `xml:"reason"`
}

// ConversionEvent_TrackingUrlsMapEntry
//
// This represents an entry in a map with a key of type ConversionEvent
// and value of type TrackingUrls.
//

type ConversionEvent_TrackingUrlsMapEntry struct {

	// Key

	Key *ConversionEvent `xml:"key"`

	// Value

	Value *TrackingUrls `xml:"value"`
}

// CreativeAction
//
// Represents the actions that can be performed on {@link Creative} objects.
//

type CreativeAction struct {
}

// CreativeAsset
//
// A {@code CreativeAsset} is an asset that can be used in creatives.
//

type CreativeAsset struct {

	// AssetId
	//
	// The ID of the asset. This attribute is generated by Google upon creation.
	//

	AssetId *int64 `xml:"assetId"`

	// AssetByteArray
	//
	// The content of the asset as a byte array. This attribute is required when creating the creative
	// that contains this asset if an {@code assetId} is not provided.
	//
	// <p>When updating the content, pass a new byte array, and set {@code assetId} to null.
	// Otherwise, this field can be null.
	//
	// <p>The {@code assetByteArray} will be {@code null} when the creative is retrieved.
	//

	AssetByteArray *[]byte `xml:"assetByteArray"`

	// FileName
	//
	// The file name of the asset. This attribute is required when creating a new asset (e.g. when
	// {@link #assetByteArray} is not null).
	//

	FileName *string `xml:"fileName"`

	// FileSize
	//
	// The file size of the asset in bytes. This attribute is read-only.
	//

	FileSize *int64 `xml:"fileSize"`

	// AssetUrl
	//
	// A URL where the asset can be previewed at. This field is read-only and set by Google.
	//

	AssetUrl *string `xml:"assetUrl"`

	// Size
	//
	// The size of the asset. Note that this may not always reflect the actual physical size of the
	// asset, but may reflect the expected size. This attribute is read-only and is populated by
	// Google.
	//

	Size *Size `xml:"size"`

	// ClickTags
	//
	// The click tags of the asset. This field is read-only.
	//

	ClickTags []*ClickTag `xml:"clickTags"`

	// ImageDensity
	//
	// The display density of the image. This is the ratio between a dimension in pixels of the image
	// and the dimension in pixels that it should occupy in device-independent pixels when displayed.
	// This attribute is optional and defaults to ONE_TO_ONE.
	//

	ImageDensity *ImageDensity `xml:"imageDensity"`
}

// CustomCreativeAsset
//
// A {@code CustomCreativeAsset} is an association between a {@link CustomCreative} and an asset.
// Any assets that are associated with a creative can be inserted into its HTML snippet.
//

type CustomCreativeAsset struct {

	// MacroName
	//
	// The name by which the associated asset will be referenced. For example, if the value is "foo",
	// then the asset can be inserted into an HTML snippet using the macro: "%%FILE:foo%%".
	//

	MacroName *string `xml:"macroName"`

	// Asset
	//
	// The asset. This attribute is required. To view the asset, use {@link CreativeAsset#assetUrl}.
	//

	Asset *CreativeAsset `xml:"asset"`
}

// CreativeAssetMacroError
//
// Lists all errors associated with creative asset macros.
//

type CreativeAssetMacroError struct {
	Reason string `xml:"reason"`
}

// Creative
//
// A {@code Creative} represents the media for the ad being served.
//
// <p>Read more about creatives on the <a
// href="https://support.google.com/admanager/answer/3185155">Ad Manager Help Center</a>.
//

type Creative struct {

	// AdvertiserId
	//
	// The ID of the advertiser that owns the creative. This attribute is required.
	//

	AdvertiserId *int64 `xml:"advertiserId"`

	// Id
	//
	// Uniquely identifies the {@code Creative}. This value is read-only and is assigned by Google
	// when the creative is created. This attribute is required for updates.
	//

	Id *int64 `xml:"id"`

	// Name
	//
	// The name of the creative. This attribute is required and has a maximum length of 255
	// characters.
	//

	Name *string `xml:"name"`

	// Size
	//
	// The {@link Size} of the creative. This attribute is required for creation and then is
	// read-only.
	//

	Size *Size `xml:"size"`

	// PreviewUrl
	//
	// The URL of the creative for previewing the media. This attribute is read-only and is assigned
	// by Google when a creative is created.
	//

	PreviewUrl *string `xml:"previewUrl"`

	// PolicyLabels
	//
	// Set of policy labels detected for this creative.
	// This attribute is read-only.
	//

	PolicyLabels []*CreativePolicyViolation `xml:"policyLabels"`

	// AppliedLabels
	//
	// The set of labels applied to this creative.
	//

	AppliedLabels []*AppliedLabel `xml:"appliedLabels"`

	// LastModifiedDateTime
	//
	// The date and time this creative was last modified.
	//

	LastModifiedDateTime *DateTime `xml:"lastModifiedDateTime"`

	// CustomFieldValues
	//
	// The values of the custom fields associated with this creative.
	//

	CustomFieldValues []*BaseCustomFieldValue `xml:"customFieldValues"`

	// ThirdPartyDataDeclaration
	//
	// The third party companies associated with this creative.
	//
	// <p>This is distinct from any associated companies that Google may detect programmatically.
	//

	ThirdPartyDataDeclaration *ThirdPartyDataDeclaration `xml:"thirdPartyDataDeclaration"`
}

// CreativeError
//
// Lists all errors associated with creatives.
//

type CreativeError struct {
	Reason string `xml:"reason"`
}

// CreativePage
//
// Captures a page of {@link Creative} objects.
//

type CreativePage struct {

	// TotalResultSetSize
	//
	// The size of the total result set to which this page belongs.
	//

	TotalResultSetSize *int `xml:"totalResultSetSize"`

	// StartIndex
	//
	// The absolute index in the total result set on which this page begins.
	//

	StartIndex *int `xml:"startIndex"`

	// Results
	//
	// The collection of creatives contained within this page.
	//

	Results []*Creative `xml:"results"`
}

// CreativeSetError
//
// Errors relating to creative sets & subclasses.
//

type CreativeSetError struct {
	Reason string `xml:"reason"`
}

// CreativeTemplateError
//
// A catch-all error that lists all generic errors associated with CreativeTemplate.
//

type CreativeTemplateError struct {
	Reason string `xml:"reason"`
}

// CreativeTemplateOperationError
//
// An error that can occur while performing an operation on a creative template.
//

type CreativeTemplateOperationError struct {
	Reason string `xml:"reason"`
}

// CustomCreative
//
// A {@code Creative} that contains an arbitrary HTML snippet and file assets.
//

type CustomCreative struct {

	// HasDestinationUrlCreative
	*HasDestinationUrlCreative

	// HtmlSnippet
	//
	// The HTML snippet that this creative delivers. This attribute is required.
	//

	HtmlSnippet *string `xml:"htmlSnippet"`

	// CustomCreativeAssets
	//
	// A list of file assets that are associated with this creative, and can be referenced in the
	// snippet.
	//

	CustomCreativeAssets []*CustomCreativeAsset `xml:"customCreativeAssets"`

	// IsInterstitial
	//
	// {@code true} if this custom creative is interstitial. An interstitial creative will not
	// consider an impression served until it is fully rendered in the browser.
	//

	IsInterstitial *bool `xml:"isInterstitial"`

	// LockedOrientation
	//
	// A locked orientation for this creative to be displayed in.
	//

	LockedOrientation *LockedOrientation `xml:"lockedOrientation"`

	// SslScanResult
	//
	// The SSL compatibility scan result of this creative.
	//
	// <p>This attribute is read-only and determined by Google.
	//

	SslScanResult *SslScanResult `xml:"sslScanResult"`

	// SslManualOverride
	//
	// The manual override for the SSL compatibility of this creative.
	//
	// <p>This attribute is optional and defaults to {@link SslManualOverride#NO_OVERRIDE}.
	//

	SslManualOverride *SslManualOverride `xml:"sslManualOverride"`

	// IsSafeFrameCompatible
	//
	// Whether the {@link Creative} is compatible for SafeFrame rendering.
	//
	// <p>This attribute is optional and defaults to {@code true}.
	//

	IsSafeFrameCompatible *bool `xml:"isSafeFrameCompatible"`

	// ThirdPartyImpressionTrackingUrls
	//
	// A list of impression tracking URLs to ping when this creative is displayed. This field is
	// optional.
	//

	ThirdPartyImpressionTrackingUrls []*string `xml:"thirdPartyImpressionTrackingUrls"`
}

// CustomCreativeError
//
// Lists all errors associated with custom creatives.
//

type CustomCreativeError struct {
	Reason string `xml:"reason"`
}

// CustomFieldValue
//
// The value of a {@link CustomField} that does not have a {@link CustomField#dataType} of {@link
// CustomFieldDataType#DROP_DOWN}.
//

type CustomFieldValue struct {

	// BaseCustomFieldValue
	*BaseCustomFieldValue

	// Value
	//
	// The value for this field. The appropriate type of {@code Value} is determined by the {@link
	// CustomField#dataType} of the {@code CustomField} that this conforms to.
	//
	// <table>
	// <tr><th>{@link CustomFieldDataType}</th><th>{@link Value} type</th></tr>
	// <tr><td>{@link CustomFieldDataType#STRING STRING}</td><td>{@link TextValue}</td></tr>
	// <tr><td>{@link CustomFieldDataType#NUMBER NUMBER}</td><td>{@link NumberValue}</td></tr>
	// <tr><td>{@link CustomFieldDataType#TOGGLE TOGGLE}</td><td>{@link BooleanValue}</td></tr>
	// </table>
	//

	Value *Value `xml:"value"`
}

// CustomFieldValueError
//
// Errors specific to editing custom field values
//

type CustomFieldValueError struct {
	Reason string `xml:"reason"`
}

// Date
//
// Represents a date.
//

type Date struct {

	// Year
	//
	// Year (e.g., 2009)
	//

	Year *int `xml:"year"`

	// Month
	//
	// Month (1..12)
	//

	Month *int `xml:"month"`

	// Day
	//
	// Day (1..31)
	//

	Day *int `xml:"day"`
}

// DateTime
//
// Represents a date combined with the time of day.
//

type DateTime struct {

	// Date

	Date *Date `xml:"date"`

	// Hour

	Hour *int `xml:"hour"`

	// Minute

	Minute *int `xml:"minute"`

	// Second

	Second *int `xml:"second"`

	// TimeZoneId

	TimeZoneId *string `xml:"timeZoneId"`
}

// DateTimeValue
//
// Contains a date-time value.
//

type DateTimeValue struct {

	// Value
	//
	// The {@code DateTime} value.
	//

	Value *DateTime `xml:"value"`
}

// DateValue
//
// Contains a date value.
//

type DateValue struct {

	// Value
	//
	// The {@code Date} value.
	//

	Value *Date `xml:"value"`
}

// DeactivateCreatives
//
// The action used for deactivating {@link Creative} objects.
//

type DeactivateCreatives struct {
}

func NewDeactivateCreatives() (requestbody.PerformAction, error) {
	return &DeactivateCreatives{}, nil
}
func (a DeactivateCreatives) GetPerformActionBody() (string, error) {
	performActionXML, err := gamxml.DeepMarshal(a, true)
	if err != nil {
		return "", err
	}
	return string(performActionXML), nil
}

func (a DeactivateCreatives) GetActionType() string {
	return "DeactivateCreatives"
}

// DropDownCustomFieldValue
//
// A {@link CustomFieldValue} for a {@link CustomField} that has a {@link CustomField#dataType} of
// {@link CustomFieldDataType#DROP_DOWN}
//

type DropDownCustomFieldValue struct {

	// BaseCustomFieldValue
	*BaseCustomFieldValue

	// CustomFieldOptionId
	//
	// The {@link CustomFieldOption#id ID} of the {@link CustomFieldOption} for this value.
	//

	CustomFieldOptionId *int64 `xml:"customFieldOptionId"`
}

// EntityLimitReachedError
//
// An error that occurs when creating an entity if the limit on the number of allowed entities for
// a network has already been reached.
//

type EntityLimitReachedError struct {
	Reason string `xml:"reason"`
}

// FeatureError
//
// Errors related to feature management.  If you attempt using a feature that is not available to
// the current network you'll receive a FeatureError with the missing feature as the trigger.
//

type FeatureError struct {
	Reason string `xml:"reason"`
}

// FieldPathElement
//
// A segment of a field path. Each dot in a field path defines a new segment.
//

type FieldPathElement struct {

	// Field
	//
	// The name of a field in lower camelcase. (e.g. "biddingStrategy")
	//

	Field *string `xml:"field"`

	// Index
	//
	// For list fields, this is a 0-indexed position in the list. Null for non-list fields.
	//

	Index *int `xml:"index"`
}

// FileError
//
// A list of all errors to be used for problems related to files.
//

type FileError struct {
	Reason string `xml:"reason"`
}

// HasDestinationUrlCreative
//
// A {@code Creative} that has a destination url
//

type HasDestinationUrlCreative struct {

	// Creative
	*Creative

	// DestinationUrl
	//
	// The URL that the user is directed to if they click on the creative. This attribute is required
	// unless the {@link destinationUrlType} is {@link DestinationUrlType#NONE}, and has a maximum
	// length of 1024 characters.
	//

	DestinationUrl *string `xml:"destinationUrl"`

	// DestinationUrlType
	//
	// The action that should be performed if the user clicks on the creative. This attribute is
	// optional and defaults to {@link DestinationUrlType#CLICK_TO_WEB}.
	//

	DestinationUrlType *DestinationUrlType `xml:"destinationUrlType"`
}

// HasHtmlSnippetDynamicAllocationCreative
//
// Dynamic allocation creative with a backfill code snippet.
//

type HasHtmlSnippetDynamicAllocationCreative struct {

	// BaseDynamicAllocationCreative
	*BaseDynamicAllocationCreative

	// CodeSnippet
	//
	// The code snippet (ad tag) from Ad Exchange or AdSense to traffic the dynamic allocation
	// creative. Only valid Ad Exchange or AdSense parameters will be considered. Any extraneous HTML
	// or JavaScript will be ignored.
	//

	CodeSnippet *string `xml:"codeSnippet"`
}

// Html5Creative
//
// A {@code Creative} that contains a zipped HTML5 bundle asset, a list of third party impression
// trackers, and a third party click tracker.
//

type Html5Creative struct {

	// Creative
	*Creative

	// OverrideSize
	//
	// Allows the creative size to differ from the actual HTML5 asset size. This attribute is
	// optional.
	//

	OverrideSize *bool `xml:"overrideSize"`

	// ThirdPartyImpressionTrackingUrls
	//
	// Impression tracking URLs to ping when this creative is displayed. This field is optional.
	//

	ThirdPartyImpressionTrackingUrls []*string `xml:"thirdPartyImpressionTrackingUrls"`

	// ThirdPartyClickTrackingUrl
	//
	// A click tracking URL to ping when this creative is clicked. This field is optional.
	//

	ThirdPartyClickTrackingUrl *string `xml:"thirdPartyClickTrackingUrl"`

	// LockedOrientation
	//
	// A locked orientation for this creative to be displayed in.
	//

	LockedOrientation *LockedOrientation `xml:"lockedOrientation"`

	// SslScanResult
	//
	// The SSL compatibility scan result of this creative.
	//
	// <p>This attribute is read-only and determined by Google.
	//

	SslScanResult *SslScanResult `xml:"sslScanResult"`

	// SslManualOverride
	//
	// The manual override for the SSL compatibility of this creative.
	//
	// <p>This attribute is optional and defaults to {@link SslManualOverride#NO_OVERRIDE}.
	//

	SslManualOverride *SslManualOverride `xml:"sslManualOverride"`

	// IsSafeFrameCompatible
	//
	// Whether the {@link Creative} is compatible for SafeFrame rendering.
	//
	// <p>This attribute is optional and defaults to {@code true}.
	//

	IsSafeFrameCompatible *bool `xml:"isSafeFrameCompatible"`

	// Html5Asset
	//
	// The HTML5 asset. To preview the HTML5 asset, use the {@link CreativeAsset#assetUrl}. In this
	// field, the {@link CreativeAsset#assetByteArray} must be a zip bundle and the {@link
	// CreativeAsset#fileName} must have a zip extension. This attribute is required.
	//

	Html5Asset *CreativeAsset `xml:"html5Asset"`
}

// HtmlBundleProcessorError
//
// Lists all errors associated with html5 file processing.
//

type HtmlBundleProcessorError struct {
	Reason string `xml:"reason"`
}

// ImageCreative
//
// A {@code Creative} that displays an image.
//

type ImageCreative struct {

	// BaseImageCreative
	*BaseImageCreative

	// AltText
	//
	// Alternative text to be rendered along with the creative used mainly for accessibility. This
	// field is optional and has a maximum length of 500 characters.
	//

	AltText *string `xml:"altText"`

	// ThirdPartyImpressionTrackingUrls
	//
	// A list of impression tracking URL to ping when this creative is displayed. This field is
	// optional and each string has a maximum length of 1024 characters.
	//

	ThirdPartyImpressionTrackingUrls []*string `xml:"thirdPartyImpressionTrackingUrls"`

	// SecondaryImageAssets
	//
	// The list of secondary image assets associated with this creative. This attribute is optional.
	//
	// <p>Secondary image assets can be used to store different resolution versions of the primary
	// asset for use on non-standard density screens.
	//

	SecondaryImageAssets []*CreativeAsset `xml:"secondaryImageAssets"`
}

// ImageError
//
// Lists all errors associated with images.
//

type ImageError struct {
	Reason string `xml:"reason"`
}

// ImageOverlayCreative
//
// An overlay {@code Creative} that displays an image and is served via VAST 2.0 XML. Overlays cover
// part of the video content they are displayed on top of. This creative is read only prior to
// v201705.
//

type ImageOverlayCreative struct {

	// BaseImageCreative
	*BaseImageCreative

	// CompanionCreativeIds
	//
	// The IDs of the companion creatives that are associated with this creative. This attribute is
	// optional. This attribute is read-only.
	//

	CompanionCreativeIds []*int64 `xml:"companionCreativeIds"`

	// TrackingUrls
	//
	// A map from {@code ConversionEvent} to a list of URLs that will be pinged when the event
	// happens. This attribute is optional.
	//

	TrackingUrls []*ConversionEvent_TrackingUrlsMapEntry `xml:"trackingUrls"`

	// LockedOrientation
	//
	// A locked orientation for this creative to be displayed in.
	//

	LockedOrientation *LockedOrientation `xml:"lockedOrientation"`

	// CustomParameters
	//
	// A comma separated key=value list of parameters that will be supplied to the creative, written
	// into the VAST {@code AdParameters} node. This attribute is optional.
	//

	CustomParameters *string `xml:"customParameters"`

	// Duration
	//
	// Minimum suggested duration in milliseconds. This attribute is optional.
	//

	Duration *int `xml:"duration"`

	// VastPreviewUrl
	//
	// An ad tag URL that will return a preview of the VAST XML response specific to this creative.
	// This attribute is read-only.
	//

	VastPreviewUrl *string `xml:"vastPreviewUrl"`
}

// ImageRedirectCreative
//
// A {@code Creative} that loads an image asset from a specified URL.
//

type ImageRedirectCreative struct {

	// BaseImageRedirectCreative
	*BaseImageRedirectCreative

	// AltText
	//
	// Alternative text to be rendered along with the creative used mainly for accessibility. This
	// field is optional and has a maximum length of 500 characters.
	//

	AltText *string `xml:"altText"`

	// ThirdPartyImpressionTrackingUrls
	//
	// A list of impression tracking URL to ping when this creative is displayed. This field is
	// optional and each string has a maximum length of 1024 characters.
	//

	ThirdPartyImpressionTrackingUrls []*string `xml:"thirdPartyImpressionTrackingUrls"`
}

// ImageRedirectOverlayCreative
//
// An overlay {@code Creative} that loads an image asset from a specified URL and is served via VAST
// XML. Overlays cover part of the video content they are displayed on top of. This creative is read
// only.
//

type ImageRedirectOverlayCreative struct {

	// BaseImageRedirectCreative
	*BaseImageRedirectCreative

	// AssetSize
	//
	// The size of the image asset. Note that this may differ from {@link #size} if the asset is not
	// expected to fill the entire video player. This attribute is optional.
	//

	AssetSize *Size `xml:"assetSize"`

	// Duration
	//
	// Minimum suggested duration in milliseconds. This attribute is optional.
	//

	Duration *int `xml:"duration"`

	// CompanionCreativeIds
	//
	// The IDs of the companion creatives that are associated with this creative. This attribute is
	// optional.
	//

	CompanionCreativeIds []*int64 `xml:"companionCreativeIds"`

	// TrackingUrls
	//
	// A map from {@code ConversionEvent} to a list of URLs that will be pinged when the event
	// happens. This attribute is optional.
	//

	TrackingUrls []*ConversionEvent_TrackingUrlsMapEntry `xml:"trackingUrls"`

	// CustomParameters
	//
	// A comma separated key=value list of parameters that will be supplied to the creative, written
	// into the VAST {@code AdParameters} node. This attribute is optional.
	//

	CustomParameters *string `xml:"customParameters"`

	// VastPreviewUrl
	//
	// An ad tag URL that will return a preview of the VAST XML response specific to this creative.
	// This attribute is read-only.
	//

	VastPreviewUrl *string `xml:"vastPreviewUrl"`
}

// InternalApiError
//
// Indicates that a server-side error has occured. {@code InternalApiError}s
// are generally not the result of an invalid request or message sent by the
// client.
//

type InternalApiError struct {
	Reason string `xml:"reason"`
}

// InternalRedirectCreative
//
// A {@code Creative} hosted by Campaign Manager 360.
//
// <p>Similar to third-party creatives, a Campaign Manager 360 tag is used to retrieve a creative
// asset. However, Campaign Manager 360 tags are not sent to the user's browser. Instead, they are
// processed internally within the Google Marketing Platform system..
//

type InternalRedirectCreative struct {

	// Creative
	*Creative

	// LockedOrientation
	//
	// A locked orientation for this creative to be displayed in.
	//

	LockedOrientation *LockedOrientation `xml:"lockedOrientation"`

	// AssetSize
	//
	// The asset size of an internal redirect creative. Note that this may differ from {@code size} if
	// users set {@code overrideSize} to true. This attribute is read-only and is populated by Google.
	//

	AssetSize *Size `xml:"assetSize"`

	// InternalRedirectUrl
	//
	// The internal redirect URL of the DFA or DART for Publishers hosted creative. This attribute is
	// required and has a maximum length of 1024 characters.
	//

	InternalRedirectUrl *string `xml:"internalRedirectUrl"`

	// OverrideSize
	//
	// Allows the creative size to differ from the actual size specified in the internal redirect's
	// url. This attribute is optional.
	//

	OverrideSize *bool `xml:"overrideSize"`

	// IsInterstitial
	//
	// {@code true} if this internal redirect creative is interstitial.
	//

	IsInterstitial *bool `xml:"isInterstitial"`

	// SslScanResult
	//
	// The SSL compatibility scan result for this creative.
	//
	// <p>This attribute is read-only and determined by Google.
	//

	SslScanResult *SslScanResult `xml:"sslScanResult"`

	// SslManualOverride
	//
	// The manual override for the SSL compatibility of this creative.
	//
	// <p>This attribute is optional and defaults to {@link SslManualOverride#NO_OVERRIDE}.
	//

	SslManualOverride *SslManualOverride `xml:"sslManualOverride"`

	// ThirdPartyImpressionTrackingUrls
	//
	// A list of impression tracking URLs to ping when this creative is displayed. This field is
	// optional.
	//

	ThirdPartyImpressionTrackingUrls []*string `xml:"thirdPartyImpressionTrackingUrls"`
}

// InvalidPhoneNumberError
//
// Lists all errors associated with phone numbers.
//

type InvalidPhoneNumberError struct {
	Reason string `xml:"reason"`
}

// InvalidUrlError
//
// Lists all errors associated with URLs.
//

type InvalidUrlError struct {
	Reason string `xml:"reason"`
}

// LabelEntityAssociationError
//
// Errors specific to creating label entity associations.
//

type LabelEntityAssociationError struct {
	Reason string `xml:"reason"`
}

// LegacyDfpCreative
//
// A {@code Creative} that isn't supported by Google DFP, but was migrated from DART. Creatives of
// this type cannot be created or modified.
//

type LegacyDfpCreative struct {
}

// LineItemCreativeAssociationError
//
// Lists all errors associated with line item-to-creative association dates.
//

type LineItemCreativeAssociationError struct {
	Reason string `xml:"reason"`
}

// LongCreativeTemplateVariableValue
//
// Stores values of {@link CreativeTemplateVariable} of {@link VariableType#LONG}.
//

type LongCreativeTemplateVariableValue struct {

	// BaseCreativeTemplateVariableValue
	*BaseCreativeTemplateVariableValue

	// Value
	//
	// The long value of {@link CreativeTemplateVariable}
	//

	Value *int64 `xml:"value"`
}

// NotNullError
//
// Caused by supplying a null value for an attribute that cannot be null.
//

type NotNullError struct {
	Reason string `xml:"reason"`
}

// NullError
//
// Errors associated with violation of a NOT NULL check.
//

type NullError struct {
	Reason string `xml:"reason"`
}

// NumberValue
//
// Contains a numeric value.
//

type NumberValue struct {

	// Value
	//
	// The numeric value represented as a string.
	//

	Value *string `xml:"value"`
}

// ParseError
//
// Lists errors related to parsing.
//

type ParseError struct {
	Reason string `xml:"reason"`
}

// PermissionError
//
// Errors related to incorrect permission.
//

type PermissionError struct {
	Reason string `xml:"reason"`
}

// ProgrammaticCreative
//
// A {@code Creative} used for programmatic trafficking. This creative will be auto-created with the
// right approval from the buyer. This creative cannot be created through the API. This creative can
// be updated.
//

type ProgrammaticCreative struct {
}

// PublisherQueryLanguageContextError
//
// An error that occurs while executing a PQL query contained in
// a {@link Statement} object.
//

type PublisherQueryLanguageContextError struct {
	Reason string `xml:"reason"`
}

// PublisherQueryLanguageSyntaxError
//
// An error that occurs while parsing a PQL query contained in a
// {@link Statement} object.
//

type PublisherQueryLanguageSyntaxError struct {
	Reason string `xml:"reason"`
}

// QuotaError
//
// Describes a client-side error on which a user is attempting
// to perform an action to which they have no quota remaining.
//

type QuotaError struct {
	Reason string `xml:"reason"`
}

// RangeError
//
// A list of all errors associated with the Range constraint.
//

type RangeError struct {
	Reason string `xml:"reason"`
}

// RedirectAsset
//
// An externally hosted asset.
//

type RedirectAsset struct {

	// Asset
	*Asset

	// RedirectUrl
	//
	// The URL where the asset is hosted.
	//

	RedirectUrl *string `xml:"redirectUrl"`
}

// RequiredCollectionError
//
// A list of all errors to be used for validating sizes of collections.
//

type RequiredCollectionError struct {
	Reason string `xml:"reason"`
}

// RequiredError
//
// Errors due to missing required field.
//

type RequiredError struct {
	Reason string `xml:"reason"`
}

// RequiredNumberError
//
// A list of all errors to be used in conjunction with required number
// validators.
//

type RequiredNumberError struct {
	Reason string `xml:"reason"`
}

// RequiredSizeError
//
// A list of all errors to be used for validating {@link Size}.
//

type RequiredSizeError struct {
	Reason string `xml:"reason"`
}

// RichMediaStudioChildAssetProperty
//
// Represents a child asset in {@code RichMediaStudioCreative}.
//

type RichMediaStudioChildAssetProperty struct {

	// Name
	//
	// The name of the asset as known by Rich Media Studio. This attribute is readonly.
	//

	Name *string `xml:"name"`

	// Type
	//
	// Required file type of the asset.  This attribute is readonly.
	//

	Type *RichMediaStudioChildAssetPropertyType `xml:"type"`

	// TotalFileSize
	//
	// The total size of the asset in bytes. This attribute is readonly.
	//

	TotalFileSize *int64 `xml:"totalFileSize"`

	// Width
	//
	// Width of the widget in pixels. This attribute is readonly.
	//

	Width *int `xml:"width"`

	// Height
	//
	// Height of the widget in pixels. This attribute is readonly.
	//

	Height *int `xml:"height"`

	// Url
	//
	// The URL of the asset. This attribute is readonly.
	//

	Url *string `xml:"url"`
}

// RichMediaStudioCreative
//
// A {@code Creative} that is created by a Rich Media Studio. You cannot create this creative, but
// you can update some fields of this creative.
//

type RichMediaStudioCreative struct {

	// BaseRichMediaStudioCreative
	*BaseRichMediaStudioCreative

	// LockedOrientation
	//
	// A locked orientation for this creative to be displayed in.
	//

	LockedOrientation *LockedOrientation `xml:"lockedOrientation"`

	// IsInterstitial
	//
	// {@code true} if this is interstitial. An interstitial creative will not consider an impression
	// served until it is fully rendered in the browser. This attribute is readonly.
	//

	IsInterstitial *bool `xml:"isInterstitial"`
}

// RichMediaStudioCreativeError
//
// Lists all errors associated with Studio creatives.
//

type RichMediaStudioCreativeError struct {
	Reason string `xml:"reason"`
}

// ServerError
//
// Errors related to the server.
//

type ServerError struct {
	Reason string `xml:"reason"`
}

// SetTopBoxCreative
//
// A {@code Creative} that will be served into cable set-top boxes. There are no assets for this
// creative type, as they are hosted by external cable systems.
//

type SetTopBoxCreative struct {

	// BaseVideoCreative
	*BaseVideoCreative

	// ExternalAssetId
	//
	// An external asset identifier that is used in the cable system. This attribute is read-only
	// after creation.
	//

	ExternalAssetId *string `xml:"externalAssetId"`

	// ProviderId
	//
	// An identifier for the provider in the cable system. This attribute is read-only after creation.
	//

	ProviderId *string `xml:"providerId"`

	// AvailabilityRegionIds
	//
	// IDs of regions where the creative is available to serve from a local cable video-on-demand
	// server. This attribute is optional.
	//

	AvailabilityRegionIds []*string `xml:"availabilityRegionIds"`

	// LicenseWindowStartDateTime
	//
	// The date and time that this creative can begin serving from a local cable video-on-demand
	// server. This attribute is optional.
	//

	LicenseWindowStartDateTime *DateTime `xml:"licenseWindowStartDateTime"`

	// LicenseWindowEndDateTime
	//
	// The date and time that this creative can no longer be served from a local cable video-on-demand
	// server. This attribute is optional.
	//

	LicenseWindowEndDateTime *DateTime `xml:"licenseWindowEndDateTime"`
}

// SetTopBoxCreativeError
//
// Errors associated with {@link SetTopBoxCreative set-top box creatives}.
//

type SetTopBoxCreativeError struct {
	Reason string `xml:"reason"`
}

// SetValue
//
// Contains a set of {@link Value Values}. May not contain duplicates.
//

type SetValue struct {

	// Value
	*Value

	// Values
	//
	// The values. They must all be the same type of {@code Value} and not contain duplicates.
	//

	Values []*Value `xml:"values"`
}

// Size
//
// Represents the dimensions of an {@link AdUnit}, {@link LineItem} or {@link Creative}.
//
// <p>For interstitial size (out-of-page), native, ignored and fluid size, {@link Size} must be 1x1.
//

type Size struct {

	// Width
	//
	// The width of the {@link AdUnit}, {@link LineItem} or {@link Creative}.
	//

	Width *int `xml:"width"`

	// Height
	//
	// The height of the {@link AdUnit}, {@link LineItem} or {@link Creative}.
	//

	Height *int `xml:"height"`

	// IsAspectRatio
	//
	// Whether this size represents an aspect ratio.
	//

	IsAspectRatio *bool `xml:"isAspectRatio"`
}

// SoapRequestHeader
//
// Represents the SOAP request header used by API requests.
//

type SoapRequestHeader struct {

	// NetworkCode
	//
	// The network code to use in the context of a request.
	//

	NetworkCode *string `xml:"networkCode"`

	// ApplicationName
	//
	// The name of client library application.
	//

	ApplicationName *string `xml:"applicationName"`
}

// SoapResponseHeader
//
// Represents the SOAP request header used by API responses.
//

type SoapResponseHeader struct {

	// RequestId

	RequestId *string `xml:"requestId"`

	// ResponseTime

	ResponseTime *int64 `xml:"responseTime"`
}

// Statement
//
// Captures the {@code WHERE}, {@code ORDER BY} and {@code LIMIT} clauses of a
// PQL query. Statements are typically used to retrieve objects of a predefined
// domain type, which makes SELECT clause unnecessary.
// <p>
// An example query text might be {@code "WHERE status = 'ACTIVE' ORDER BY id
// LIMIT 30"}.
// </p>
// <p>
// Statements support bind variables. These are substitutes for literals
// and can be thought of as input parameters to a PQL query.
// </p>
// <p>
// An example of such a query might be {@code "WHERE id = :idValue"}.
// </p>
// <p>
// Statements also support use of the LIKE keyword. This provides wildcard string matching.
// </p>
// <p>
// An example of such a query might be {@code "WHERE name LIKE '%searchString%'"}.
// </p>
// The value for the variable idValue must then be set with an object of type
// {@link Value}, e.g., {@link NumberValue}, {@link TextValue} or
// {@link BooleanValue}.
//

type Statement struct {

	// Query
	//
	// Holds the query in PQL syntax. The syntax is:<br>
	// <code>[WHERE <condition> {[AND | OR] <condition> ...}]</code><br>
	// <code>[ORDER BY <property> [ASC | DESC]]</code><br>
	// <code>[LIMIT {[<offset>,] <count>} | {<count> OFFSET <offset>}]</code><br>
	// <p>
	// <code><condition></code><br>
	// &nbsp;&nbsp;&nbsp;&nbsp;
	// <code>:= <property> {< | <= | > | >= | = | != } <value></code><br>
	// <code><condition></code><br>
	// &nbsp;&nbsp;&nbsp;&nbsp;
	// <code>:= <property> {< | <= | > | >= | = | != } <bind variable></code><br>
	// <code><condition> := <property> IN <list></code><br>
	// <code><condition> := <property> IS NULL</code><br>
	// <code><condition> := <property> LIKE <wildcard%match></code><br>
	// <code><bind variable> := :<name></code><br>
	// </p>
	//

	Query *string `xml:"query"`

	// Values
	//
	// Holds keys and values for bind variables and their values. The key is the
	// name of the bind variable. The value is the literal value of the variable.
	// <p>
	// In the example {@code "WHERE status = :bindStatus ORDER BY id LIMIT 30"},
	// the bind variable, represented by {@code :bindStatus} is named {@code
	// bindStatus}, which would also be the parameter map key. The bind variable's
	// value would be represented by a parameter map value of type
	// {@link TextValue}. The final result, for example, would be an entry of
	// {@code "bindStatus" => StringParam("ACTIVE")}.
	// </p>
	//

	Values []*String_ValueMapEntry `xml:"values"`
}

// StatementError
//
// An error that occurs while parsing {@link Statement} objects.
//

type StatementError struct {
	Reason string `xml:"reason"`
}

// StringCreativeTemplateVariableValue
//
// Stores values of {@link CreativeTemplateVariable} of
// {@link VariableType#STRING} and {@link VariableType#LIST}.
//

type StringCreativeTemplateVariableValue struct {

	// BaseCreativeTemplateVariableValue
	*BaseCreativeTemplateVariableValue

	// Value
	//
	// The string value of {@link CreativeTemplateVariable}
	//

	Value *string `xml:"value"`
}

// StringFormatError
//
// A list of error code for reporting invalid content of input strings.
//

type StringFormatError struct {
	Reason string `xml:"reason"`
}

// StringLengthError
//
// Errors for Strings which do not meet given length constraints.
//

type StringLengthError struct {
	Reason string `xml:"reason"`
}

// String_ValueMapEntry
//
// This represents an entry in a map with a key of type String
// and value of type Value.
//

type String_ValueMapEntry struct {

	// Key

	Key *string `xml:"key"`

	// Value

	Value *Value `xml:"value"`
}

// SwiffyConversionError
//
// Error for converting flash to swiffy asset.
//

type SwiffyConversionError struct {
	Reason string `xml:"reason"`
}

// TemplateCreative
//
// A {@code Creative} that is created by the specified creative template.
//

type TemplateCreative struct {

	// Creative
	*Creative

	// CreativeTemplateId
	//
	// Creative template ID that this creative is created from.
	//

	CreativeTemplateId *int64 `xml:"creativeTemplateId"`

	// IsInterstitial
	//
	// {@code true} if this template instantiated creative is interstitial. This attribute is
	// read-only and is assigned by Google based on the creative template.
	//

	IsInterstitial *bool `xml:"isInterstitial"`

	// IsNativeEligible
	//
	// {@code true} if this template instantiated creative is eligible for native adserving. This
	// attribute is read-only and is assigned by Google based on the creative template.
	//

	IsNativeEligible *bool `xml:"isNativeEligible"`

	// IsSafeFrameCompatible
	//
	// Whether the {@link Creative} is compatible for SafeFrame rendering.
	//
	// <p>This attribute is read-only and is assigned by Google based on the {@link CreativeTemplate}.
	//

	IsSafeFrameCompatible *bool `xml:"isSafeFrameCompatible"`

	// DestinationUrl
	//
	// The URL the user is directed to if they click on the creative. This attribute is only required
	// if the template snippet contains the {@code %u} or {@code %%DEST_URL%%} macro. It has a maximum
	// length of 1024 characters.
	//

	DestinationUrl *string `xml:"destinationUrl"`

	// CreativeTemplateVariableValues
	//
	// Stores values of {@link CreativeTemplateVariable} in the {@link CreativeTemplate}.
	//

	CreativeTemplateVariableValues []*BaseCreativeTemplateVariableValue `xml:"creativeTemplateVariableValues"`

	// SslScanResult
	//
	// The SSL compatibility scan result for this creative.
	//
	// <p>This attribute is read-only and determined by Google.
	//

	SslScanResult *SslScanResult `xml:"sslScanResult"`

	// SslManualOverride
	//
	// The manual override for the SSL compatibility of this creative.
	//
	// <p>This attribute is optional and defaults to {@link SslManualOverride#NO_OVERRIDE}.
	//

	SslManualOverride *SslManualOverride `xml:"sslManualOverride"`

	// LockedOrientation
	//
	// A locked orientation for this creative to be displayed in.
	//

	LockedOrientation *LockedOrientation `xml:"lockedOrientation"`
}

// TemplateInstantiatedCreativeError
//
// Lists all errors associated with template instantiated creatives.
//

type TemplateInstantiatedCreativeError struct {
	Reason string `xml:"reason"`
}

// TextValue
//
// Contains a string value.
//

type TextValue struct {

	// Value
	//
	// The string value.
	//

	Value *string `xml:"value"`
}

// ThirdPartyCreative
//
// A {@code Creative} that is served by a 3rd-party vendor.
//

type ThirdPartyCreative struct {

	// Creative
	*Creative

	// Snippet
	//
	// The HTML snippet that this creative delivers. This attribute is required.
	//

	Snippet *string `xml:"snippet"`

	// ExpandedSnippet
	//
	// The HTML snippet that this creative delivers with macros expanded. This attribute is read-only
	// and is set by Google.
	//

	ExpandedSnippet *string `xml:"expandedSnippet"`

	// SslScanResult
	//
	// The SSL compatibility scan result for this creative.
	//
	// <p>This attribute is read-only and determined by Google.
	//

	SslScanResult *SslScanResult `xml:"sslScanResult"`

	// SslManualOverride
	//
	// The manual override for the SSL compatibility of this creative.
	//
	// <p>This attribute is optional and defaults to {@link SslManualOverride#NO_OVERRIDE}.
	//

	SslManualOverride *SslManualOverride `xml:"sslManualOverride"`

	// LockedOrientation
	//
	// A locked orientation for this creative to be displayed in.
	//

	LockedOrientation *LockedOrientation `xml:"lockedOrientation"`

	// IsSafeFrameCompatible
	//
	// Whether the {@link Creative} is compatible for SafeFrame rendering.
	//
	// <p>This attribute is optional and defaults to {@code true}.
	//

	IsSafeFrameCompatible *bool `xml:"isSafeFrameCompatible"`

	// ThirdPartyImpressionTrackingUrls
	//
	// A list of impression tracking URLs to ping when this creative is displayed. This field is
	// optional.
	//

	ThirdPartyImpressionTrackingUrls []*string `xml:"thirdPartyImpressionTrackingUrls"`

	// AmpRedirectUrl
	//
	// The URL of the AMP creative.
	//

	AmpRedirectUrl *string `xml:"ampRedirectUrl"`
}

// ThirdPartyDataDeclaration
//
// Represents a set of declarations about what (if any) third party companies are associated with a
// given creative.
//
// <p>This can be set at the network level, as a default for all creatives, or overridden for a
// particular creative.
//

type ThirdPartyDataDeclaration struct {

	// DeclarationType

	DeclarationType *DeclarationType `xml:"declarationType"`

	// ThirdPartyCompanyIds

	ThirdPartyCompanyIds []*int64 `xml:"thirdPartyCompanyIds"`
}

// TrackingUrls
//
// A list of URLs that should be pinged for a conversion event.
//

type TrackingUrls struct {

	// Urls
	//
	// A list of all URLs that should be pinged.
	//

	Urls []*string `xml:"urls"`
}

// TranscodingError
//
// Errors associated with the video and audio transcoding flow.
//

type TranscodingError struct {
	Reason string `xml:"reason"`
}

// TypeError
//
// An error for a field which is an invalid type.
//

type TypeError struct {
	Reason string `xml:"reason"`
}

// UniqueError
//
// An error for a field which must satisfy a uniqueness constraint
//

type UniqueError struct {
	Reason string `xml:"reason"`
}

// UnsupportedCreative
//
// A {@code Creative} that isn't supported by this version of the API. This object is readonly and
// when encountered should be reported on the Ad Manager API forum.
//

type UnsupportedCreative struct {

	// Creative
	*Creative

	// UnsupportedCreativeType
	//
	// The creative type that is unsupported by this API version.
	//

	UnsupportedCreativeType *string `xml:"unsupportedCreativeType"`
}

// UpdateResult
//
// Represents the result of performing an action on objects.
//

type UpdateResult struct {

	// NumChanges
	//
	// The number of objects that were changed as a result of performing the
	// action.
	//

	NumChanges *int `xml:"numChanges"`
}

// UrlCreativeTemplateVariableValue
//
// Stores values of {@link CreativeTemplateVariable} of {@link VariableType#URL}.
//

type UrlCreativeTemplateVariableValue struct {

	// BaseCreativeTemplateVariableValue
	*BaseCreativeTemplateVariableValue

	// Value
	//
	// The url value of {@link CreativeTemplateVariable}
	//

	Value *string `xml:"value"`
}

// Value
//
// {@code Value} represents a value.
//

type Value struct {
}

// VastRedirectCreative
//
// A {@code Creative} that points to an externally hosted VAST ad and is served via VAST XML as a
// VAST Wrapper.
//

type VastRedirectCreative struct {

	// Creative
	*Creative

	// VastXmlUrl
	//
	// The URL where the 3rd party VAST XML is hosted. This attribute is required.
	//

	VastXmlUrl *string `xml:"vastXmlUrl"`

	// VastRedirectType
	//
	// The type of VAST ad that this redirects to. This attribute is required.
	//

	VastRedirectType *VastRedirectType `xml:"vastRedirectType"`

	// Duration
	//
	// The duration of the VAST ad in milliseconds. This attribute is required.
	//

	Duration *int `xml:"duration"`

	// CompanionCreativeIds
	//
	// The IDs of the companion creatives that are associated with this creative. This attribute is
	// optional.
	//

	CompanionCreativeIds []*int64 `xml:"companionCreativeIds"`

	// TrackingUrls
	//
	// A map from {@code ConversionEvent} to a list of URLs that will be pinged when the event
	// happens. This attribute is optional.
	//

	TrackingUrls []*ConversionEvent_TrackingUrlsMapEntry `xml:"trackingUrls"`

	// VastPreviewUrl
	//
	// An ad tag URL that will return a preview of the VAST XML response specific to this creative.
	// This attribute is read-only.
	//

	VastPreviewUrl *string `xml:"vastPreviewUrl"`

	// SslScanResult
	//
	// The SSL compatibility scan result for this creative.
	//
	// <p>This attribute is read-only and determined by Google.
	//

	SslScanResult *SslScanResult `xml:"sslScanResult"`

	// SslManualOverride
	//
	// The manual override for the SSL compatibility of this creative.
	//
	// <p>This attribute is optional and defaults to {@link SslManualOverride#NO_OVERRIDE}.
	//

	SslManualOverride *SslManualOverride `xml:"sslManualOverride"`

	// IsAudio
	//
	// Whether the 3rd party VAST XML points to an audio ad. When true, {@link
	// VastRedirectCreative#size} will always be 1x1.
	//

	IsAudio *bool `xml:"isAudio"`
}

// VideoCreative
//
// A {@code Creative} that contains Ad Manager hosted video ads and is served via VAST XML.
//

type VideoCreative struct {

	// BaseVideoCreative
	*BaseVideoCreative

	// VideoSourceUrl
	//
	// A URL that points to the source media that will be used for transcoding.
	//

	VideoSourceUrl *string `xml:"videoSourceUrl"`
}

// VideoMetadata
//
// Metadata for a video asset.
//

type VideoMetadata struct {

	// ScalableType
	//
	// The scalable type of the asset. This attribute is required.
	//

	ScalableType *ScalableType `xml:"scalableType"`

	// Duration
	//
	// The duration of the asset in milliseconds. This attribute is required.
	//

	Duration *int `xml:"duration"`

	// BitRate
	//
	// The bit rate of the asset in kbps. If the asset can play at a range of bit rates (such as an
	// Http Live Streaming video), then set the bit rate to zero and populate the minimum and maximum
	// bit rate instead.
	//

	BitRate *int `xml:"bitRate"`

	// MinimumBitRate
	//
	// The minimum bitrate of the video in kbps. Only set this if the asset can play at a range of bit
	// rates.
	//

	MinimumBitRate *int `xml:"minimumBitRate"`

	// MaximumBitRate
	//
	// The maximum bitrate of the video in kbps. Only set this if the asset can play at a range of bit
	// rates.
	//

	MaximumBitRate *int `xml:"maximumBitRate"`

	// Size
	//
	// The size (width and height) of the asset. This attribute is required.
	//

	Size *Size `xml:"size"`

	// MimeType
	//
	// The mime type of the asset. This attribute is required.
	//

	MimeType *MimeType `xml:"mimeType"`

	// DeliveryType
	//
	// The delivery type of the asset. This attribute is required.
	//

	DeliveryType *VideoDeliveryType `xml:"deliveryType"`

	// Codecs
	//
	// The codecs of the asset. This attribute is optional and defaults to an empty list.
	//

	Codecs []*string `xml:"codecs"`
}

// VideoRedirectAsset
//
// An externally-hosted video asset.
//

type VideoRedirectAsset struct {

	// RedirectAsset
	*RedirectAsset

	// Metadata
	//
	// Metadata related to the asset. This attribute is required.
	//

	Metadata *VideoMetadata `xml:"metadata"`
}

// VideoRedirectCreative
//
// A {@code Creative} that contains externally hosted video ads and is served via VAST XML.
//

type VideoRedirectCreative struct {

	// BaseVideoCreative
	*BaseVideoCreative

	// VideoAssets
	//
	// The video creative assets.
	//

	VideoAssets []*VideoRedirectAsset `xml:"videoAssets"`

	// MezzanineFile
	//
	// The high quality mezzanine video asset.
	//

	MezzanineFile *VideoRedirectAsset `xml:"mezzanineFile"`
}

// AdIdType
//
// The registry that an ad ID belongs to.
type AdIdType string

const (

	// AdIdTypeUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	AdIdTypeUnknown AdIdType = "UNKNOWN"

	// AdIdTypeAdId
	//
	// The ad ID is registered with ad-id.org.
	//
	AdIdTypeAdId AdIdType = "AD_ID"

	// AdIdTypeClearcast
	//
	// The ad ID is registered with clearcast.co.uk.
	//
	AdIdTypeClearcast AdIdType = "CLEARCAST"

	// AdIdTypeNone
	//
	// The creative does not have an ad ID outside of Ad Manager.
	//
	AdIdTypeNone AdIdType = "NONE"
)

// ApiVersionErrorReasonReason
const (

	// ApiVersionErrorReasonReasonUpdateToNewerVersion
	//
	// Indicates that the operation is not allowed in the version the request
	// was made in.
	//
	ApiVersionErrorReasonReasonUpdateToNewerVersion = "UPDATE_TO_NEWER_VERSION"

	// ApiVersionErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ApiVersionErrorReasonReasonUnknown = "UNKNOWN"
)

// AssetErrorReasonReason
//
// The reasons for the target error.
const (

	// AssetErrorReasonReasonNonUniqueName
	//
	// An asset name must be unique across advertiser.
	//
	AssetErrorReasonReasonNonUniqueName = "NON_UNIQUE_NAME"

	// AssetErrorReasonReasonFileNameTooLong
	//
	// The file name is too long.
	//
	AssetErrorReasonReasonFileNameTooLong = "FILE_NAME_TOO_LONG"

	// AssetErrorReasonReasonFileSizeTooLarge
	//
	// The file size is too large.
	//
	AssetErrorReasonReasonFileSizeTooLarge = "FILE_SIZE_TOO_LARGE"

	// AssetErrorReasonReasonMissingRequiredDynamicAllocationClient
	//
	// Required client code is not present in the code snippet.
	//
	AssetErrorReasonReasonMissingRequiredDynamicAllocationClient = "MISSING_REQUIRED_DYNAMIC_ALLOCATION_CLIENT"

	// AssetErrorReasonReasonMissingRequiredDynamicAllocationHeight
	//
	// Required height is not present in the code snippet.
	//
	AssetErrorReasonReasonMissingRequiredDynamicAllocationHeight = "MISSING_REQUIRED_DYNAMIC_ALLOCATION_HEIGHT"

	// AssetErrorReasonReasonMissingRequiredDynamicAllocationWidth
	//
	// Required width is not present in the code snippet.
	//
	AssetErrorReasonReasonMissingRequiredDynamicAllocationWidth = "MISSING_REQUIRED_DYNAMIC_ALLOCATION_WIDTH"

	// AssetErrorReasonReasonMissingRequiredDynamicAllocationFormat
	//
	// Required format is not present in the mobile code snippet.
	//
	AssetErrorReasonReasonMissingRequiredDynamicAllocationFormat = "MISSING_REQUIRED_DYNAMIC_ALLOCATION_FORMAT"

	// AssetErrorReasonReasonInvalidCodeSnippetParameterValue
	//
	// The parameter value in the code snippet is invalid.
	//
	AssetErrorReasonReasonInvalidCodeSnippetParameterValue = "INVALID_CODE_SNIPPET_PARAMETER_VALUE"

	// AssetErrorReasonReasonInvalidAssetId
	//
	// Invalid asset Id.
	//
	AssetErrorReasonReasonInvalidAssetId = "INVALID_ASSET_ID"

	// AssetErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	AssetErrorReasonReasonUnknown = "UNKNOWN"
)

// AuthenticationErrorReasonReason
const (

	// AuthenticationErrorReasonReasonAmbiguousSoapRequestHeader
	//
	// The SOAP message contains a request header with an ambiguous definition of the authentication
	// header fields. This means either the {@code authToken} and {@code oAuthToken} fields were
	// both null or both were specified. Exactly one value should be specified with each request.
	//
	AuthenticationErrorReasonReasonAmbiguousSoapRequestHeader = "AMBIGUOUS_SOAP_REQUEST_HEADER"

	// AuthenticationErrorReasonReasonInvalidEmail
	//
	// The login provided is invalid.
	//
	AuthenticationErrorReasonReasonInvalidEmail = "INVALID_EMAIL"

	// AuthenticationErrorReasonReasonAuthenticationFailed
	//
	// Tried to authenticate with provided information, but failed.
	//
	AuthenticationErrorReasonReasonAuthenticationFailed = "AUTHENTICATION_FAILED"

	// AuthenticationErrorReasonReasonInvalidOauthSignature
	//
	// The OAuth provided is invalid.
	//
	AuthenticationErrorReasonReasonInvalidOauthSignature = "INVALID_OAUTH_SIGNATURE"

	// AuthenticationErrorReasonReasonInvalidService
	//
	// The specified service to use was not recognized.
	//
	AuthenticationErrorReasonReasonInvalidService = "INVALID_SERVICE"

	// AuthenticationErrorReasonReasonMissingSoapRequestHeader
	//
	// The SOAP message is missing a request header with an {@code authToken} and optional {@code
	// networkCode}.
	//
	AuthenticationErrorReasonReasonMissingSoapRequestHeader = "MISSING_SOAP_REQUEST_HEADER"

	// AuthenticationErrorReasonReasonMissingAuthenticationHttpHeader
	//
	// The HTTP request is missing a request header with an {@code authToken}
	//
	AuthenticationErrorReasonReasonMissingAuthenticationHttpHeader = "MISSING_AUTHENTICATION_HTTP_HEADER"

	// AuthenticationErrorReasonReasonMissingAuthentication
	//
	// The request is missing an {@code authToken}
	//
	AuthenticationErrorReasonReasonMissingAuthentication = "MISSING_AUTHENTICATION"

	// AuthenticationErrorReasonReasonNetworkApiAccessDisabled
	//
	// The network does not have API access enabled.
	//
	AuthenticationErrorReasonReasonNetworkApiAccessDisabled = "NETWORK_API_ACCESS_DISABLED"

	// AuthenticationErrorReasonReasonNoNetworksToAccess
	//
	// The user is not associated with any network.
	//
	AuthenticationErrorReasonReasonNoNetworksToAccess = "NO_NETWORKS_TO_ACCESS"

	// AuthenticationErrorReasonReasonNetworkNotFound
	//
	// No network for the given {@code networkCode} was found.
	//
	AuthenticationErrorReasonReasonNetworkNotFound = "NETWORK_NOT_FOUND"

	// AuthenticationErrorReasonReasonNetworkCodeRequired
	//
	// The user has access to more than one network, but did not provide a {@code networkCode}.
	//
	AuthenticationErrorReasonReasonNetworkCodeRequired = "NETWORK_CODE_REQUIRED"

	// AuthenticationErrorReasonReasonConnectionError
	//
	// An error happened on the server side during connection to authentication service.
	//
	AuthenticationErrorReasonReasonConnectionError = "CONNECTION_ERROR"

	// AuthenticationErrorReasonReasonGoogleAccountAlreadyAssociatedWithNetwork
	//
	// The user tried to create a test network using an account that already is associated with a
	// network.
	//
	AuthenticationErrorReasonReasonGoogleAccountAlreadyAssociatedWithNetwork = "GOOGLE_ACCOUNT_ALREADY_ASSOCIATED_WITH_NETWORK"

	// AuthenticationErrorReasonReasonUnderInvestigation
	//
	// The account is blocked and under investigation by the collections team. Please contact Google
	// for more information.
	//
	AuthenticationErrorReasonReasonUnderInvestigation = "UNDER_INVESTIGATION"

	// AuthenticationErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	AuthenticationErrorReasonReasonUnknown = "UNKNOWN"
)

// CollectionSizeErrorReasonReason
const (

	// CollectionSizeErrorReasonReasonTooLarge
	CollectionSizeErrorReasonReasonTooLarge = "TOO_LARGE"

	// CollectionSizeErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CollectionSizeErrorReasonReasonUnknown = "UNKNOWN"
)

// CommonErrorReasonReason
//
// Describes reasons for common errors
const (

	// CommonErrorReasonReasonNotFound
	//
	// Indicates that an attempt was made to retrieve an entity that does not
	// exist.
	//
	CommonErrorReasonReasonNotFound = "NOT_FOUND"

	// CommonErrorReasonReasonAlreadyExists
	//
	// Indicates that an attempt was made to create an entity that already
	// exists.
	//
	CommonErrorReasonReasonAlreadyExists = "ALREADY_EXISTS"

	// CommonErrorReasonReasonNotApplicable
	//
	// Indicates that a value is not applicable for given use case.
	//
	CommonErrorReasonReasonNotApplicable = "NOT_APPLICABLE"

	// CommonErrorReasonReasonDuplicateObject
	//
	// Indicates that two elements in the collection were identical.
	//
	CommonErrorReasonReasonDuplicateObject = "DUPLICATE_OBJECT"

	// CommonErrorReasonReasonCannotUpdate
	//
	// Indicates that an attempt was made to change an immutable field.
	//
	CommonErrorReasonReasonCannotUpdate = "CANNOT_UPDATE"

	// CommonErrorReasonReasonUnsupportedOperation
	//
	// Indicates that the requested operation is not supported.
	//
	CommonErrorReasonReasonUnsupportedOperation = "UNSUPPORTED_OPERATION"

	// CommonErrorReasonReasonConcurrentModification
	//
	// Indicates that another request attempted to update the same data in the same network
	// at about the same time. Please wait and try the request again.
	//
	CommonErrorReasonReasonConcurrentModification = "CONCURRENT_MODIFICATION"

	// CommonErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CommonErrorReasonReasonUnknown = "UNKNOWN"
)

// ConversionEvent
//
// All possible tracking event services.  Not all events are supported by every
// kind of creative.
type ConversionEvent string

const (

	// ConversionEventUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ConversionEventUnknown ConversionEvent = "UNKNOWN"

	// ConversionEventCreativeView
	//
	// Corresponds to the {@code creativeView} tracking event.
	//
	ConversionEventCreativeView ConversionEvent = "CREATIVE_VIEW"

	// ConversionEventStart
	//
	// Corresponds to the {@code start} tracking event.
	//
	ConversionEventStart ConversionEvent = "START"

	// ConversionEventSkipShown
	//
	// An event that is fired when a video skip button is shown,
	// usually after 5 seconds of viewing the video.
	// This event does not correspond to any VAST element and is implemented using an extension.
	//
	ConversionEventSkipShown ConversionEvent = "SKIP_SHOWN"

	// ConversionEventFirstQuartile
	//
	// Corresponds to the {@code firstQuartile} tracking event.
	//
	ConversionEventFirstQuartile ConversionEvent = "FIRST_QUARTILE"

	// ConversionEventMidpoint
	//
	// Corresponds to the {@code midpoint} tracking event.
	//
	ConversionEventMidpoint ConversionEvent = "MIDPOINT"

	// ConversionEventThirdQuartile
	//
	// Corresponds to the {@code thirdQuartile} tracking event.
	//
	ConversionEventThirdQuartile ConversionEvent = "THIRD_QUARTILE"

	// ConversionEventEngagedView
	//
	// An event that is fired after 30 seconds of viewing the video
	// or when the video finished (if the video duration is less than 30 seconds).
	// This event does not correspond to any VAST element and is implemented using an extension.
	//
	ConversionEventEngagedView ConversionEvent = "ENGAGED_VIEW"

	// ConversionEventComplete
	//
	// Corresponds to the {@code complete} tracking event.
	//
	ConversionEventComplete ConversionEvent = "COMPLETE"

	// ConversionEventMute
	//
	// Corresponds to the {@code mute} tracking event.
	//
	ConversionEventMute ConversionEvent = "MUTE"

	// ConversionEventUnmute
	//
	// Corresponds to the {@code unmute} tracking event.
	//
	ConversionEventUnmute ConversionEvent = "UNMUTE"

	// ConversionEventPause
	//
	// Corresponds to the {@code pause} tracking event.
	//
	ConversionEventPause ConversionEvent = "PAUSE"

	// ConversionEventRewind
	//
	// Corresponds to the {@code rewind} tracking event.
	//
	ConversionEventRewind ConversionEvent = "REWIND"

	// ConversionEventResume
	//
	// Corresponds to the {@code resume} tracking event.
	//
	ConversionEventResume ConversionEvent = "RESUME"

	// ConversionEventSkipped
	//
	// An event that is fired when a video was skipped.
	// This event does not correspond to any VAST element and is implemented using an extension.
	//
	ConversionEventSkipped ConversionEvent = "SKIPPED"

	// ConversionEventFullscreen
	//
	// Corresponds to the {@code fullscreen} tracking event.
	//
	ConversionEventFullscreen ConversionEvent = "FULLSCREEN"

	// ConversionEventExpand
	//
	// Corresponds to the {@code expand} tracking event.
	//
	ConversionEventExpand ConversionEvent = "EXPAND"

	// ConversionEventCollapse
	//
	// Corresponds to the {@code collapse} tracking event.
	//
	ConversionEventCollapse ConversionEvent = "COLLAPSE"

	// ConversionEventAcceptInvitation
	//
	// Corresponds to the {@code acceptInvitation} tracking event.
	//
	ConversionEventAcceptInvitation ConversionEvent = "ACCEPT_INVITATION"

	// ConversionEventClose
	//
	// Corresponds to the {@code close} tracking event.
	//
	ConversionEventClose ConversionEvent = "CLOSE"

	// ConversionEventClickTracking
	//
	// Corresponds to the {@code Linear.VideoClicks.ClickTracking} node.
	//
	ConversionEventClickTracking ConversionEvent = "CLICK_TRACKING"

	// ConversionEventSurvey
	//
	// Corresponds to the {@code InLine.Survey} node.
	//
	ConversionEventSurvey ConversionEvent = "SURVEY"

	// ConversionEventCustomClick
	//
	// Corresponds to the {@code Linear.VideoClicks.CustomClick} node.
	//
	ConversionEventCustomClick ConversionEvent = "CUSTOM_CLICK"

	// ConversionEventMeasurableImpression
	//
	// Corresponds to the {@code measurableImpression} tracking event.
	//
	ConversionEventMeasurableImpression ConversionEvent = "MEASURABLE_IMPRESSION"

	// ConversionEventViewableImpression
	//
	// Corresponds to the {@code viewableImpression} tracking event.
	//
	ConversionEventViewableImpression ConversionEvent = "VIEWABLE_IMPRESSION"

	// ConversionEventVideoAbandon
	//
	// Corresponds to the {@code abandon} tracking event.
	//
	ConversionEventVideoAbandon ConversionEvent = "VIDEO_ABANDON"

	// ConversionEventFullyViewableAudibleHalfDurationImpression
	//
	// Corresponds to the {@code fullyViewableAudibleHalfDurationImpression} tracking event.
	//
	ConversionEventFullyViewableAudibleHalfDurationImpression ConversionEvent = "FULLY_VIEWABLE_AUDIBLE_HALF_DURATION_IMPRESSION"
)

// CreativeAssetMacroErrorReasonReason
//
// The reasons for the target error.
const (

	// CreativeAssetMacroErrorReasonReasonInvalidMacroName
	//
	// Invalid macro name specified. Macro names must start with an alpha
	// character and consist only of alpha-numeric characters and underscores
	// and be between 1 and 64 characters.
	//
	CreativeAssetMacroErrorReasonReasonInvalidMacroName = "INVALID_MACRO_NAME"

	// CreativeAssetMacroErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativeAssetMacroErrorReasonReasonUnknown = "UNKNOWN"
)

// CreativeErrorReasonReason
//
// The reasons for the target error.
const (

	// CreativeErrorReasonReasonFlashAndFallbackUrlAreSame
	//
	// {@link FlashRedirectCreative#flashUrl} and
	// {@link FlashRedirectCreative#fallbackUrl} are the same. The fallback URL
	// is used when the flash URL does not work and must be different from it.
	//
	CreativeErrorReasonReasonFlashAndFallbackUrlAreSame = "FLASH_AND_FALLBACK_URL_ARE_SAME"

	// CreativeErrorReasonReasonInvalidInternalRedirectUrl
	//
	// The internal redirect URL was invalid. The URL must have the following
	// syntax http://ad.doubleclick.net/ad/sitename/;sz=size.
	//
	CreativeErrorReasonReasonInvalidInternalRedirectUrl = "INVALID_INTERNAL_REDIRECT_URL"

	// CreativeErrorReasonReasonDestinationUrlRequired
	//
	// {@link HasDestinationUrlCreative#destinationUrl} is required.
	//
	CreativeErrorReasonReasonDestinationUrlRequired = "DESTINATION_URL_REQUIRED"

	// CreativeErrorReasonReasonDestinationUrlNotEmpty
	//
	// {@link HasDestinationUrlCreative#destinationUrl} must be empty when its type is
	// {@link DestinationUrlType#NONE}.
	//
	CreativeErrorReasonReasonDestinationUrlNotEmpty = "DESTINATION_URL_NOT_EMPTY"

	// CreativeErrorReasonReasonDestinationUrlTypeNotSupported
	//
	// The provided {@link DestinationUrlType} is not supported for the creative type it is
	// being used on.
	//
	CreativeErrorReasonReasonDestinationUrlTypeNotSupported = "DESTINATION_URL_TYPE_NOT_SUPPORTED"

	// CreativeErrorReasonReasonCannotCreateOrUpdateLegacyDfpCreative
	//
	// Cannot create or update legacy DART For Publishers creative.
	//
	CreativeErrorReasonReasonCannotCreateOrUpdateLegacyDfpCreative = "CANNOT_CREATE_OR_UPDATE_LEGACY_DFP_CREATIVE"

	// CreativeErrorReasonReasonCannotCreateOrUpdateLegacyDfpMobileCreative
	//
	// Cannot create or update legacy mobile creative.
	//
	CreativeErrorReasonReasonCannotCreateOrUpdateLegacyDfpMobileCreative = "CANNOT_CREATE_OR_UPDATE_LEGACY_DFP_MOBILE_CREATIVE"

	// CreativeErrorReasonReasonMissingFeature
	//
	// The user is missing a necessary feature.
	//
	CreativeErrorReasonReasonMissingFeature = "MISSING_FEATURE"

	// CreativeErrorReasonReasonInvalidCompanyType
	//
	// Company type should be one of Advertisers, House Advertisers and
	// Ad Networks.
	//
	CreativeErrorReasonReasonInvalidCompanyType = "INVALID_COMPANY_TYPE"

	// CreativeErrorReasonReasonInvalidAdsenseCreativeSize
	//
	// Invalid size for AdSense dynamic allocation creative.
	// Only valid AFC sizes are allowed.
	//
	CreativeErrorReasonReasonInvalidAdsenseCreativeSize = "INVALID_ADSENSE_CREATIVE_SIZE"

	// CreativeErrorReasonReasonInvalidAdExchangeCreativeSize
	//
	// Invalid size for Ad Exchange dynamic allocation creative.
	// Only valid Ad Exchange sizes are allowed.
	//
	CreativeErrorReasonReasonInvalidAdExchangeCreativeSize = "INVALID_AD_EXCHANGE_CREATIVE_SIZE"

	// CreativeErrorReasonReasonDuplicateAssetInCreative
	//
	// Assets associated with the same creative must be unique.
	//
	CreativeErrorReasonReasonDuplicateAssetInCreative = "DUPLICATE_ASSET_IN_CREATIVE"

	// CreativeErrorReasonReasonCreativeAssetCannotHaveIdAndByteArray
	//
	// A creative asset cannot contain an asset ID and a byte array.
	//
	CreativeErrorReasonReasonCreativeAssetCannotHaveIdAndByteArray = "CREATIVE_ASSET_CANNOT_HAVE_ID_AND_BYTE_ARRAY"

	// CreativeErrorReasonReasonCannotCreateOrUpdateUnsupportedCreative
	//
	// Cannot create or update unsupported creative.
	//
	CreativeErrorReasonReasonCannotCreateOrUpdateUnsupportedCreative = "CANNOT_CREATE_OR_UPDATE_UNSUPPORTED_CREATIVE"

	// CreativeErrorReasonReasonCannotCreateProgrammaticCreatives
	//
	// Cannot create programmatic creatives.
	//
	CreativeErrorReasonReasonCannotCreateProgrammaticCreatives = "CANNOT_CREATE_PROGRAMMATIC_CREATIVES"

	// CreativeErrorReasonReasonInvalidSizeForThirdPartyImpressionTracker
	//
	// A creative must have valid size to use the third-party impression tracker.
	//
	CreativeErrorReasonReasonInvalidSizeForThirdPartyImpressionTracker = "INVALID_SIZE_FOR_THIRD_PARTY_IMPRESSION_TRACKER"

	// CreativeErrorReasonReasonCannotDeactivateCreativesInCreativeSets
	//
	// Ineligible creatives can not be deactivated.
	//
	CreativeErrorReasonReasonCannotDeactivateCreativesInCreativeSets = "CANNOT_DEACTIVATE_CREATIVES_IN_CREATIVE_SETS"

	// CreativeErrorReasonReasonHostedVideoCreativeRequiresVideoAsset
	//
	// Ad Manager hosted video creatives must contain a video asset.
	//
	CreativeErrorReasonReasonHostedVideoCreativeRequiresVideoAsset = "HOSTED_VIDEO_CREATIVE_REQUIRES_VIDEO_ASSET"

	// CreativeErrorReasonReasonCannotSetMultipleImpressionTrackingUrls
	//
	// {@link ImageCreative#thirdPartyImpressionTrackingUrls} should not contain more than one url.
	//
	CreativeErrorReasonReasonCannotSetMultipleImpressionTrackingUrls = "CANNOT_SET_MULTIPLE_IMPRESSION_TRACKING_URLS"

	// CreativeErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativeErrorReasonReasonUnknown = "UNKNOWN"
)

// CreativePolicyViolation
//
// Represents the different services of policy violations that may be detected on
// a given creative.
//
// <p>For more information about the various services of policy violations, see
// <a href="https://support.google.com/adspolicy/answer/6008942">here</a>.
type CreativePolicyViolation string

const (

	// CreativePolicyViolationMalwareInCreative
	//
	// Malware was found in the creative.
	//
	// <p>For more information see
	// <a href="https://support.google.com/adspolicy/answer/1308246">here</a>.
	//
	CreativePolicyViolationMalwareInCreative CreativePolicyViolation = "MALWARE_IN_CREATIVE"

	// CreativePolicyViolationMalwareInLandingPage
	//
	// Malware was found in the landing page.
	//
	// <p>For more information see
	// <a href="https://support.google.com/adspolicy/answer/1308246">here</a>.
	//
	CreativePolicyViolationMalwareInLandingPage CreativePolicyViolation = "MALWARE_IN_LANDING_PAGE"

	// CreativePolicyViolationLegallyBlockedRedirectUrl
	//
	// The redirect url contains legally objectionable content.
	//
	CreativePolicyViolationLegallyBlockedRedirectUrl CreativePolicyViolation = "LEGALLY_BLOCKED_REDIRECT_URL"

	// CreativePolicyViolationMisrepresentationOfProduct
	//
	// The creative misrepresents the product or service being advertised.
	//
	// <p>For more information see
	// <a href="https://support.google.com/adspolicy/answer/6020955">here</a>.
	//
	CreativePolicyViolationMisrepresentationOfProduct CreativePolicyViolation = "MISREPRESENTATION_OF_PRODUCT"

	// CreativePolicyViolationSelfClickingCreative
	//
	// The creative has been determined to be self clicking.
	//
	CreativePolicyViolationSelfClickingCreative CreativePolicyViolation = "SELF_CLICKING_CREATIVE"

	// CreativePolicyViolationGamingGoogleNetwork
	//
	// The creative has been determined as attempting to game the Google network.
	//
	// <p>For more information see
	// <a href="https://support.google.com/adspolicy/answer/6020954#319">here</a>.
	//
	CreativePolicyViolationGamingGoogleNetwork CreativePolicyViolation = "GAMING_GOOGLE_NETWORK"

	// CreativePolicyViolationDynamicDns
	//
	// The landing page for the creative uses a dynamic DNS.
	//
	// <p>For more information see
	// <a href="https://support.google.com/adspolicy/answer/6020954">here</a>.
	//
	CreativePolicyViolationDynamicDns CreativePolicyViolation = "DYNAMIC_DNS"

	// CreativePolicyViolationCircumventingSystems
	//
	// The creative has been determined as attempting to circumvent Google advertising systems.
	//
	CreativePolicyViolationCircumventingSystems CreativePolicyViolation = "CIRCUMVENTING_SYSTEMS"

	// CreativePolicyViolationPhishing
	//
	// Phishing found in creative or landing page.
	//
	// <p>For more information see
	// <a href="https://support.google.com/adspolicy/answer/6020955">here</a>.
	//
	CreativePolicyViolationPhishing CreativePolicyViolation = "PHISHING"

	// CreativePolicyViolationDownloadPromptInCreative
	//
	// The creative prompts the user to download a file.
	//
	// <p>For more information see
	// <a href="https://support.google.com/admanager/answer/7513391">here</a>
	//
	CreativePolicyViolationDownloadPromptInCreative CreativePolicyViolation = "DOWNLOAD_PROMPT_IN_CREATIVE"

	// CreativePolicyViolationUnauthorizedCookieDetected
	//
	// The creative sets an unauthorized cookie on a Google domain.
	//
	// <p>For more information see <a
	// href="https://support.google.com/admanager/answer/7513391">here</a>
	//
	CreativePolicyViolationUnauthorizedCookieDetected CreativePolicyViolation = "UNAUTHORIZED_COOKIE_DETECTED"

	// CreativePolicyViolationTemporaryPauseForVendorInvestigation
	//
	// The creative has been temporarily paused while we investigate.
	//
	CreativePolicyViolationTemporaryPauseForVendorInvestigation CreativePolicyViolation = "TEMPORARY_PAUSE_FOR_VENDOR_INVESTIGATION"

	// CreativePolicyViolationAbusiveExperience
	//
	// The landing page contains an abusive experience.
	//
	// <p>For more information see <a
	// href="https://support.google.com/webtools/answer/7347327">here</a>.
	//
	CreativePolicyViolationAbusiveExperience CreativePolicyViolation = "ABUSIVE_EXPERIENCE"

	// CreativePolicyViolationTrickToClick
	//
	// The creative is designed to mislead or trick the user into interacting with it.
	//
	// <p>For more information see <a
	// href="https://support.google.com/adwordspolicy/answer/6020955#357">here</a>.
	//
	CreativePolicyViolationTrickToClick CreativePolicyViolation = "TRICK_TO_CLICK"

	// CreativePolicyViolationUseOfNonAllowlistedOmidVerificationScript
	//
	// Non-allowlisted OMID verification script.
	//
	// <p>For more information see <a
	// href="https://support.google.com/authorizedbuyers/answer/9115752">here</a>.
	//
	CreativePolicyViolationUseOfNonAllowlistedOmidVerificationScript CreativePolicyViolation = "USE_OF_NON_ALLOWLISTED_OMID_VERIFICATION_SCRIPT"

	// CreativePolicyViolationMisuseOfOmidApi
	//
	// OMID sdk injected by creative.
	//
	// < p>For more information see <a
	// href="https://support.google.com/authorizedbuyers/answer/9115752">here</a>.
	//
	CreativePolicyViolationMisuseOfOmidApi CreativePolicyViolation = "MISUSE_OF_OMID_API"

	// CreativePolicyViolationUnacceptableHtmlAd
	//
	// Unacceptable HTML5 ad.
	//
	// <p>For more information see <a
	// href="https://support.google.com/adspolicy/answer/6088505#266">here</a>.
	//
	CreativePolicyViolationUnacceptableHtmlAd CreativePolicyViolation = "UNACCEPTABLE_HTML_AD"

	// CreativePolicyViolationUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativePolicyViolationUnknown CreativePolicyViolation = "UNKNOWN"
)

// CreativeSetErrorReasonReason
//
// The reasons for the target error.
const (

	// CreativeSetErrorReasonReasonVideoFeatureRequired
	//
	// The 'video' feature is required but not enabled.
	//
	CreativeSetErrorReasonReasonVideoFeatureRequired = "VIDEO_FEATURE_REQUIRED"

	// CreativeSetErrorReasonReasonCannotCreateOrUpdateVideoCreatives
	//
	// Video creatives (including overlays, VAST redirects, etc..) cannot be created
	// or updated through the API.
	//
	CreativeSetErrorReasonReasonCannotCreateOrUpdateVideoCreatives = "CANNOT_CREATE_OR_UPDATE_VIDEO_CREATIVES"

	// CreativeSetErrorReasonReasonRoadblockFeatureRequired
	//
	// The 'roadblock' feature is required but not enabled.
	//
	CreativeSetErrorReasonReasonRoadblockFeatureRequired = "ROADBLOCK_FEATURE_REQUIRED"

	// CreativeSetErrorReasonReasonMasterCreativeCannotBeCompanion
	//
	// A master creative cannot be a companion creative in the same creative set.
	//
	CreativeSetErrorReasonReasonMasterCreativeCannotBeCompanion = "MASTER_CREATIVE_CANNOT_BE_COMPANION"

	// CreativeSetErrorReasonReasonInvalidAdvertiser
	//
	// Creatives in a creative set must be for the same advertiser.
	//
	CreativeSetErrorReasonReasonInvalidAdvertiser = "INVALID_ADVERTISER"

	// CreativeSetErrorReasonReasonUpdateMasterCreativeNotAllowed
	//
	// Updating a master creative in a creative set is not allowed.
	//
	CreativeSetErrorReasonReasonUpdateMasterCreativeNotAllowed = "UPDATE_MASTER_CREATIVE_NOT_ALLOWED"

	// CreativeSetErrorReasonReasonMasterCreativeCannotBelongToMultipleVideoCreativeSets
	//
	// A master creative must belong to only one video creative set.
	//
	CreativeSetErrorReasonReasonMasterCreativeCannotBelongToMultipleVideoCreativeSets = "MASTER_CREATIVE_CANNOT_BELONG_TO_MULTIPLE_VIDEO_CREATIVE_SETS"

	// CreativeSetErrorReasonReasonSkippableAdTypeNotAllowed
	//
	// The {@Code SkippableAdType} is not allowed.
	//
	CreativeSetErrorReasonReasonSkippableAdTypeNotAllowed = "SKIPPABLE_AD_TYPE_NOT_ALLOWED"

	// CreativeSetErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativeSetErrorReasonReasonUnknown = "UNKNOWN"
)

// CreativeTemplateErrorReasonReason
//
// The reasons for the target error.
const (

	// CreativeTemplateErrorReasonReasonCannotParseCreativeTemplate
	//
	// The XML of the creative template definition is malformed and cannot be parsed.
	//
	CreativeTemplateErrorReasonReasonCannotParseCreativeTemplate = "CANNOT_PARSE_CREATIVE_TEMPLATE"

	// CreativeTemplateErrorReasonReasonVariableDuplicateUniqueName
	//
	// A creative template has multiple variables with the same uniqueName.
	//
	CreativeTemplateErrorReasonReasonVariableDuplicateUniqueName = "VARIABLE_DUPLICATE_UNIQUE_NAME"

	// CreativeTemplateErrorReasonReasonVariableInvalidUniqueName
	//
	// The creative template contains a variable with invalid characters. Valid
	// characters are letters, numbers, spaces, forward slashes, dashes,
	// and underscores.
	//
	CreativeTemplateErrorReasonReasonVariableInvalidUniqueName = "VARIABLE_INVALID_UNIQUE_NAME"

	// CreativeTemplateErrorReasonReasonListChoiceDuplicateValue
	//
	// Multiple choices for a CreativeTemplateListStringVariable have the same value.
	//
	CreativeTemplateErrorReasonReasonListChoiceDuplicateValue = "LIST_CHOICE_DUPLICATE_VALUE"

	// CreativeTemplateErrorReasonReasonListChoiceNeedsDefault
	//
	// The choices for a CreativeTemplateListStringVariable do not contain the
	// default value.
	//
	CreativeTemplateErrorReasonReasonListChoiceNeedsDefault = "LIST_CHOICE_NEEDS_DEFAULT"

	// CreativeTemplateErrorReasonReasonListChoicesEmpty
	//
	// There are no choices specified for the list variable.
	//
	CreativeTemplateErrorReasonReasonListChoicesEmpty = "LIST_CHOICES_EMPTY"

	// CreativeTemplateErrorReasonReasonNoTargetPlatforms
	//
	// No target platform is assigned to a creative template.
	//
	CreativeTemplateErrorReasonReasonNoTargetPlatforms = "NO_TARGET_PLATFORMS"

	// CreativeTemplateErrorReasonReasonMultipleTargetPlatforms
	//
	// More than one target platform is assigned to a single creative template.
	//
	CreativeTemplateErrorReasonReasonMultipleTargetPlatforms = "MULTIPLE_TARGET_PLATFORMS"

	// CreativeTemplateErrorReasonReasonUnrecognizedPlaceholder
	//
	// The formatter contains a placeholder which is not defined as a variable.
	//
	CreativeTemplateErrorReasonReasonUnrecognizedPlaceholder = "UNRECOGNIZED_PLACEHOLDER"

	// CreativeTemplateErrorReasonReasonPlaceholdersNotInFormatter
	//
	// There are variables defined which are not being used in the formatter.
	//
	CreativeTemplateErrorReasonReasonPlaceholdersNotInFormatter = "PLACEHOLDERS_NOT_IN_FORMATTER"

	// CreativeTemplateErrorReasonReasonMissingInterstitialMacro
	//
	// The creative template is interstitial, but the formatter doesn't contain
	// an interstitial macro.
	//
	CreativeTemplateErrorReasonReasonMissingInterstitialMacro = "MISSING_INTERSTITIAL_MACRO"

	// CreativeTemplateErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativeTemplateErrorReasonReasonUnknown = "UNKNOWN"
)

// CreativeTemplateOperationErrorReasonReason
//
// The reasons for the target error.
const (

	// CreativeTemplateOperationErrorReasonReasonNotAllowed
	//
	// The current user is not allowed to modify this creative template.
	//
	CreativeTemplateOperationErrorReasonReasonNotAllowed = "NOT_ALLOWED"

	// CreativeTemplateOperationErrorReasonReasonNotApplicable
	//
	// The operation is not applicable to the current state.
	// (e.g. Trying to activate an active creative template)
	//
	CreativeTemplateOperationErrorReasonReasonNotApplicable = "NOT_APPLICABLE"

	// CreativeTemplateOperationErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativeTemplateOperationErrorReasonReasonUnknown = "UNKNOWN"
)

// CustomCreativeErrorReasonReason
//
// The reasons for the target error.
const (

	// CustomCreativeErrorReasonReasonDuplicateMacroNameForCreative
	//
	// Macros associated with a single custom creative must have unique names.
	//
	CustomCreativeErrorReasonReasonDuplicateMacroNameForCreative = "DUPLICATE_MACRO_NAME_FOR_CREATIVE"

	// CustomCreativeErrorReasonReasonSnippetReferencesMissingMacro
	//
	// The file macro referenced in the snippet does not exist.
	//
	CustomCreativeErrorReasonReasonSnippetReferencesMissingMacro = "SNIPPET_REFERENCES_MISSING_MACRO"

	// CustomCreativeErrorReasonReasonUnrecognizedMacro
	//
	// The macro referenced in the snippet is not valid.
	//
	CustomCreativeErrorReasonReasonUnrecognizedMacro = "UNRECOGNIZED_MACRO"

	// CustomCreativeErrorReasonReasonCustomCreativeNotAllowed
	//
	// Custom creatives are not allowed in this context.
	//
	CustomCreativeErrorReasonReasonCustomCreativeNotAllowed = "CUSTOM_CREATIVE_NOT_ALLOWED"

	// CustomCreativeErrorReasonReasonMissingInterstitialMacro
	//
	// The custom creative is an interstitial, but the snippet is missing an
	// interstitial macro.
	//
	CustomCreativeErrorReasonReasonMissingInterstitialMacro = "MISSING_INTERSTITIAL_MACRO"

	// CustomCreativeErrorReasonReasonDuplicateAssetInMacros
	//
	// Macros associated with the same custom creative cannot share the same
	// asset.
	//
	CustomCreativeErrorReasonReasonDuplicateAssetInMacros = "DUPLICATE_ASSET_IN_MACROS"

	// CustomCreativeErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CustomCreativeErrorReasonReasonUnknown = "UNKNOWN"
)

// CustomFieldValueErrorReasonReason
//
// The reasons for the target error.
const (

	// CustomFieldValueErrorReasonReasonCustomFieldNotFound
	//
	// An attempt was made to modify or create a {@link CustomFieldValue} for
	// a {@link CustomField} that does not exist.
	//
	CustomFieldValueErrorReasonReasonCustomFieldNotFound = "CUSTOM_FIELD_NOT_FOUND"

	// CustomFieldValueErrorReasonReasonCustomFieldInactive
	//
	// An attempt was made to create a new value for a custom field
	// that is inactive.
	//
	CustomFieldValueErrorReasonReasonCustomFieldInactive = "CUSTOM_FIELD_INACTIVE"

	// CustomFieldValueErrorReasonReasonCustomFieldOptionNotFound
	//
	// An attempt was made to modify or create a {@link CustomFieldValue} corresponding
	// to a {@link CustomFieldOption} that could not be found.
	//
	CustomFieldValueErrorReasonReasonCustomFieldOptionNotFound = "CUSTOM_FIELD_OPTION_NOT_FOUND"

	// CustomFieldValueErrorReasonReasonInvalidEntityType
	//
	// An attempt was made to modify or create a {@link CustomFieldValue} with an
	// association to an entity of the wrong type for its field.
	//
	CustomFieldValueErrorReasonReasonInvalidEntityType = "INVALID_ENTITY_TYPE"

	// CustomFieldValueErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CustomFieldValueErrorReasonReasonUnknown = "UNKNOWN"
)

// DeclarationType
//
// The declaration about third party data usage on the associated entity.
type DeclarationType string

const (

	// DeclarationTypeNone
	//
	// There are no companies associated.  Functionally the same as DECLARED, combined with
	// an empty company list.
	//
	DeclarationTypeNone DeclarationType = "NONE"

	// DeclarationTypeDeclared
	//
	// There is a set of {@link RichMediaAdsCompany}s associated with this entity.
	//
	DeclarationTypeDeclared DeclarationType = "DECLARED"

	// DeclarationTypeUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	DeclarationTypeUnknown DeclarationType = "UNKNOWN"
)

// DestinationUrlType
//
// The valid actions that a destination URL may perform if the user clicks on the ad.
type DestinationUrlType string

const (

	// DestinationUrlTypeUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	DestinationUrlTypeUnknown DestinationUrlType = "UNKNOWN"

	// DestinationUrlTypeClickToWeb
	//
	// Navigate to a web page. (a.k.a. "Click-through URL").
	//
	DestinationUrlTypeClickToWeb DestinationUrlType = "CLICK_TO_WEB"

	// DestinationUrlTypeClickToApp
	//
	// Start an application.
	//
	DestinationUrlTypeClickToApp DestinationUrlType = "CLICK_TO_APP"

	// DestinationUrlTypeClickToCall
	//
	// Make a phone call.
	//
	DestinationUrlTypeClickToCall DestinationUrlType = "CLICK_TO_CALL"

	// DestinationUrlTypeNone
	//
	// Destination URL not present. Useful for video creatives where a landing page or a product
	// isn't necessarily applicable.
	//
	DestinationUrlTypeNone DestinationUrlType = "NONE"
)

// EntityLimitReachedErrorReasonReason
//
// The reasons for the entity limit reached error.
const (

	// EntityLimitReachedErrorReasonReasonCustomTargetingValuesLimitReached
	//
	// The number of custom targeting values exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonCustomTargetingValuesLimitReached = "CUSTOM_TARGETING_VALUES_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonAdExclusionRulesLimitReached
	//
	// The number of ad exclusion rules exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonAdExclusionRulesLimitReached = "AD_EXCLUSION_RULES_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonFirstPartyAudienceSegmentsLimitReached
	//
	// The number of first party audience segments exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonFirstPartyAudienceSegmentsLimitReached = "FIRST_PARTY_AUDIENCE_SEGMENTS_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonPlacementsLimitReached
	//
	// The number of active placements exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonPlacementsLimitReached = "PLACEMENTS_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonLineItemsLimitReached
	//
	// The number of line items excceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonLineItemsLimitReached = "LINE_ITEMS_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonActiveLineItemsLimitReached
	//
	// The number of active line items exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonActiveLineItemsLimitReached = "ACTIVE_LINE_ITEMS_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonDaiEncodingProfilesLimitReached
	//
	// The number of not-archived encoding profiles exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonDaiEncodingProfilesLimitReached = "DAI_ENCODING_PROFILES_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonTrafficForecastSegmentsLimitReached
	//
	// The number of traffic forecast segments exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonTrafficForecastSegmentsLimitReached = "TRAFFIC_FORECAST_SEGMENTS_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonForecastAdjustmentsLimitReached
	//
	// The number of forecast adjustments exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonForecastAdjustmentsLimitReached = "FORECAST_ADJUSTMENTS_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonActiveExperimentsLimitReached
	//
	// The number of active experiments exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonActiveExperimentsLimitReached = "ACTIVE_EXPERIMENTS_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonSitesLimitReached
	//
	// The number of sites exceeds the max number allowed in the network.
	//
	EntityLimitReachedErrorReasonReasonSitesLimitReached = "SITES_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonUserTeamsLimitReached
	//
	// The number of teams on the user exceeds the max number allowed.
	//
	EntityLimitReachedErrorReasonReasonUserTeamsLimitReached = "USER_TEAMS_LIMIT_REACHED"

	// EntityLimitReachedErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	EntityLimitReachedErrorReasonReasonUnknown = "UNKNOWN"
)

// FeatureErrorReasonReason
const (

	// FeatureErrorReasonReasonMissingFeature
	//
	// A feature is being used that is not enabled on the current network.
	//
	FeatureErrorReasonReasonMissingFeature = "MISSING_FEATURE"

	// FeatureErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	FeatureErrorReasonReasonUnknown = "UNKNOWN"
)

// FileErrorReasonReason
const (

	// FileErrorReasonReasonMissingContents
	//
	// The provided byte array is empty.
	//
	FileErrorReasonReasonMissingContents = "MISSING_CONTENTS"

	// FileErrorReasonReasonSizeTooLarge
	//
	// The provided file is larger than the maximum size defined for the
	// network.
	//
	FileErrorReasonReasonSizeTooLarge = "SIZE_TOO_LARGE"

	// FileErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	FileErrorReasonReasonUnknown = "UNKNOWN"
)

// HtmlBundleProcessorErrorReasonReason
//
// Error reasons that may arise during HTML5 bundle processing.
const (

	// HtmlBundleProcessorErrorReasonReasonCannotExtractFilesFromBundle
	//
	// Cannot extract files from HTML5 bundle.
	//
	HtmlBundleProcessorErrorReasonReasonCannotExtractFilesFromBundle = "CANNOT_EXTRACT_FILES_FROM_BUNDLE"

	// HtmlBundleProcessorErrorReasonReasonClickTagHardCoded
	//
	// Bundle cannot have hard-coded click tag url(s).
	//
	HtmlBundleProcessorErrorReasonReasonClickTagHardCoded = "CLICK_TAG_HARD_CODED"

	// HtmlBundleProcessorErrorReasonReasonClickTagInGwdUnupported
	//
	// Bundles created using GWD (Google Web Designer) cannot have click tags. GWD-published
	// bundles should use exit events instead of defining var {@code clickTAG}.
	//
	HtmlBundleProcessorErrorReasonReasonClickTagInGwdUnupported = "CLICK_TAG_IN_GWD_UNUPPORTED"

	// HtmlBundleProcessorErrorReasonReasonClickTagNotInPrimaryHtml
	//
	// Click tag detected outside of primary HTML file.
	//
	HtmlBundleProcessorErrorReasonReasonClickTagNotInPrimaryHtml = "CLICK_TAG_NOT_IN_PRIMARY_HTML"

	// HtmlBundleProcessorErrorReasonReasonClickTagInvalid
	//
	// Click tag or exit function has invalid name or url.
	//
	HtmlBundleProcessorErrorReasonReasonClickTagInvalid = "CLICK_TAG_INVALID"

	// HtmlBundleProcessorErrorReasonReasonFileSizeTooLarge
	//
	// HTML5 bundle or total size of extracted files cannot be more than 1000 KB.
	//
	HtmlBundleProcessorErrorReasonReasonFileSizeTooLarge = "FILE_SIZE_TOO_LARGE"

	// HtmlBundleProcessorErrorReasonReasonFilesTooMany
	//
	// HTML5 bundle cannot have more than 50 files.
	//
	HtmlBundleProcessorErrorReasonReasonFilesTooMany = "FILES_TOO_MANY"

	// HtmlBundleProcessorErrorReasonReasonFlashUnsupported
	//
	// Flash files in HTML5 bundles are not supported. Any file with a .swf or .flv extension
	// causes this error.
	//
	HtmlBundleProcessorErrorReasonReasonFlashUnsupported = "FLASH_UNSUPPORTED"

	// HtmlBundleProcessorErrorReasonReasonGwdComponentsUnsupported
	//
	// The HTML5 bundle contains unsupported GWD component(s).
	//
	HtmlBundleProcessorErrorReasonReasonGwdComponentsUnsupported = "GWD_COMPONENTS_UNSUPPORTED"

	// HtmlBundleProcessorErrorReasonReasonGwdEnablerMethodsUnsupported
	//
	// The HTML5 bundle contains Unsupported GWD Enabler method(s).
	//
	HtmlBundleProcessorErrorReasonReasonGwdEnablerMethodsUnsupported = "GWD_ENABLER_METHODS_UNSUPPORTED"

	// HtmlBundleProcessorErrorReasonReasonGwdPropertiesInvalid
	//
	// GWD properties are invalid.
	//
	HtmlBundleProcessorErrorReasonReasonGwdPropertiesInvalid = "GWD_PROPERTIES_INVALID"

	// HtmlBundleProcessorErrorReasonReasonLinkedFilesNotFound
	//
	// The HTML5 bundle contains broken relative file reference(s).
	//
	HtmlBundleProcessorErrorReasonReasonLinkedFilesNotFound = "LINKED_FILES_NOT_FOUND"

	// HtmlBundleProcessorErrorReasonReasonPrimaryHtmlMissing
	//
	// No primary HTML file detected.
	//
	HtmlBundleProcessorErrorReasonReasonPrimaryHtmlMissing = "PRIMARY_HTML_MISSING"

	// HtmlBundleProcessorErrorReasonReasonPrimaryHtmlUndetermined
	//
	// Multiple HTML files are detected. One of them should be named as {@code index.html}
	//
	HtmlBundleProcessorErrorReasonReasonPrimaryHtmlUndetermined = "PRIMARY_HTML_UNDETERMINED"

	// HtmlBundleProcessorErrorReasonReasonSvgBlockInvalid
	//
	// An SVG block could not be parsed.
	//
	HtmlBundleProcessorErrorReasonReasonSvgBlockInvalid = "SVG_BLOCK_INVALID"

	// HtmlBundleProcessorErrorReasonReasonCannotDecodeBundle
	//
	// The HTML5 bundle cannot be decoded.
	//
	HtmlBundleProcessorErrorReasonReasonCannotDecodeBundle = "CANNOT_DECODE_BUNDLE"

	// HtmlBundleProcessorErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	HtmlBundleProcessorErrorReasonReasonUnknown = "UNKNOWN"
)

// ImageDensity
//
// Image densities.
type ImageDensity string

const (

	// ImageDensityOneToOne
	//
	// Indicates that there is a 1:1 ratio between the dimensions of the raw image and the dimensions
	// that it should be displayed at in device-independent pixels.
	//
	ImageDensityOneToOne ImageDensity = "ONE_TO_ONE"

	// ImageDensityThreeToTwo
	//
	// Indicates that there is a 3:2 ratio between the dimensions of the raw image and the dimensions
	// that it should be displayed at in device-independent pixels.
	//
	ImageDensityThreeToTwo ImageDensity = "THREE_TO_TWO"

	// ImageDensityTwoToOne
	//
	// Indicates that there is a 2:1 ratio between the dimensions of the raw image and the dimensions
	// that it should be displayed at in device-independent pixels.
	//
	ImageDensityTwoToOne ImageDensity = "TWO_TO_ONE"

	// ImageDensityUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ImageDensityUnknown ImageDensity = "UNKNOWN"
)

// ImageErrorReasonReason
//
// The reasons for the target error.
const (

	// ImageErrorReasonReasonInvalidImage
	//
	// The file's format is invalid.
	//
	ImageErrorReasonReasonInvalidImage = "INVALID_IMAGE"

	// ImageErrorReasonReasonInvalidSize
	//
	// {@link Size#width} and {@link Size#height} cannot be negative.
	//
	ImageErrorReasonReasonInvalidSize = "INVALID_SIZE"

	// ImageErrorReasonReasonUnexpectedSize
	//
	// The actual image size does not match the expected image size.
	//
	ImageErrorReasonReasonUnexpectedSize = "UNEXPECTED_SIZE"

	// ImageErrorReasonReasonOverlaySizeTooLarge
	//
	// The size of the asset is larger than that of the overlay creative.
	//
	ImageErrorReasonReasonOverlaySizeTooLarge = "OVERLAY_SIZE_TOO_LARGE"

	// ImageErrorReasonReasonAnimatedNotAllowed
	//
	// Animated images are not allowed.
	//
	ImageErrorReasonReasonAnimatedNotAllowed = "ANIMATED_NOT_ALLOWED"

	// ImageErrorReasonReasonAnimationTooLong
	//
	// Animation length exceeded the allowed policy limit.
	//
	ImageErrorReasonReasonAnimationTooLong = "ANIMATION_TOO_LONG"

	// ImageErrorReasonReasonCmykJpegNotAllowed
	//
	// Images in CMYK color formats are not allowed.
	//
	ImageErrorReasonReasonCmykJpegNotAllowed = "CMYK_JPEG_NOT_ALLOWED"

	// ImageErrorReasonReasonFlashNotAllowed
	//
	// Flash files are not allowed.
	//
	ImageErrorReasonReasonFlashNotAllowed = "FLASH_NOT_ALLOWED"

	// ImageErrorReasonReasonFlashWithoutClicktag
	//
	// If {@link FlashCreative#clickTagRequired} is {@code true}, then the flash
	// file is required to have a click tag embedded in it.
	//
	ImageErrorReasonReasonFlashWithoutClicktag = "FLASH_WITHOUT_CLICKTAG"

	// ImageErrorReasonReasonAnimatedVisualEffect
	//
	// Animated visual effect is not allowed.
	//
	ImageErrorReasonReasonAnimatedVisualEffect = "ANIMATED_VISUAL_EFFECT"

	// ImageErrorReasonReasonFlashError
	//
	// An error was encountered in the flash file.
	//
	ImageErrorReasonReasonFlashError = "FLASH_ERROR"

	// ImageErrorReasonReasonLayoutProblem
	//
	// Incorrect image layout.
	//
	ImageErrorReasonReasonLayoutProblem = "LAYOUT_PROBLEM"

	// ImageErrorReasonReasonFlashHasNetworkObjects
	//
	// Flash files with network objects are not allowed.
	//
	ImageErrorReasonReasonFlashHasNetworkObjects = "FLASH_HAS_NETWORK_OBJECTS"

	// ImageErrorReasonReasonFlashHasNetworkMethods
	//
	// Flash files with network methods are not allowed.
	//
	ImageErrorReasonReasonFlashHasNetworkMethods = "FLASH_HAS_NETWORK_METHODS"

	// ImageErrorReasonReasonFlashHasUrl
	//
	// Flash files with hard-coded click thru URLs are not allowed.
	//
	ImageErrorReasonReasonFlashHasUrl = "FLASH_HAS_URL"

	// ImageErrorReasonReasonFlashHasMouseTracking
	//
	// Flash files with mouse tracking are not allowed.
	//
	ImageErrorReasonReasonFlashHasMouseTracking = "FLASH_HAS_MOUSE_TRACKING"

	// ImageErrorReasonReasonFlashHasRandomNum
	//
	// Flash files that generate or use random numbers are not allowed.
	//
	ImageErrorReasonReasonFlashHasRandomNum = "FLASH_HAS_RANDOM_NUM"

	// ImageErrorReasonReasonFlashSelfTargets
	//
	// Flash files with self targets are not allowed.
	//
	ImageErrorReasonReasonFlashSelfTargets = "FLASH_SELF_TARGETS"

	// ImageErrorReasonReasonFlashBadGeturlTarget
	//
	// Flash file contains a bad geturl target.
	//
	ImageErrorReasonReasonFlashBadGeturlTarget = "FLASH_BAD_GETURL_TARGET"

	// ImageErrorReasonReasonFlashVersionNotSupported
	//
	// Flash or ActionScript version in the submitted file is not supported.
	//
	ImageErrorReasonReasonFlashVersionNotSupported = "FLASH_VERSION_NOT_SUPPORTED"

	// ImageErrorReasonReasonFileTooLarge
	//
	// The uploaded file is too large.
	//
	ImageErrorReasonReasonFileTooLarge = "FILE_TOO_LARGE"

	// ImageErrorReasonReasonSystemErrorIrs
	//
	// A system error occurred, please try again.
	//
	ImageErrorReasonReasonSystemErrorIrs = "SYSTEM_ERROR_IRS"

	// ImageErrorReasonReasonSystemErrorScs
	//
	// A system error occurred, please try again.
	//
	ImageErrorReasonReasonSystemErrorScs = "SYSTEM_ERROR_SCS"

	// ImageErrorReasonReasonUnexpectedPrimaryAssetDensity
	//
	// The image density for a primary asset was not one of the expected image densities.
	//
	ImageErrorReasonReasonUnexpectedPrimaryAssetDensity = "UNEXPECTED_PRIMARY_ASSET_DENSITY"

	// ImageErrorReasonReasonDuplicateAssetDensity
	//
	// Two or more assets have the same image density.
	//
	ImageErrorReasonReasonDuplicateAssetDensity = "DUPLICATE_ASSET_DENSITY"

	// ImageErrorReasonReasonMissingDefaultAsset
	//
	// The creative does not contain a primary asset. (For high-density creatives, the primary
	// asset must be a standard image file with 1x density.)
	//
	ImageErrorReasonReasonMissingDefaultAsset = "MISSING_DEFAULT_ASSET"

	// ImageErrorReasonReasonPreverifiedMimetypeNotAllowed
	//
	// preverified_mime_type is not in the client spec's allowlist.
	//
	ImageErrorReasonReasonPreverifiedMimetypeNotAllowed = "PREVERIFIED_MIMETYPE_NOT_ALLOWED"

	// ImageErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ImageErrorReasonReasonUnknown = "UNKNOWN"
)

// InternalApiErrorReasonReason
//
// The single reason for the internal API error.
const (

	// InternalApiErrorReasonReasonUnexpectedInternalApiError
	//
	// API encountered an unexpected internal error.
	//
	InternalApiErrorReasonReasonUnexpectedInternalApiError = "UNEXPECTED_INTERNAL_API_ERROR"

	// InternalApiErrorReasonReasonTransientError
	//
	// A temporary error occurred during the request. Please retry.
	//
	InternalApiErrorReasonReasonTransientError = "TRANSIENT_ERROR"

	// InternalApiErrorReasonReasonUnknown
	//
	// The cause of the error is not known or only defined in newer versions.
	//
	InternalApiErrorReasonReasonUnknown = "UNKNOWN"

	// InternalApiErrorReasonReasonDowntime
	//
	// The API is currently unavailable for a planned downtime.
	//
	InternalApiErrorReasonReasonDowntime = "DOWNTIME"

	// InternalApiErrorReasonReasonErrorGeneratingResponse
	//
	// Mutate succeeded but server was unable to build response. Client should not retry mutate.
	//
	InternalApiErrorReasonReasonErrorGeneratingResponse = "ERROR_GENERATING_RESPONSE"
)

// InvalidPhoneNumberErrorReasonReason
const (

	// InvalidPhoneNumberErrorReasonReasonInvalidFormat
	//
	// The phone number is invalid.
	//
	InvalidPhoneNumberErrorReasonReasonInvalidFormat = "INVALID_FORMAT"

	// InvalidPhoneNumberErrorReasonReasonTooShort
	//
	// The phone number is too short.
	//
	InvalidPhoneNumberErrorReasonReasonTooShort = "TOO_SHORT"

	// InvalidPhoneNumberErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	InvalidPhoneNumberErrorReasonReasonUnknown = "UNKNOWN"
)

// InvalidUrlErrorReasonReason
const (

	// InvalidUrlErrorReasonReasonIllegalCharacters
	//
	// The URL contains invalid characters.
	//
	InvalidUrlErrorReasonReasonIllegalCharacters = "ILLEGAL_CHARACTERS"

	// InvalidUrlErrorReasonReasonInvalidFormat
	//
	// The format of the URL is not allowed. This could occur for a number of
	// reasons. For example, if an invalid scheme is specified (like "ftp://")
	// or if a port is specified when not required, or if a query was specified
	// when not required.
	//
	InvalidUrlErrorReasonReasonInvalidFormat = "INVALID_FORMAT"

	// InvalidUrlErrorReasonReasonInsecureScheme
	//
	// URL contains insecure scheme.
	//
	InvalidUrlErrorReasonReasonInsecureScheme = "INSECURE_SCHEME"

	// InvalidUrlErrorReasonReasonNoScheme
	//
	// The URL does not contain a scheme.
	//
	InvalidUrlErrorReasonReasonNoScheme = "NO_SCHEME"

	// InvalidUrlErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	InvalidUrlErrorReasonReasonUnknown = "UNKNOWN"
)

// LabelEntityAssociationErrorReasonReason
//
// The reasons for the target error.
const (

	// LabelEntityAssociationErrorReasonReasonDuplicateAssociation
	//
	// The label has already been attached to the entity.
	//
	LabelEntityAssociationErrorReasonReasonDuplicateAssociation = "DUPLICATE_ASSOCIATION"

	// LabelEntityAssociationErrorReasonReasonInvalidAssociation
	//
	// A label is being applied to an entity that does not support that entity
	// type.
	//
	LabelEntityAssociationErrorReasonReasonInvalidAssociation = "INVALID_ASSOCIATION"

	// LabelEntityAssociationErrorReasonReasonNegationNotAllowed
	//
	// Label negation cannot be applied to the entity type.
	//
	LabelEntityAssociationErrorReasonReasonNegationNotAllowed = "NEGATION_NOT_ALLOWED"

	// LabelEntityAssociationErrorReasonReasonDuplicateAssociationWithNegation
	//
	// The same label is being applied and negated to the same entity.
	//
	LabelEntityAssociationErrorReasonReasonDuplicateAssociationWithNegation = "DUPLICATE_ASSOCIATION_WITH_NEGATION"

	// LabelEntityAssociationErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	LabelEntityAssociationErrorReasonReasonUnknown = "UNKNOWN"
)

// LineItemCreativeAssociationErrorReasonReason
//
// The reasons for the target error.
const (

	// LineItemCreativeAssociationErrorReasonReasonCreativeInWrongAdvertisersLibrary
	//
	// Cannot associate a creative to the wrong advertiser
	//
	LineItemCreativeAssociationErrorReasonReasonCreativeInWrongAdvertisersLibrary = "CREATIVE_IN_WRONG_ADVERTISERS_LIBRARY"

	// LineItemCreativeAssociationErrorReasonReasonInvalidLineitemCreativePairing
	//
	// The creative type being associated is a invalid for the line item type.
	//
	LineItemCreativeAssociationErrorReasonReasonInvalidLineitemCreativePairing = "INVALID_LINEITEM_CREATIVE_PAIRING"

	// LineItemCreativeAssociationErrorReasonReasonStartdateBeforeLineitemStartdate
	//
	// Association start date cannot be before line item start date
	//
	LineItemCreativeAssociationErrorReasonReasonStartdateBeforeLineitemStartdate = "STARTDATE_BEFORE_LINEITEM_STARTDATE"

	// LineItemCreativeAssociationErrorReasonReasonStartdateNotBeforeLineitemEnddate
	//
	// Association start date cannot be same as or after line item end date
	//
	LineItemCreativeAssociationErrorReasonReasonStartdateNotBeforeLineitemEnddate = "STARTDATE_NOT_BEFORE_LINEITEM_ENDDATE"

	// LineItemCreativeAssociationErrorReasonReasonEnddateAfterLineitemEnddate
	//
	// Association end date cannot be after line item end date
	//
	LineItemCreativeAssociationErrorReasonReasonEnddateAfterLineitemEnddate = "ENDDATE_AFTER_LINEITEM_ENDDATE"

	// LineItemCreativeAssociationErrorReasonReasonEnddateNotAfterLineitemStartdate
	//
	// Association end date cannot be same as or before line item start date
	//
	LineItemCreativeAssociationErrorReasonReasonEnddateNotAfterLineitemStartdate = "ENDDATE_NOT_AFTER_LINEITEM_STARTDATE"

	// LineItemCreativeAssociationErrorReasonReasonEnddateNotAfterStartdate
	//
	// Association end date cannot be same as or before its start date
	//
	LineItemCreativeAssociationErrorReasonReasonEnddateNotAfterStartdate = "ENDDATE_NOT_AFTER_STARTDATE"

	// LineItemCreativeAssociationErrorReasonReasonEnddateInThePast
	//
	// Association end date cannot be in the past.
	//
	LineItemCreativeAssociationErrorReasonReasonEnddateInThePast = "ENDDATE_IN_THE_PAST"

	// LineItemCreativeAssociationErrorReasonReasonCannotCopyWithinSameLineItem
	//
	// Cannot copy an association to the same line item without
	// creating new creative
	//
	LineItemCreativeAssociationErrorReasonReasonCannotCopyWithinSameLineItem = "CANNOT_COPY_WITHIN_SAME_LINE_ITEM"

	// LineItemCreativeAssociationErrorReasonReasonUnsupportedCreativeVastRedirectType
	//
	// Programmatic only supports the "Video" redirect type.
	//
	LineItemCreativeAssociationErrorReasonReasonUnsupportedCreativeVastRedirectType = "UNSUPPORTED_CREATIVE_VAST_REDIRECT_TYPE"

	// LineItemCreativeAssociationErrorReasonReasonUnsupportedYoutubeHostedCreative
	//
	// Programmatic does not support YouTube hosted creatives.
	//
	LineItemCreativeAssociationErrorReasonReasonUnsupportedYoutubeHostedCreative = "UNSUPPORTED_YOUTUBE_HOSTED_CREATIVE"

	// LineItemCreativeAssociationErrorReasonReasonProgrammaticCreativesCanOnlyBeAssignedToOneLineItem
	//
	// Programmatic creatives can only be assigned to one line item.
	//
	LineItemCreativeAssociationErrorReasonReasonProgrammaticCreativesCanOnlyBeAssignedToOneLineItem = "PROGRAMMATIC_CREATIVES_CAN_ONLY_BE_ASSIGNED_TO_ONE_LINE_ITEM"

	// LineItemCreativeAssociationErrorReasonReasonCannotActivateAssociationWithInactiveCreative
	//
	// Cannot activate a line item creative association if the associated creative is inactive.
	//
	LineItemCreativeAssociationErrorReasonReasonCannotActivateAssociationWithInactiveCreative = "CANNOT_ACTIVATE_ASSOCIATION_WITH_INACTIVE_CREATIVE"

	// LineItemCreativeAssociationErrorReasonReasonCannotCreateProgrammaticCreatives
	//
	// Cannot create programmatic creatives.
	//
	LineItemCreativeAssociationErrorReasonReasonCannotCreateProgrammaticCreatives = "CANNOT_CREATE_PROGRAMMATIC_CREATIVES"

	// LineItemCreativeAssociationErrorReasonReasonCannotUpdateProgrammaticCreatives
	//
	// Cannot update programmatic creatives.
	//
	LineItemCreativeAssociationErrorReasonReasonCannotUpdateProgrammaticCreatives = "CANNOT_UPDATE_PROGRAMMATIC_CREATIVES"

	// LineItemCreativeAssociationErrorReasonReasonCreativeAndLineItemMustBothBeSetTopBoxEnabled
	//
	// Cannot associate a creative with a line item if only one of them is set-top box enabled.
	//
	LineItemCreativeAssociationErrorReasonReasonCreativeAndLineItemMustBothBeSetTopBoxEnabled = "CREATIVE_AND_LINE_ITEM_MUST_BOTH_BE_SET_TOP_BOX_ENABLED"

	// LineItemCreativeAssociationErrorReasonReasonCannotDeleteSetTopBoxEnabledAssociations
	//
	// Cannot delete associations between set-top box enabled line items and set-top box enabled
	// creatives.
	//
	LineItemCreativeAssociationErrorReasonReasonCannotDeleteSetTopBoxEnabledAssociations = "CANNOT_DELETE_SET_TOP_BOX_ENABLED_ASSOCIATIONS"

	// LineItemCreativeAssociationErrorReasonReasonSetTopBoxCreativeRotationWeightMustBeInteger
	//
	// Creative rotation weights must be integers.
	//
	LineItemCreativeAssociationErrorReasonReasonSetTopBoxCreativeRotationWeightMustBeInteger = "SET_TOP_BOX_CREATIVE_ROTATION_WEIGHT_MUST_BE_INTEGER"

	// LineItemCreativeAssociationErrorReasonReasonInvalidCreativeRotationTypeForManualWeight
	//
	// Creative rotation weights are only valid when creative rotation type is set to
	// {@link CreativeRotationType#MANUAL}.
	//
	LineItemCreativeAssociationErrorReasonReasonInvalidCreativeRotationTypeForManualWeight = "INVALID_CREATIVE_ROTATION_TYPE_FOR_MANUAL_WEIGHT"

	// LineItemCreativeAssociationErrorReasonReasonClickMacrosRequired
	//
	// The code snippet of a creative must contain a click macro
	// (%%CLICK_URL_ESC%% or %%CLICK_URL_UNESC%%).
	//
	LineItemCreativeAssociationErrorReasonReasonClickMacrosRequired = "CLICK_MACROS_REQUIRED"

	// LineItemCreativeAssociationErrorReasonReasonViewMacrosNotAllowed
	//
	// The code snippet of a creative must not contain a view macro
	// (%%VIEW_URL_ESC%% or %%VIEW_URL_UNESC%%).
	//
	LineItemCreativeAssociationErrorReasonReasonViewMacrosNotAllowed = "VIEW_MACROS_NOT_ALLOWED"

	// LineItemCreativeAssociationErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	LineItemCreativeAssociationErrorReasonReasonUnknown = "UNKNOWN"
)

// LockedOrientation
//
// Describes the orientation that a creative should be served with.
type LockedOrientation string

const (

	// LockedOrientationUnknown
	//
	// The value returned if the actual value is not exposed by the requested API
	// version.
	//
	LockedOrientationUnknown LockedOrientation = "UNKNOWN"

	// LockedOrientationFreeOrientation
	LockedOrientationFreeOrientation LockedOrientation = "FREE_ORIENTATION"

	// LockedOrientationPortraitOnly
	LockedOrientationPortraitOnly LockedOrientation = "PORTRAIT_ONLY"

	// LockedOrientationLandscapeOnly
	LockedOrientationLandscapeOnly LockedOrientation = "LANDSCAPE_ONLY"
)

// MimeType
//
// Enum of supported mime services
type MimeType string

const (

	// MimeTypeUnknown
	//
	// The value returned if the actual value is not exposed by the requested API
	// version.
	//
	MimeTypeUnknown MimeType = "UNKNOWN"

	// MimeTypeAsp
	//
	// application/x-asp
	//
	MimeTypeAsp MimeType = "ASP"

	// MimeTypeAudioAiff
	//
	// audio/aiff
	//
	MimeTypeAudioAiff MimeType = "AUDIO_AIFF"

	// MimeTypeAudioBasic
	//
	// audio/basic
	//
	MimeTypeAudioBasic MimeType = "AUDIO_BASIC"

	// MimeTypeAudioFlac
	//
	// audio/flac
	//
	MimeTypeAudioFlac MimeType = "AUDIO_FLAC"

	// MimeTypeAudioMid
	//
	// audio/mid
	//
	MimeTypeAudioMid MimeType = "AUDIO_MID"

	// MimeTypeAudioMp3
	//
	// audio/mpeg
	//
	MimeTypeAudioMp3 MimeType = "AUDIO_MP3"

	// MimeTypeAudioMp4
	//
	// audio/mp4
	//
	MimeTypeAudioMp4 MimeType = "AUDIO_MP4"

	// MimeTypeAudioMpegUrl
	//
	// audio/x-mpegurl
	//
	MimeTypeAudioMpegUrl MimeType = "AUDIO_MPEG_URL"

	// MimeTypeAudioMsWma
	//
	// audio/x-ms-wma
	//
	MimeTypeAudioMsWma MimeType = "AUDIO_MS_WMA"

	// MimeTypeAudioOgg
	//
	// audio/ogg
	//
	MimeTypeAudioOgg MimeType = "AUDIO_OGG"

	// MimeTypeAudioRealAudioPlugin
	//
	// audio/x-pn-realaudio-plugin
	//
	MimeTypeAudioRealAudioPlugin MimeType = "AUDIO_REAL_AUDIO_PLUGIN"

	// MimeTypeAudioWav
	//
	// audio/x-wav
	//
	MimeTypeAudioWav MimeType = "AUDIO_WAV"

	// MimeTypeBinary
	//
	// application/binary
	//
	MimeTypeBinary MimeType = "BINARY"

	// MimeTypeDash
	//
	// application/dash+xml
	//
	MimeTypeDash MimeType = "DASH"

	// MimeTypeDirector
	//
	// application/x-director
	//
	MimeTypeDirector MimeType = "DIRECTOR"

	// MimeTypeFlash
	//
	// application/x-shockwave-flash
	//
	MimeTypeFlash MimeType = "FLASH"

	// MimeTypeGraphicConverter
	//
	// application/graphicconverter
	//
	MimeTypeGraphicConverter MimeType = "GRAPHIC_CONVERTER"

	// MimeTypeJavascript
	//
	// application/x-javascript
	//
	MimeTypeJavascript MimeType = "JAVASCRIPT"

	// MimeTypeJson
	//
	// application/json
	//
	MimeTypeJson MimeType = "JSON"

	// MimeTypeImageBitmap
	//
	// image/x-win-bitmap
	//
	MimeTypeImageBitmap MimeType = "IMAGE_BITMAP"

	// MimeTypeImageBmp
	//
	// image/bmp
	//
	MimeTypeImageBmp MimeType = "IMAGE_BMP"

	// MimeTypeImageGif
	//
	// image/gif
	//
	MimeTypeImageGif MimeType = "IMAGE_GIF"

	// MimeTypeImageJpeg
	//
	// image/jpeg
	//
	MimeTypeImageJpeg MimeType = "IMAGE_JPEG"

	// MimeTypeImagePhotoshop
	//
	// image/photoshop
	//
	MimeTypeImagePhotoshop MimeType = "IMAGE_PHOTOSHOP"

	// MimeTypeImagePng
	//
	// image/png
	//
	MimeTypeImagePng MimeType = "IMAGE_PNG"

	// MimeTypeImageTiff
	//
	// image/tiff
	//
	MimeTypeImageTiff MimeType = "IMAGE_TIFF"

	// MimeTypeImageWbmp
	//
	// image/vnd.wap.wbmp
	//
	MimeTypeImageWbmp MimeType = "IMAGE_WBMP"

	// MimeTypeM3u8
	//
	// application/x-mpegURL
	//
	MimeTypeM3u8 MimeType = "M3U8"

	// MimeTypeMacBinHex40
	//
	// application/mac-binhex40
	//
	MimeTypeMacBinHex40 MimeType = "MAC_BIN_HEX_40"

	// MimeTypeMsExcel
	//
	// application/vnd.ms-excel
	//
	MimeTypeMsExcel MimeType = "MS_EXCEL"

	// MimeTypeMsPowerpoint
	//
	// application/ms-powerpoint
	//
	MimeTypeMsPowerpoint MimeType = "MS_POWERPOINT"

	// MimeTypeMsWord
	//
	// application/msword
	//
	MimeTypeMsWord MimeType = "MS_WORD"

	// MimeTypeOctetStream
	//
	// application/octet-stream
	//
	MimeTypeOctetStream MimeType = "OCTET_STREAM"

	// MimeTypePdf
	//
	// application/pdf
	//
	MimeTypePdf MimeType = "PDF"

	// MimeTypePostscript
	//
	// application/postscript
	//
	MimeTypePostscript MimeType = "POSTSCRIPT"

	// MimeTypeRnRealMedia
	//
	// application/vnd.rn-realmedia
	//
	MimeTypeRnRealMedia MimeType = "RN_REAL_MEDIA"

	// MimeTypeRfc822
	//
	// message/rfc822
	//
	MimeTypeRfc822 MimeType = "RFC_822"

	// MimeTypeRtf
	//
	// application/rtf
	//
	MimeTypeRtf MimeType = "RTF"

	// MimeTypeTextCalendar
	//
	// text/calendar
	//
	MimeTypeTextCalendar MimeType = "TEXT_CALENDAR"

	// MimeTypeTextCss
	//
	// text/css
	//
	MimeTypeTextCss MimeType = "TEXT_CSS"

	// MimeTypeTextCsv
	//
	// text/csv
	//
	MimeTypeTextCsv MimeType = "TEXT_CSV"

	// MimeTypeTextHtml
	//
	// text/html
	//
	MimeTypeTextHtml MimeType = "TEXT_HTML"

	// MimeTypeTextJava
	//
	// text/java
	//
	MimeTypeTextJava MimeType = "TEXT_JAVA"

	// MimeTypeTextPlain
	//
	// text/plain
	//
	MimeTypeTextPlain MimeType = "TEXT_PLAIN"

	// MimeTypeVideo3gpp
	//
	// video/3gpp
	//
	MimeTypeVideo3gpp MimeType = "VIDEO_3GPP"

	// MimeTypeVideo3gpp2
	//
	// video/3gpp2
	//
	MimeTypeVideo3gpp2 MimeType = "VIDEO_3GPP2"

	// MimeTypeVideoAvi
	//
	// video/avi
	//
	MimeTypeVideoAvi MimeType = "VIDEO_AVI"

	// MimeTypeVideoFlv
	//
	// video/x-flv
	//
	MimeTypeVideoFlv MimeType = "VIDEO_FLV"

	// MimeTypeVideoMp4
	//
	// video/mp4
	//
	MimeTypeVideoMp4 MimeType = "VIDEO_MP4"

	// MimeTypeVideoMp4vEs
	//
	// video/mp4v-es
	//
	MimeTypeVideoMp4vEs MimeType = "VIDEO_MP4V_ES"

	// MimeTypeVideoMpeg
	//
	// video/mpeg
	//
	MimeTypeVideoMpeg MimeType = "VIDEO_MPEG"

	// MimeTypeVideoMsAsf
	//
	// video/x-ms-asf
	//
	MimeTypeVideoMsAsf MimeType = "VIDEO_MS_ASF"

	// MimeTypeVideoMsWm
	//
	// video/x-ms-wm
	//
	MimeTypeVideoMsWm MimeType = "VIDEO_MS_WM"

	// MimeTypeVideoMsWmv
	//
	// video/x-ms-wmv
	//
	MimeTypeVideoMsWmv MimeType = "VIDEO_MS_WMV"

	// MimeTypeVideoMsWvx
	//
	// video/x-ms-wvx
	//
	MimeTypeVideoMsWvx MimeType = "VIDEO_MS_WVX"

	// MimeTypeVideoOgg
	//
	// video/ogg
	//
	MimeTypeVideoOgg MimeType = "VIDEO_OGG"

	// MimeTypeVideoQuicktime
	//
	// video/x-quicktime
	//
	MimeTypeVideoQuicktime MimeType = "VIDEO_QUICKTIME"

	// MimeTypeVideoWebm
	//
	// video/webm
	//
	MimeTypeVideoWebm MimeType = "VIDEO_WEBM"

	// MimeTypeXaml
	//
	// application/xaml+xml
	//
	MimeTypeXaml MimeType = "XAML"

	// MimeTypeXhtml
	//
	// application/xhtml+xml
	//
	MimeTypeXhtml MimeType = "XHTML"

	// MimeTypeXml
	//
	// application/xml
	//
	MimeTypeXml MimeType = "XML"

	// MimeTypeZip
	//
	// application/zip
	//
	MimeTypeZip MimeType = "ZIP"
)

// NotNullErrorReasonReason
//
// The reasons for the target error.
const (

	// NotNullErrorReasonReasonArg1Null
	//
	// Assuming that a method will not have more than 3 arguments, if it does,
	// return NULL
	//
	NotNullErrorReasonReasonArg1Null = "ARG1_NULL"

	// NotNullErrorReasonReasonArg2Null
	NotNullErrorReasonReasonArg2Null = "ARG2_NULL"

	// NotNullErrorReasonReasonArg3Null
	NotNullErrorReasonReasonArg3Null = "ARG3_NULL"

	// NotNullErrorReasonReasonNull
	NotNullErrorReasonReasonNull = "NULL"

	// NotNullErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	NotNullErrorReasonReasonUnknown = "UNKNOWN"
)

// NullErrorReasonReason
//
// The reasons for the validation error.
const (

	// NullErrorReasonReasonNullContent
	//
	// Specified list/container must not contain any null elements
	//
	NullErrorReasonReasonNullContent = "NULL_CONTENT"
)

// ParseErrorReasonReason
//
// The reasons for the target error.
const (

	// ParseErrorReasonReasonUnparsable
	//
	// Indicates an error in parsing an attribute.
	//
	ParseErrorReasonReasonUnparsable = "UNPARSABLE"

	// ParseErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ParseErrorReasonReasonUnknown = "UNKNOWN"
)

// PermissionErrorReasonReason
//
// Describes reasons for permission errors.
const (

	// PermissionErrorReasonReasonPermissionDenied
	//
	// User does not have the required permission for the request.
	//
	PermissionErrorReasonReasonPermissionDenied = "PERMISSION_DENIED"

	// PermissionErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PermissionErrorReasonReasonUnknown = "UNKNOWN"
)

// PublisherQueryLanguageContextErrorReasonReason
//
// The reasons for the target error.
const (

	// PublisherQueryLanguageContextErrorReasonReasonUnexecutable
	//
	// Indicates that there was an error executing the PQL.
	//
	PublisherQueryLanguageContextErrorReasonReasonUnexecutable = "UNEXECUTABLE"

	// PublisherQueryLanguageContextErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PublisherQueryLanguageContextErrorReasonReasonUnknown = "UNKNOWN"
)

// PublisherQueryLanguageSyntaxErrorReasonReason
//
// The reasons for the target error.
const (

	// PublisherQueryLanguageSyntaxErrorReasonReasonUnparsable
	//
	// Indicates that there was a PQL syntax error.
	//
	PublisherQueryLanguageSyntaxErrorReasonReasonUnparsable = "UNPARSABLE"

	// PublisherQueryLanguageSyntaxErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PublisherQueryLanguageSyntaxErrorReasonReasonUnknown = "UNKNOWN"
)

// QuotaErrorReasonReason
const (

	// QuotaErrorReasonReasonExceededQuota
	//
	// The number of requests made per second is too high and has exceeded the
	// allowable limit. The recommended approach to handle this error is to wait
	// about 5 seconds and then retry the request. Note that this does not
	// guarantee the request will succeed. If it fails again, try increasing the
	// wait time.
	// <p>Another way to mitigate this error is to limit requests to 8 per second for Ad Manager
	// 360 accounts, or 2 per second for Ad Manager accounts. Once again
	// this does not guarantee that every request will succeed, but may help
	// reduce the number of times you receive this error.
	//
	QuotaErrorReasonReasonExceededQuota = "EXCEEDED_QUOTA"

	// QuotaErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	QuotaErrorReasonReasonUnknown = "UNKNOWN"

	// QuotaErrorReasonReasonReportJobLimit
	//
	// This user has exceeded the allowed number of new report requests per hour
	// (this includes both reports run via the UI and reports
	// run via {@link ReportService#runReportJob}).
	// The recommended approach to handle this error is to wait about 10 minutes
	// and then retry the request. Note that this does not guarantee the request
	// will succeed. If it fails again, try increasing the wait time.
	// <p>Another way to mitigate this error is to limit the number of new report
	// requests to 250 per hour per user. Once again, this does not guarantee that
	// every request will succeed, but may help reduce the number of times you
	// receive this error.
	//
	QuotaErrorReasonReasonReportJobLimit = "REPORT_JOB_LIMIT"

	// QuotaErrorReasonReasonSegmentPopulationLimit
	//
	// This network has exceeded the allowed number of identifiers uploaded within a 24 hour period.
	// The recommended approach to handle this error is to wait 30 minutes and then retry the
	// request. Note that this does not guarantee the request will succeed. If it fails again, try
	// increasing the wait time.
	//
	QuotaErrorReasonReasonSegmentPopulationLimit = "SEGMENT_POPULATION_LIMIT"
)

// RangeErrorReasonReason
const (

	// RangeErrorReasonReasonTooHigh
	RangeErrorReasonReasonTooHigh = "TOO_HIGH"

	// RangeErrorReasonReasonTooLow
	RangeErrorReasonReasonTooLow = "TOO_LOW"

	// RangeErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RangeErrorReasonReasonUnknown = "UNKNOWN"
)

// RequiredCollectionErrorReasonReason
const (

	// RequiredCollectionErrorReasonReasonRequired
	//
	// A required collection is missing.
	//
	RequiredCollectionErrorReasonReasonRequired = "REQUIRED"

	// RequiredCollectionErrorReasonReasonTooLarge
	//
	// Collection size is too large.
	//
	RequiredCollectionErrorReasonReasonTooLarge = "TOO_LARGE"

	// RequiredCollectionErrorReasonReasonTooSmall
	//
	// Collection size is too small.
	//
	RequiredCollectionErrorReasonReasonTooSmall = "TOO_SMALL"

	// RequiredCollectionErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RequiredCollectionErrorReasonReasonUnknown = "UNKNOWN"
)

// RequiredErrorReasonReason
//
// The reasons for the target error.
const (

	// RequiredErrorReasonReasonRequired
	//
	// Missing required field.
	//
	RequiredErrorReasonReasonRequired = "REQUIRED"
)

// RequiredNumberErrorReasonReason
//
// Describes reasons for a number to be invalid.
const (

	// RequiredNumberErrorReasonReasonRequired
	RequiredNumberErrorReasonReasonRequired = "REQUIRED"

	// RequiredNumberErrorReasonReasonTooLarge
	RequiredNumberErrorReasonReasonTooLarge = "TOO_LARGE"

	// RequiredNumberErrorReasonReasonTooSmall
	RequiredNumberErrorReasonReasonTooSmall = "TOO_SMALL"

	// RequiredNumberErrorReasonReasonTooLargeWithDetails
	RequiredNumberErrorReasonReasonTooLargeWithDetails = "TOO_LARGE_WITH_DETAILS"

	// RequiredNumberErrorReasonReasonTooSmallWithDetails
	RequiredNumberErrorReasonReasonTooSmallWithDetails = "TOO_SMALL_WITH_DETAILS"

	// RequiredNumberErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RequiredNumberErrorReasonReasonUnknown = "UNKNOWN"
)

// RequiredSizeErrorReasonReason
const (

	// RequiredSizeErrorReasonReasonRequired
	//
	// {@link Creative#size} or {@link LineItem#creativePlaceholders} size is
	// missing.
	//
	RequiredSizeErrorReasonReasonRequired = "REQUIRED"

	// RequiredSizeErrorReasonReasonNotAllowed
	//
	// {@link LineItemCreativeAssociation#sizes} must be a subset of
	// {@link LineItem#creativePlaceholders} sizes.
	//
	RequiredSizeErrorReasonReasonNotAllowed = "NOT_ALLOWED"

	// RequiredSizeErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RequiredSizeErrorReasonReasonUnknown = "UNKNOWN"
)

// RichMediaStudioChildAssetPropertyTypeType
//
// Type of {@code RichMediaStudioChildAssetProperty}
type RichMediaStudioChildAssetPropertyType string

const (

	// RichMediaStudioChildAssetPropertyTypeTypeFlash
	//
	// SWF files
	//
	RichMediaStudioChildAssetPropertyTypeTypeFlash RichMediaStudioChildAssetPropertyType = "FLASH"

	// RichMediaStudioChildAssetPropertyTypeTypeVideo
	//
	// FLVS and any other video file services
	//
	RichMediaStudioChildAssetPropertyTypeTypeVideo RichMediaStudioChildAssetPropertyType = "VIDEO"

	// RichMediaStudioChildAssetPropertyTypeTypeImage
	//
	// Image files
	//
	RichMediaStudioChildAssetPropertyTypeTypeImage RichMediaStudioChildAssetPropertyType = "IMAGE"

	// RichMediaStudioChildAssetPropertyTypeTypeData
	//
	// The rest of the supported file services .txt, .xml, etc.
	//
	RichMediaStudioChildAssetPropertyTypeTypeData RichMediaStudioChildAssetPropertyType = "DATA"
)

// RichMediaStudioCreativeArtworkType
//
// Rich Media Studio creative artwork services.
type RichMediaStudioCreativeArtworkType string

const (

	// RichMediaStudioCreativeArtworkTypeFlash
	//
	// The creative is a Flash creative.
	//
	RichMediaStudioCreativeArtworkTypeFlash RichMediaStudioCreativeArtworkType = "FLASH"

	// RichMediaStudioCreativeArtworkTypeHtml5
	//
	// The creative is HTML5.
	//
	RichMediaStudioCreativeArtworkTypeHtml5 RichMediaStudioCreativeArtworkType = "HTML5"

	// RichMediaStudioCreativeArtworkTypeMixed
	//
	// The creative is Flash if available, and HTML5 otherwise.
	//
	RichMediaStudioCreativeArtworkTypeMixed RichMediaStudioCreativeArtworkType = "MIXED"
)

// RichMediaStudioCreativeBillingAttribute
//
// Rich Media Studio creative supported billing attributes.
// <p>
// This is determined by Rich Media Studio based on the content
// of the creative and is not updateable.
type RichMediaStudioCreativeBillingAttribute string

const (

	// RichMediaStudioCreativeBillingAttributeInPage
	//
	// Applies to any {@link RichMediaStudioCreativeFormat#IN_PAGE}, without Video.
	//
	RichMediaStudioCreativeBillingAttributeInPage RichMediaStudioCreativeBillingAttribute = "IN_PAGE"

	// RichMediaStudioCreativeBillingAttributeFloatingExpanding
	//
	// Applies to any of these following {@link RichMediaStudioCreativeFormat}, without Video:
	// {@link RichMediaStudioCreativeFormat#EXPANDING},
	// {@link RichMediaStudioCreativeFormat#IM_EXPANDING},
	// {@link RichMediaStudioCreativeFormat#FLOATING},
	// {@link RichMediaStudioCreativeFormat#PEEL_DOWN},
	// {@link RichMediaStudioCreativeFormat#IN_PAGE_WITH_FLOATING}
	//
	RichMediaStudioCreativeBillingAttributeFloatingExpanding RichMediaStudioCreativeBillingAttribute = "FLOATING_EXPANDING"

	// RichMediaStudioCreativeBillingAttributeVideo
	//
	// Applies to any creatives that includes a video.
	//
	RichMediaStudioCreativeBillingAttributeVideo RichMediaStudioCreativeBillingAttribute = "VIDEO"

	// RichMediaStudioCreativeBillingAttributeFlashInFlash
	//
	// Applies to any {@link RichMediaStudioCreativeFormat#FLASH_IN_FLASH}, without Video.
	//
	RichMediaStudioCreativeBillingAttributeFlashInFlash RichMediaStudioCreativeBillingAttribute = "FLASH_IN_FLASH"
)

// RichMediaStudioCreativeErrorReasonReason
//
// The reasons for the target error.
const (

	// RichMediaStudioCreativeErrorReasonReasonCreationNotAllowed
	//
	// Only Studio can create a {@code RichMediaStudioCreative}.
	//
	RichMediaStudioCreativeErrorReasonReasonCreationNotAllowed = "CREATION_NOT_ALLOWED"

	// RichMediaStudioCreativeErrorReasonReasonUknownError
	//
	// Unknown error
	//
	RichMediaStudioCreativeErrorReasonReasonUknownError = "UKNOWN_ERROR"

	// RichMediaStudioCreativeErrorReasonReasonInvalidCodeGenerationRequest
	//
	// Invalid request indicating missing/invalid request parameters.
	//
	RichMediaStudioCreativeErrorReasonReasonInvalidCodeGenerationRequest = "INVALID_CODE_GENERATION_REQUEST"

	// RichMediaStudioCreativeErrorReasonReasonInvalidCreativeObject
	//
	// Invalid creative object.
	//
	RichMediaStudioCreativeErrorReasonReasonInvalidCreativeObject = "INVALID_CREATIVE_OBJECT"

	// RichMediaStudioCreativeErrorReasonReasonStudioConnectionError
	//
	// Unable to connect to Rich Media Studio to save the creative. Please try again later.
	//
	RichMediaStudioCreativeErrorReasonReasonStudioConnectionError = "STUDIO_CONNECTION_ERROR"

	// RichMediaStudioCreativeErrorReasonReasonPushdownDurationNotAllowed
	//
	// The push down duration is not allowed
	//
	RichMediaStudioCreativeErrorReasonReasonPushdownDurationNotAllowed = "PUSHDOWN_DURATION_NOT_ALLOWED"

	// RichMediaStudioCreativeErrorReasonReasonInvalidPosition
	//
	// The position is invalid
	//
	RichMediaStudioCreativeErrorReasonReasonInvalidPosition = "INVALID_POSITION"

	// RichMediaStudioCreativeErrorReasonReasonInvalidZIndex
	//
	// The Z-index is invalid
	//
	RichMediaStudioCreativeErrorReasonReasonInvalidZIndex = "INVALID_Z_INDEX"

	// RichMediaStudioCreativeErrorReasonReasonInvalidPushdownDuration
	//
	// The push-down duration is invalid
	//
	RichMediaStudioCreativeErrorReasonReasonInvalidPushdownDuration = "INVALID_PUSHDOWN_DURATION"

	// RichMediaStudioCreativeErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RichMediaStudioCreativeErrorReasonReasonUnknown = "UNKNOWN"
)

// RichMediaStudioCreativeFormat
//
// Different creative format supported by Rich Media Studio creative.
type RichMediaStudioCreativeFormat string

const (

	// RichMediaStudioCreativeFormatInPage
	//
	// In-page creatives are served into an ad slot on publishers page.
	// In-page implies that they maintain a static size, e.g, 468x60 and
	// do not break out of these dimensions.
	//
	RichMediaStudioCreativeFormatInPage RichMediaStudioCreativeFormat = "IN_PAGE"

	// RichMediaStudioCreativeFormatExpanding
	//
	// Expanding creatives expand/collapse on user interaction such as mouse over.
	// It consists of an initial, or collapsed and an expanded creative area.
	//
	RichMediaStudioCreativeFormatExpanding RichMediaStudioCreativeFormat = "EXPANDING"

	// RichMediaStudioCreativeFormatImExpanding
	//
	// Creatives that are served in an instant messenger application such as
	// AOL Instant Messanger or Yahoo! Messenger. This can also be used in
	// desktop applications such as weatherbug.
	//
	RichMediaStudioCreativeFormatImExpanding RichMediaStudioCreativeFormat = "IM_EXPANDING"

	// RichMediaStudioCreativeFormatFloating
	//
	// Floating creatives float on top of publishers page and can be closed with
	// a close button.
	//
	RichMediaStudioCreativeFormatFloating RichMediaStudioCreativeFormat = "FLOATING"

	// RichMediaStudioCreativeFormatPeelDown
	//
	// Peel-down creatives show a glimpse of your ad in the corner of a web
	// page. When the user interacts, the rest of the ad peels down to reveal
	// the full message.
	//
	RichMediaStudioCreativeFormatPeelDown RichMediaStudioCreativeFormat = "PEEL_DOWN"

	// RichMediaStudioCreativeFormatInPageWithFloating
	//
	// An In-Page with Floating creative is a dual-asset creative consisting of
	// an in-page asset and a floating asset. This creative type lets you deliver
	// a static primary ad to a webpage, while inviting a user to find out more
	// through a floating asset delivered when the user interacts with the
	// creative.
	//
	RichMediaStudioCreativeFormatInPageWithFloating RichMediaStudioCreativeFormat = "IN_PAGE_WITH_FLOATING"

	// RichMediaStudioCreativeFormatFlashInFlash
	//
	// A Flash ad that renders in a Flash environment.  The adserver will serve
	// this using VAST, but it is not a proper VAST XML ad.  It's an amalgamation
	// of the proprietary InStream protocol, rendered inside VAST so that we
	// can capture some standard behavior such as companions.
	//
	RichMediaStudioCreativeFormatFlashInFlash RichMediaStudioCreativeFormat = "FLASH_IN_FLASH"

	// RichMediaStudioCreativeFormatFlashInFlashExpanding
	//
	// An expanding flash ad that renders in a Flash environment. The adserver
	// will serve this using VAST, but it is not a proper VAST XML ad. It's an
	// amalgamation of the proprietary InStream protocol, rendered inside VAST so
	// that we can capture some standard behavior such as companions.
	//
	RichMediaStudioCreativeFormatFlashInFlashExpanding RichMediaStudioCreativeFormat = "FLASH_IN_FLASH_EXPANDING"

	// RichMediaStudioCreativeFormatInApp
	//
	// In-app creatives are served into an ad slot within a publisher's app.
	// In-app implies that they maintain a static size, e.g, 468x60 and
	// do not break out of these dimensions.
	//
	RichMediaStudioCreativeFormatInApp RichMediaStudioCreativeFormat = "IN_APP"

	// RichMediaStudioCreativeFormatUnknown
	//
	// The creative format is unknown or not supported in the API version in use.
	//
	RichMediaStudioCreativeFormatUnknown RichMediaStudioCreativeFormat = "UNKNOWN"
)

// ScalableType
//
// The different ways a video/flash can scale.
type ScalableType string

const (

	// ScalableTypeUnknown
	//
	// The value returned if the actual value is not exposed by the requested API
	// version.
	//
	ScalableTypeUnknown ScalableType = "UNKNOWN"

	// ScalableTypeNotScalable
	//
	// The creative should not be scaled.
	//
	ScalableTypeNotScalable ScalableType = "NOT_SCALABLE"

	// ScalableTypeRatioScalable
	//
	// The creative can be scaled and its aspect-ratio must be maintained.
	//
	ScalableTypeRatioScalable ScalableType = "RATIO_SCALABLE"

	// ScalableTypeStretchScalable
	//
	// The creative can be scaled and its aspect-ratio can be distorted.
	//
	ScalableTypeStretchScalable ScalableType = "STRETCH_SCALABLE"
)

// ServerErrorReasonReason
//
// Describes reasons for server errors
const (

	// ServerErrorReasonReasonServerError
	//
	// Indicates that an unexpected error occured.
	//
	ServerErrorReasonReasonServerError = "SERVER_ERROR"

	// ServerErrorReasonReasonServerBusy
	//
	// Indicates that the server is currently experiencing a high load. Please
	// wait and try your request again.
	//
	ServerErrorReasonReasonServerBusy = "SERVER_BUSY"

	// ServerErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ServerErrorReasonReasonUnknown = "UNKNOWN"
)

// SetTopBoxCreativeErrorReasonReason
//
// Error reasons for set-top box creatives.
const (

	// SetTopBoxCreativeErrorReasonReasonExternalAssetIdImmutable
	//
	// Set-top box creative external asset IDs are immutable after creation.
	//
	SetTopBoxCreativeErrorReasonReasonExternalAssetIdImmutable = "EXTERNAL_ASSET_ID_IMMUTABLE"

	// SetTopBoxCreativeErrorReasonReasonExternalAssetIdRequired
	//
	// Set-top box creatives require an external asset ID.
	//
	SetTopBoxCreativeErrorReasonReasonExternalAssetIdRequired = "EXTERNAL_ASSET_ID_REQUIRED"

	// SetTopBoxCreativeErrorReasonReasonProviderIdImmutable
	//
	// Set-top box creative provider IDs are immutable after creation.
	//
	SetTopBoxCreativeErrorReasonReasonProviderIdImmutable = "PROVIDER_ID_IMMUTABLE"

	// SetTopBoxCreativeErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	SetTopBoxCreativeErrorReasonReasonUnknown = "UNKNOWN"
)

// SkippableAdType
//
// The different services of skippable ads.
type SkippableAdType string

const (

	// SkippableAdTypeUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	SkippableAdTypeUnknown SkippableAdType = "UNKNOWN"

	// SkippableAdTypeDisabled
	//
	// Skippable ad type is disabled.
	//
	SkippableAdTypeDisabled SkippableAdType = "DISABLED"

	// SkippableAdTypeEnabled
	//
	// Skippable ad type is enabled.
	//
	SkippableAdTypeEnabled SkippableAdType = "ENABLED"

	// SkippableAdTypeInstreamSelect
	//
	// Skippable in-stream ad type.
	//
	SkippableAdTypeInstreamSelect SkippableAdType = "INSTREAM_SELECT"

	// SkippableAdTypeAny
	//
	// Any skippable or not skippable. This is only for programmatic case when the creative
	// skippability is decided by the buyside.
	//
	SkippableAdTypeAny SkippableAdType = "ANY"
)

// SslManualOverride
//
// Enum to store the creative SSL compatibility manual override.
// Its three states are similar to that of {@link SslScanResult}.
type SslManualOverride string

const (

	// SslManualOverrideUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	SslManualOverrideUnknown SslManualOverride = "UNKNOWN"

	// SslManualOverrideNoOverride
	SslManualOverrideNoOverride SslManualOverride = "NO_OVERRIDE"

	// SslManualOverrideSslCompatible
	SslManualOverrideSslCompatible SslManualOverride = "SSL_COMPATIBLE"

	// SslManualOverrideNotSslCompatible
	SslManualOverrideNotSslCompatible SslManualOverride = "NOT_SSL_COMPATIBLE"
)

// SslScanResult
//
// Enum to store the creative SSL compatibility scan result.
type SslScanResult string

const (

	// SslScanResultUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	SslScanResultUnknown SslScanResult = "UNKNOWN"

	// SslScanResultUnscanned
	SslScanResultUnscanned SslScanResult = "UNSCANNED"

	// SslScanResultScannedSsl
	SslScanResultScannedSsl SslScanResult = "SCANNED_SSL"

	// SslScanResultScannedNonSsl
	SslScanResultScannedNonSsl SslScanResult = "SCANNED_NON_SSL"
)

// StatementErrorReasonReason
const (

	// StatementErrorReasonReasonVariableNotBoundToValue
	//
	// A bind variable has not been bound to a value.
	//
	StatementErrorReasonReasonVariableNotBoundToValue = "VARIABLE_NOT_BOUND_TO_VALUE"

	// StatementErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	StatementErrorReasonReasonUnknown = "UNKNOWN"
)

// StringFormatErrorReasonReason
//
// The reasons for the target error.
const (

	// StringFormatErrorReasonReasonUnknown
	StringFormatErrorReasonReasonUnknown = "UNKNOWN"

	// StringFormatErrorReasonReasonIllegalChars
	//
	// The input string value contains disallowed characters.
	//
	StringFormatErrorReasonReasonIllegalChars = "ILLEGAL_CHARS"

	// StringFormatErrorReasonReasonInvalidFormat
	//
	// The input string value is invalid for the associated field.
	//
	StringFormatErrorReasonReasonInvalidFormat = "INVALID_FORMAT"
)

// StringLengthErrorReasonReason
const (

	// StringLengthErrorReasonReasonTooLong
	StringLengthErrorReasonReasonTooLong = "TOO_LONG"

	// StringLengthErrorReasonReasonTooShort
	StringLengthErrorReasonReasonTooShort = "TOO_SHORT"

	// StringLengthErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	StringLengthErrorReasonReasonUnknown = "UNKNOWN"
)

// SwiffyConversionErrorReasonReason
//
// Error reason for {@link SwiffyConversionError}.
const (

	// SwiffyConversionErrorReasonReasonServerError
	//
	// Indicates the Swiffy service has an internal error that prevents the flash
	// asset being converted.
	//
	SwiffyConversionErrorReasonReasonServerError = "SERVER_ERROR"

	// SwiffyConversionErrorReasonReasonInvalidFlashFile
	//
	// Indicates the uploaded flash asset is not a valid flash file.
	//
	SwiffyConversionErrorReasonReasonInvalidFlashFile = "INVALID_FLASH_FILE"

	// SwiffyConversionErrorReasonReasonUnsupportedFlash
	//
	// Indicates the Swiffy service currently does not support converting this
	// flash asset.
	//
	SwiffyConversionErrorReasonReasonUnsupportedFlash = "UNSUPPORTED_FLASH"

	// SwiffyConversionErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	SwiffyConversionErrorReasonReasonUnknown = "UNKNOWN"
)

// TemplateInstantiatedCreativeErrorReasonReason
//
// The reason for the error
const (

	// TemplateInstantiatedCreativeErrorReasonReasonInactiveCreativeTemplate
	//
	// A new creative cannot be created from an inactive creative template.
	//
	TemplateInstantiatedCreativeErrorReasonReasonInactiveCreativeTemplate = "INACTIVE_CREATIVE_TEMPLATE"

	// TemplateInstantiatedCreativeErrorReasonReasonFileTypeNotAllowed
	//
	// An uploaded file type is not allowed
	//
	TemplateInstantiatedCreativeErrorReasonReasonFileTypeNotAllowed = "FILE_TYPE_NOT_ALLOWED"

	// TemplateInstantiatedCreativeErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	TemplateInstantiatedCreativeErrorReasonReasonUnknown = "UNKNOWN"
)

// TranscodingErrorReasonReason
//
// The type of transcode request rejection.
const (

	// TranscodingErrorReasonReasonCannotCopyCreativePendingTranscode
	//
	// The request to copy the creative(s) was rejected because the source is not transcoded.
	//
	TranscodingErrorReasonReasonCannotCopyCreativePendingTranscode = "CANNOT_COPY_CREATIVE_PENDING_TRANSCODE"

	// TranscodingErrorReasonReasonCannotCopyInvalidCreative
	//
	// The request to copy the creative(s) was rejected because the source is invalid.
	//
	TranscodingErrorReasonReasonCannotCopyInvalidCreative = "CANNOT_COPY_INVALID_CREATIVE"

	// TranscodingErrorReasonReasonTranscodingIsInProgress
	//
	// The creative is still being transcoded or processed. Please try again later.
	//
	TranscodingErrorReasonReasonTranscodingIsInProgress = "TRANSCODING_IS_IN_PROGRESS"

	// TranscodingErrorReasonReasonUnknown
	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	TranscodingErrorReasonReasonUnknown = "UNKNOWN"
)

// VastRedirectType
//
// The services of VAST ads that a {@link VastRedirectCreative} can point to.
type VastRedirectType string

const (

	// VastRedirectTypeLinear
	//
	// The VAST XML contains only {@code linear} ads.
	//
	VastRedirectTypeLinear VastRedirectType = "LINEAR"

	// VastRedirectTypeNonLinear
	//
	// The VAST XML contains only {@code nonlinear} ads.
	//
	VastRedirectTypeNonLinear VastRedirectType = "NON_LINEAR"

	// VastRedirectTypeLinearAndNonLinear
	//
	// The VAST XML contains both {@code linear} and {@code nonlinear} ads.
	//
	VastRedirectTypeLinearAndNonLinear VastRedirectType = "LINEAR_AND_NON_LINEAR"
)

// VideoDeliveryType
//
// The video delivery type.
type VideoDeliveryType string

const (

	// VideoDeliveryTypeUnknown
	//
	// The value returned if the actual value is not exposed by the requested API
	// version.
	//
	VideoDeliveryTypeUnknown VideoDeliveryType = "UNKNOWN"

	// VideoDeliveryTypeProgressive
	//
	// Video will be served through a progressive download.
	//
	VideoDeliveryTypeProgressive VideoDeliveryType = "PROGRESSIVE"

	// VideoDeliveryTypeStreaming
	//
	// Video will be served via a streaming protocol like HLS or DASH.
	//
	VideoDeliveryTypeStreaming VideoDeliveryType = "STREAMING"
)

// createCreatives
//
// Creates new {@link Creative} objects.
type CreateCreatives struct {
	Creatives []*Creative `xml:"creatives"`
}

// createCreativesResponse
type CreateCreativesResponse struct {
	Rval []*Creative `xml:"rval"`
}

// getCreativesByStatement
//
// Gets a {@link CreativePage} of {@link Creative} objects that satisfy the given {@link
// Statement#query}. The following fields are supported for filtering:
//
// <table>
// <tr>
// <th scope="col">PQL Property</th> <th scope="col">Object Property</th>
// </tr>
// <tr>
// <td>{@code id}</td>
// <td>{@link Creative#id}</td>
// </tr>
// <tr>
// <td>{@code name}</td>
// <td>{@link Creative#name}</td>
// </tr>
// <tr>
// <td>{@code advertiserId}</td>
// <td>{@link Creative#advertiserId}</td>
// </tr>
// <tr>
// <td>{@code width}</td>
// <td>{@link Creative#size}</td>
// </tr>
// <tr>
// <td>{@code height}</td>
// <td>{@link Creative#size}</td>
// </tr>
// <tr>
// <td>{@code lastModifiedDateTime}</td>
// <td>{@link Creative#lastModifiedDateTime}</td>
// </tr>
// </table>
type GetCreativesByStatement struct {
	FilterStatement *Statement `xml:"filterStatement"`
}

// getCreativesByStatementResponse
type GetCreativesByStatementResponse struct {
	Rval *CreativePage `xml:"rval"`
}

// performCreativeAction
//
// Performs action on {@link Creative} objects that match the given {@link Statement#query}.
type PerformCreativeAction struct {
	CreativeAction *CreativeAction `xml:"creativeAction"`

	FilterStatement *Statement `xml:"filterStatement"`
}

// performCreativeActionResponse
type PerformCreativeActionResponse struct {
	Rval *UpdateResult `xml:"rval"`
}

// updateCreatives
//
// Updates the specified {@link Creative} objects.
type UpdateCreatives struct {
	Creatives []*Creative `xml:"creatives"`
}

// updateCreativesResponse
type UpdateCreativesResponse struct {
	Rval []*Creative `xml:"rval"`
}

// RequestHeader
type RequestHeader struct {
}

// ResponseHeader
type ResponseHeader struct {
}
