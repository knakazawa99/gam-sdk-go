// Code generated by gamwsdl/main.go. DO NOT EDIT.
package creative

import (
	"context"
	"encoding/xml"
	"fmt"

	"github.com/knakazawa99/gam-sdk-go/pkg/gam/requestbody"
	"github.com/knakazawa99/gam-sdk-go/pkg/gam/soap"
	gamxml "github.com/knakazawa99/gam-sdk-go/pkg/xml"
)

const (
	wsdl = "https://ads.google.com/apis/ads/publisher/v202402/CreativeService"

	OperationCreateCreatives = "createCreatives"

	OperationGetCreativesByStatement = "getCreativesByStatement"

	OperationPerformCreativeAction = "performCreativeAction"

	OperationUpdateCreatives = "updateCreatives"
)

// CreativeServiceInterface
//
// Provides methods for adding, updating and retrieving {@link Creative} objects.
//
// <p>For a creative to run, it must be associated with a {@link LineItem} managed by the {@link
// LineItemCreativeAssociationService}.
//
// <p>Read more about creatives on the <a
// href="https://support.google.com/admanager/answer/3185155">Ad Manager Help Center</a>.
type CreativeServiceInterface interface {

	// CreateCreatives
	//
	// Creates new {@link Creative} objects.
	//
	CreateCreatives(ctx context.Context, input CreateCreatives) (*CreateCreativesResponse, error)

	// GetCreativesByStatement
	//
	// Gets a {@link CreativePage} of {@link Creative} objects that satisfy the given {@link
	// Statement#query}. The following fields are supported for filtering:
	//
	// <table>
	// <tr>
	// <th scope="col">PQL Property</th> <th scope="col">Object Property</th>
	// </tr>
	// <tr>
	// <td>{@code id}</td>
	// <td>{@link Creative#id}</td>
	// </tr>
	// <tr>
	// <td>{@code name}</td>
	// <td>{@link Creative#name}</td>
	// </tr>
	// <tr>
	// <td>{@code advertiserId}</td>
	// <td>{@link Creative#advertiserId}</td>
	// </tr>
	// <tr>
	// <td>{@code width}</td>
	// <td>{@link Creative#size}</td>
	// </tr>
	// <tr>
	// <td>{@code height}</td>
	// <td>{@link Creative#size}</td>
	// </tr>
	// <tr>
	// <td>{@code lastModifiedDateTime}</td>
	// <td>{@link Creative#lastModifiedDateTime}</td>
	// </tr>
	// </table>
	//
	GetCreativesByStatement(ctx context.Context, input GetCreativesByStatement) (*GetCreativesByStatementResponse, error)

	// PerformCreativeAction
	//
	// Performs action on {@link Creative} objects that match the given {@link Statement#query}.
	//
	PerformCreativeAction(ctx context.Context, action requestbody.PerformAction, input PerformCreativeAction) (*PerformCreativeActionResponse, error)

	// UpdateCreatives
	//
	// Updates the specified {@link Creative} objects.
	//
	UpdateCreatives(ctx context.Context, input UpdateCreatives) (*UpdateCreativesResponse, error)
}

type Envelope struct {
	xmlName xml.Name `xml:"Envelope"`
	Body    Body     `xml:"Body"`
}

type Body struct {
	xmlName xml.Name   `xml:"Body"`
	Fault   soap.Fault `xml:"Fault"`

	// CreateCreativesResponse
	//
	// Creates new {@link Creative} objects.
	//
	CreateCreativesResponse CreateCreativesResponse `xml:"createCreativesResponse"`

	// GetCreativesByStatementResponse
	//
	// Gets a {@link CreativePage} of {@link Creative} objects that satisfy the given {@link
	// Statement#query}. The following fields are supported for filtering:
	//
	// <table>
	// <tr>
	// <th scope="col">PQL Property</th> <th scope="col">Object Property</th>
	// </tr>
	// <tr>
	// <td>{@code id}</td>
	// <td>{@link Creative#id}</td>
	// </tr>
	// <tr>
	// <td>{@code name}</td>
	// <td>{@link Creative#name}</td>
	// </tr>
	// <tr>
	// <td>{@code advertiserId}</td>
	// <td>{@link Creative#advertiserId}</td>
	// </tr>
	// <tr>
	// <td>{@code width}</td>
	// <td>{@link Creative#size}</td>
	// </tr>
	// <tr>
	// <td>{@code height}</td>
	// <td>{@link Creative#size}</td>
	// </tr>
	// <tr>
	// <td>{@code lastModifiedDateTime}</td>
	// <td>{@link Creative#lastModifiedDateTime}</td>
	// </tr>
	// </table>
	//
	GetCreativesByStatementResponse GetCreativesByStatementResponse `xml:"getCreativesByStatementResponse"`

	// PerformCreativeActionResponse
	//
	// Performs action on {@link Creative} objects that match the given {@link Statement#query}.
	//
	PerformCreativeActionResponse PerformCreativeActionResponse `xml:"performCreativeActionResponse"`

	// UpdateCreativesResponse
	//
	// Updates the specified {@link Creative} objects.
	//
	UpdateCreativesResponse UpdateCreativesResponse `xml:"updateCreativesResponse"`
}

type Service struct {
	client          soap.Client
	wsdl            string
	networkCode     int
	applicationName string
}

func NewService(client soap.Client, networkCode int, applicationName string) CreativeServiceInterface {
	return &Service{
		client:          client,
		wsdl:            wsdl,
		networkCode:     networkCode,
		applicationName: applicationName,
	}
}

// CreativeServiceInterface
//
// Provides methods for adding, updating and retrieving {@link Creative} objects.
//
// <p>For a creative to run, it must be associated with a {@link LineItem} managed by the {@link
// LineItemCreativeAssociationService}.
//
// <p>Read more about creatives on the <a
// href="https://support.google.com/admanager/answer/3185155">Ad Manager Help Center</a>.
//

// CreateCreatives
//
// Creates new {@link Creative} objects.
func (s *Service) CreateCreatives(ctx context.Context, input CreateCreatives) (*CreateCreativesResponse, error) {
	parameterXML, err := gamxml.DeepMarshal(input, true)
	data := requestbody.DefaultRequestBody{
		NetworkCode:     s.networkCode,
		ApplicationName: s.applicationName,
		OperationName:   OperationCreateCreatives,
		Parameters:      string(parameterXML),
	}

	soapBody, err := requestbody.GenerateDefaultRequestSoapBody(data)
	if err != nil {
		return nil, fmt.Errorf("failed to generate soap body: %w", err)
	}

	body, err := s.client.Call(ctx, s.wsdl, soapBody)
	if err != nil {
		return nil, err
	}

	var envelope Envelope
	if err := xml.Unmarshal(body, &envelope); err != nil {
		return nil, err
	}

	if envelope.Body.Fault.Detail.APIExecutionFault != nil {
		apiExceptionFaultErrors := envelope.Body.Fault.Detail.APIExecutionFault.Errors[0]
		return nil, RaiseError(apiExceptionFaultErrors.ErrorType, apiExceptionFaultErrors.Reason)
	}
	return &envelope.Body.CreateCreativesResponse, nil
}

// GetCreativesByStatement
//
// Gets a {@link CreativePage} of {@link Creative} objects that satisfy the given {@link
// Statement#query}. The following fields are supported for filtering:
//
// <table>
// <tr>
// <th scope="col">PQL Property</th> <th scope="col">Object Property</th>
// </tr>
// <tr>
// <td>{@code id}</td>
// <td>{@link Creative#id}</td>
// </tr>
// <tr>
// <td>{@code name}</td>
// <td>{@link Creative#name}</td>
// </tr>
// <tr>
// <td>{@code advertiserId}</td>
// <td>{@link Creative#advertiserId}</td>
// </tr>
// <tr>
// <td>{@code width}</td>
// <td>{@link Creative#size}</td>
// </tr>
// <tr>
// <td>{@code height}</td>
// <td>{@link Creative#size}</td>
// </tr>
// <tr>
// <td>{@code lastModifiedDateTime}</td>
// <td>{@link Creative#lastModifiedDateTime}</td>
// </tr>
// </table>
func (s *Service) GetCreativesByStatement(ctx context.Context, input GetCreativesByStatement) (*GetCreativesByStatementResponse, error) {
	parameterXML, err := gamxml.DeepMarshal(input, true)
	data := requestbody.DefaultRequestBody{
		NetworkCode:     s.networkCode,
		ApplicationName: s.applicationName,
		OperationName:   OperationGetCreativesByStatement,
		Parameters:      string(parameterXML),
	}

	soapBody, err := requestbody.GenerateDefaultRequestSoapBody(data)
	if err != nil {
		return nil, fmt.Errorf("failed to generate soap body: %w", err)
	}

	body, err := s.client.Call(ctx, s.wsdl, soapBody)
	if err != nil {
		return nil, err
	}

	var envelope Envelope
	if err := xml.Unmarshal(body, &envelope); err != nil {
		return nil, err
	}

	if envelope.Body.Fault.Detail.APIExecutionFault != nil {
		apiExceptionFaultErrors := envelope.Body.Fault.Detail.APIExecutionFault.Errors[0]
		return nil, RaiseError(apiExceptionFaultErrors.ErrorType, apiExceptionFaultErrors.Reason)
	}
	return &envelope.Body.GetCreativesByStatementResponse, nil
}

func (s *Service) PerformCreativeAction(ctx context.Context, action requestbody.PerformAction, input PerformCreativeAction) (*PerformCreativeActionResponse, error) {
	performActionBody, err := action.GetPerformActionBody()
	if err != nil {
		return nil, fmt.Errorf("failed to perform action: %w", err)
	}

	parameterXML, err := gamxml.DeepMarshal(input.FilterStatement, true)
	if err != nil {
		return nil, fmt.Errorf("failed to DeepMarshal: %w", err)
	}

	data := requestbody.PerformActionBodyData{
		NetworkCode:        s.networkCode,
		ApplicationName:    s.applicationName,
		OperationName:      OperationPerformCreativeAction,
		ActionName:         "creativeAction",
		ActionType:         action.GetActionType(),
		ActionField:        performActionBody,
		Statement:          "filterStatement",
		StatementParameter: string(parameterXML),
	}

	soapBody, err := requestbody.GeneratePerformActionSoapBody(data)
	if err != nil {
		return nil, fmt.Errorf("failed to generate soap body: %w", err)
	}

	body, err := s.client.Call(ctx, s.wsdl, soapBody)
	if err != nil {
		return nil, fmt.Errorf("failed to call: %w", err)
	}

	var envelope Envelope
	if err := xml.Unmarshal(body, &envelope); err != nil {
		return nil, fmt.Errorf("failed to unmarshal: %w", err)
	}

	if envelope.Body.Fault.Detail.APIExecutionFault != nil {
		// TODO handle multiple errors
		apiExceptionFaultErrors := envelope.Body.Fault.Detail.APIExecutionFault.Errors[0]
		return nil, RaiseError(apiExceptionFaultErrors.ErrorType, apiExceptionFaultErrors.Reason)
	}
	return &envelope.Body.PerformCreativeActionResponse, nil
}

// UpdateCreatives
//
// Updates the specified {@link Creative} objects.
func (s *Service) UpdateCreatives(ctx context.Context, input UpdateCreatives) (*UpdateCreativesResponse, error) {
	parameterXML, err := gamxml.DeepMarshal(input, true)
	data := requestbody.DefaultRequestBody{
		NetworkCode:     s.networkCode,
		ApplicationName: s.applicationName,
		OperationName:   OperationUpdateCreatives,
		Parameters:      string(parameterXML),
	}

	soapBody, err := requestbody.GenerateDefaultRequestSoapBody(data)
	if err != nil {
		return nil, fmt.Errorf("failed to generate soap body: %w", err)
	}

	body, err := s.client.Call(ctx, s.wsdl, soapBody)
	if err != nil {
		return nil, err
	}

	var envelope Envelope
	if err := xml.Unmarshal(body, &envelope); err != nil {
		return nil, err
	}

	if envelope.Body.Fault.Detail.APIExecutionFault != nil {
		apiExceptionFaultErrors := envelope.Body.Fault.Detail.APIExecutionFault.Errors[0]
		return nil, RaiseError(apiExceptionFaultErrors.ErrorType, apiExceptionFaultErrors.Reason)
	}
	return &envelope.Body.UpdateCreativesResponse, nil
}
