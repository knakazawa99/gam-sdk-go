// Code generated by gamwsdl/main.go. DO NOT EDIT.
package lineitemcreativeassociation

import (
	"errors"
)

func NewAdSenseAccountError(reason string) error {
	return &AdSenseAccountError{
		Reason: reason,
	}
}

func (e *AdSenseAccountError) Error() string {
	return "AdSenseAccountError error: " + e.Reason
}

func (e *AdSenseAccountError) Is(target error) bool {
	var errType *AdSenseAccountError
	return errors.As(target, &errType)
}

func NewApiError(reason string) error {
	return &ApiError{
		Reason: reason,
	}
}

func (e *ApiError) Error() string {
	return "ApiError error: " + e.Reason
}

func (e *ApiError) Is(target error) bool {
	var errType *ApiError
	return errors.As(target, &errType)
}

func NewApiException(reason string) error {
	return &ApiException{
		Reason: reason,
	}
}

func (e *ApiException) Error() string {
	return "ApiException error: " + e.Reason
}

func (e *ApiException) Is(target error) bool {
	var errType *ApiException
	return errors.As(target, &errType)
}

func NewApiVersionError(reason string) error {
	return &ApiVersionError{
		Reason: reason,
	}
}

func (e *ApiVersionError) Error() string {
	return "ApiVersionError error: " + e.Reason
}

func (e *ApiVersionError) Is(target error) bool {
	var errType *ApiVersionError
	return errors.As(target, &errType)
}

func NewApplicationException(reason string) error {
	return &ApplicationException{
		Reason: reason,
	}
}

func (e *ApplicationException) Error() string {
	return "ApplicationException error: " + e.Reason
}

func (e *ApplicationException) Is(target error) bool {
	var errType *ApplicationException
	return errors.As(target, &errType)
}

func NewAssetError(reason string) error {
	return &AssetError{
		Reason: reason,
	}
}

func (e *AssetError) Error() string {
	return "AssetError error: " + e.Reason
}

func (e *AssetError) Is(target error) bool {
	var errType *AssetError
	return errors.As(target, &errType)
}

func NewAudienceExtensionError(reason string) error {
	return &AudienceExtensionError{
		Reason: reason,
	}
}

func (e *AudienceExtensionError) Error() string {
	return "AudienceExtensionError error: " + e.Reason
}

func (e *AudienceExtensionError) Is(target error) bool {
	var errType *AudienceExtensionError
	return errors.As(target, &errType)
}

func NewAuthenticationError(reason string) error {
	return &AuthenticationError{
		Reason: reason,
	}
}

func (e *AuthenticationError) Error() string {
	return "AuthenticationError error: " + e.Reason
}

func (e *AuthenticationError) Is(target error) bool {
	var errType *AuthenticationError
	return errors.As(target, &errType)
}

func NewCollectionSizeError(reason string) error {
	return &CollectionSizeError{
		Reason: reason,
	}
}

func (e *CollectionSizeError) Error() string {
	return "CollectionSizeError error: " + e.Reason
}

func (e *CollectionSizeError) Is(target error) bool {
	var errType *CollectionSizeError
	return errors.As(target, &errType)
}

func NewCommonError(reason string) error {
	return &CommonError{
		Reason: reason,
	}
}

func (e *CommonError) Error() string {
	return "CommonError error: " + e.Reason
}

func (e *CommonError) Is(target error) bool {
	var errType *CommonError
	return errors.As(target, &errType)
}

func NewCreativeAssetMacroError(reason string) error {
	return &CreativeAssetMacroError{
		Reason: reason,
	}
}

func (e *CreativeAssetMacroError) Error() string {
	return "CreativeAssetMacroError error: " + e.Reason
}

func (e *CreativeAssetMacroError) Is(target error) bool {
	var errType *CreativeAssetMacroError
	return errors.As(target, &errType)
}

func NewCreativeError(reason string) error {
	return &CreativeError{
		Reason: reason,
	}
}

func (e *CreativeError) Error() string {
	return "CreativeError error: " + e.Reason
}

func (e *CreativeError) Is(target error) bool {
	var errType *CreativeError
	return errors.As(target, &errType)
}

func NewCreativePreviewError(reason string) error {
	return &CreativePreviewError{
		Reason: reason,
	}
}

func (e *CreativePreviewError) Error() string {
	return "CreativePreviewError error: " + e.Reason
}

func (e *CreativePreviewError) Is(target error) bool {
	var errType *CreativePreviewError
	return errors.As(target, &errType)
}

func NewCreativeSetError(reason string) error {
	return &CreativeSetError{
		Reason: reason,
	}
}

func (e *CreativeSetError) Error() string {
	return "CreativeSetError error: " + e.Reason
}

func (e *CreativeSetError) Is(target error) bool {
	var errType *CreativeSetError
	return errors.As(target, &errType)
}

func NewCreativeTemplateError(reason string) error {
	return &CreativeTemplateError{
		Reason: reason,
	}
}

func (e *CreativeTemplateError) Error() string {
	return "CreativeTemplateError error: " + e.Reason
}

func (e *CreativeTemplateError) Is(target error) bool {
	var errType *CreativeTemplateError
	return errors.As(target, &errType)
}

func NewCreativeTemplateOperationError(reason string) error {
	return &CreativeTemplateOperationError{
		Reason: reason,
	}
}

func (e *CreativeTemplateOperationError) Error() string {
	return "CreativeTemplateOperationError error: " + e.Reason
}

func (e *CreativeTemplateOperationError) Is(target error) bool {
	var errType *CreativeTemplateOperationError
	return errors.As(target, &errType)
}

func NewCrossSellError(reason string) error {
	return &CrossSellError{
		Reason: reason,
	}
}

func (e *CrossSellError) Error() string {
	return "CrossSellError error: " + e.Reason
}

func (e *CrossSellError) Is(target error) bool {
	var errType *CrossSellError
	return errors.As(target, &errType)
}

func NewCustomCreativeError(reason string) error {
	return &CustomCreativeError{
		Reason: reason,
	}
}

func (e *CustomCreativeError) Error() string {
	return "CustomCreativeError error: " + e.Reason
}

func (e *CustomCreativeError) Is(target error) bool {
	var errType *CustomCreativeError
	return errors.As(target, &errType)
}

func NewCustomFieldValueError(reason string) error {
	return &CustomFieldValueError{
		Reason: reason,
	}
}

func (e *CustomFieldValueError) Error() string {
	return "CustomFieldValueError error: " + e.Reason
}

func (e *CustomFieldValueError) Is(target error) bool {
	var errType *CustomFieldValueError
	return errors.As(target, &errType)
}

func NewEntityChildrenLimitReachedError(reason string) error {
	return &EntityChildrenLimitReachedError{
		Reason: reason,
	}
}

func (e *EntityChildrenLimitReachedError) Error() string {
	return "EntityChildrenLimitReachedError error: " + e.Reason
}

func (e *EntityChildrenLimitReachedError) Is(target error) bool {
	var errType *EntityChildrenLimitReachedError
	return errors.As(target, &errType)
}

func NewEntityLimitReachedError(reason string) error {
	return &EntityLimitReachedError{
		Reason: reason,
	}
}

func (e *EntityLimitReachedError) Error() string {
	return "EntityLimitReachedError error: " + e.Reason
}

func (e *EntityLimitReachedError) Is(target error) bool {
	var errType *EntityLimitReachedError
	return errors.As(target, &errType)
}

func NewFeatureError(reason string) error {
	return &FeatureError{
		Reason: reason,
	}
}

func (e *FeatureError) Error() string {
	return "FeatureError error: " + e.Reason
}

func (e *FeatureError) Is(target error) bool {
	var errType *FeatureError
	return errors.As(target, &errType)
}

func NewFileError(reason string) error {
	return &FileError{
		Reason: reason,
	}
}

func (e *FileError) Error() string {
	return "FileError error: " + e.Reason
}

func (e *FileError) Is(target error) bool {
	var errType *FileError
	return errors.As(target, &errType)
}

func NewHtmlBundleProcessorError(reason string) error {
	return &HtmlBundleProcessorError{
		Reason: reason,
	}
}

func (e *HtmlBundleProcessorError) Error() string {
	return "HtmlBundleProcessorError error: " + e.Reason
}

func (e *HtmlBundleProcessorError) Is(target error) bool {
	var errType *HtmlBundleProcessorError
	return errors.As(target, &errType)
}

func NewImageError(reason string) error {
	return &ImageError{
		Reason: reason,
	}
}

func (e *ImageError) Error() string {
	return "ImageError error: " + e.Reason
}

func (e *ImageError) Is(target error) bool {
	var errType *ImageError
	return errors.As(target, &errType)
}

func NewInternalApiError(reason string) error {
	return &InternalApiError{
		Reason: reason,
	}
}

func (e *InternalApiError) Error() string {
	return "InternalApiError error: " + e.Reason
}

func (e *InternalApiError) Is(target error) bool {
	var errType *InternalApiError
	return errors.As(target, &errType)
}

func NewInvalidPhoneNumberError(reason string) error {
	return &InvalidPhoneNumberError{
		Reason: reason,
	}
}

func (e *InvalidPhoneNumberError) Error() string {
	return "InvalidPhoneNumberError error: " + e.Reason
}

func (e *InvalidPhoneNumberError) Is(target error) bool {
	var errType *InvalidPhoneNumberError
	return errors.As(target, &errType)
}

func NewInvalidUrlError(reason string) error {
	return &InvalidUrlError{
		Reason: reason,
	}
}

func (e *InvalidUrlError) Error() string {
	return "InvalidUrlError error: " + e.Reason
}

func (e *InvalidUrlError) Is(target error) bool {
	var errType *InvalidUrlError
	return errors.As(target, &errType)
}

func NewLabelEntityAssociationError(reason string) error {
	return &LabelEntityAssociationError{
		Reason: reason,
	}
}

func (e *LabelEntityAssociationError) Error() string {
	return "LabelEntityAssociationError error: " + e.Reason
}

func (e *LabelEntityAssociationError) Is(target error) bool {
	var errType *LabelEntityAssociationError
	return errors.As(target, &errType)
}

func NewLineItemCreativeAssociationError(reason string) error {
	return &LineItemCreativeAssociationError{
		Reason: reason,
	}
}

func (e *LineItemCreativeAssociationError) Error() string {
	return "LineItemCreativeAssociationError error: " + e.Reason
}

func (e *LineItemCreativeAssociationError) Is(target error) bool {
	var errType *LineItemCreativeAssociationError
	return errors.As(target, &errType)
}

func NewLineItemCreativeAssociationOperationError(reason string) error {
	return &LineItemCreativeAssociationOperationError{
		Reason: reason,
	}
}

func (e *LineItemCreativeAssociationOperationError) Error() string {
	return "LineItemCreativeAssociationOperationError error: " + e.Reason
}

func (e *LineItemCreativeAssociationOperationError) Is(target error) bool {
	var errType *LineItemCreativeAssociationOperationError
	return errors.As(target, &errType)
}

func NewLineItemError(reason string) error {
	return &LineItemError{
		Reason: reason,
	}
}

func (e *LineItemError) Error() string {
	return "LineItemError error: " + e.Reason
}

func (e *LineItemError) Is(target error) bool {
	var errType *LineItemError
	return errors.As(target, &errType)
}

func NewNotNullError(reason string) error {
	return &NotNullError{
		Reason: reason,
	}
}

func (e *NotNullError) Error() string {
	return "NotNullError error: " + e.Reason
}

func (e *NotNullError) Is(target error) bool {
	var errType *NotNullError
	return errors.As(target, &errType)
}

func NewNullError(reason string) error {
	return &NullError{
		Reason: reason,
	}
}

func (e *NullError) Error() string {
	return "NullError error: " + e.Reason
}

func (e *NullError) Is(target error) bool {
	var errType *NullError
	return errors.As(target, &errType)
}

func NewOrderError(reason string) error {
	return &OrderError{
		Reason: reason,
	}
}

func (e *OrderError) Error() string {
	return "OrderError error: " + e.Reason
}

func (e *OrderError) Is(target error) bool {
	var errType *OrderError
	return errors.As(target, &errType)
}

func NewParseError(reason string) error {
	return &ParseError{
		Reason: reason,
	}
}

func (e *ParseError) Error() string {
	return "ParseError error: " + e.Reason
}

func (e *ParseError) Is(target error) bool {
	var errType *ParseError
	return errors.As(target, &errType)
}

func NewPermissionError(reason string) error {
	return &PermissionError{
		Reason: reason,
	}
}

func (e *PermissionError) Error() string {
	return "PermissionError error: " + e.Reason
}

func (e *PermissionError) Is(target error) bool {
	var errType *PermissionError
	return errors.As(target, &errType)
}

func NewPublisherQueryLanguageContextError(reason string) error {
	return &PublisherQueryLanguageContextError{
		Reason: reason,
	}
}

func (e *PublisherQueryLanguageContextError) Error() string {
	return "PublisherQueryLanguageContextError error: " + e.Reason
}

func (e *PublisherQueryLanguageContextError) Is(target error) bool {
	var errType *PublisherQueryLanguageContextError
	return errors.As(target, &errType)
}

func NewPublisherQueryLanguageSyntaxError(reason string) error {
	return &PublisherQueryLanguageSyntaxError{
		Reason: reason,
	}
}

func (e *PublisherQueryLanguageSyntaxError) Error() string {
	return "PublisherQueryLanguageSyntaxError error: " + e.Reason
}

func (e *PublisherQueryLanguageSyntaxError) Is(target error) bool {
	var errType *PublisherQueryLanguageSyntaxError
	return errors.As(target, &errType)
}

func NewQuotaError(reason string) error {
	return &QuotaError{
		Reason: reason,
	}
}

func (e *QuotaError) Error() string {
	return "QuotaError error: " + e.Reason
}

func (e *QuotaError) Is(target error) bool {
	var errType *QuotaError
	return errors.As(target, &errType)
}

func NewRangeError(reason string) error {
	return &RangeError{
		Reason: reason,
	}
}

func (e *RangeError) Error() string {
	return "RangeError error: " + e.Reason
}

func (e *RangeError) Is(target error) bool {
	var errType *RangeError
	return errors.As(target, &errType)
}

func NewRequiredCollectionError(reason string) error {
	return &RequiredCollectionError{
		Reason: reason,
	}
}

func (e *RequiredCollectionError) Error() string {
	return "RequiredCollectionError error: " + e.Reason
}

func (e *RequiredCollectionError) Is(target error) bool {
	var errType *RequiredCollectionError
	return errors.As(target, &errType)
}

func NewRequiredError(reason string) error {
	return &RequiredError{
		Reason: reason,
	}
}

func (e *RequiredError) Error() string {
	return "RequiredError error: " + e.Reason
}

func (e *RequiredError) Is(target error) bool {
	var errType *RequiredError
	return errors.As(target, &errType)
}

func NewRequiredNumberError(reason string) error {
	return &RequiredNumberError{
		Reason: reason,
	}
}

func (e *RequiredNumberError) Error() string {
	return "RequiredNumberError error: " + e.Reason
}

func (e *RequiredNumberError) Is(target error) bool {
	var errType *RequiredNumberError
	return errors.As(target, &errType)
}

func NewRequiredSizeError(reason string) error {
	return &RequiredSizeError{
		Reason: reason,
	}
}

func (e *RequiredSizeError) Error() string {
	return "RequiredSizeError error: " + e.Reason
}

func (e *RequiredSizeError) Is(target error) bool {
	var errType *RequiredSizeError
	return errors.As(target, &errType)
}

func NewRichMediaStudioCreativeError(reason string) error {
	return &RichMediaStudioCreativeError{
		Reason: reason,
	}
}

func (e *RichMediaStudioCreativeError) Error() string {
	return "RichMediaStudioCreativeError error: " + e.Reason
}

func (e *RichMediaStudioCreativeError) Is(target error) bool {
	var errType *RichMediaStudioCreativeError
	return errors.As(target, &errType)
}

func NewServerError(reason string) error {
	return &ServerError{
		Reason: reason,
	}
}

func (e *ServerError) Error() string {
	return "ServerError error: " + e.Reason
}

func (e *ServerError) Is(target error) bool {
	var errType *ServerError
	return errors.As(target, &errType)
}

func NewSetTopBoxCreativeError(reason string) error {
	return &SetTopBoxCreativeError{
		Reason: reason,
	}
}

func (e *SetTopBoxCreativeError) Error() string {
	return "SetTopBoxCreativeError error: " + e.Reason
}

func (e *SetTopBoxCreativeError) Is(target error) bool {
	var errType *SetTopBoxCreativeError
	return errors.As(target, &errType)
}

func NewStatementError(reason string) error {
	return &StatementError{
		Reason: reason,
	}
}

func (e *StatementError) Error() string {
	return "StatementError error: " + e.Reason
}

func (e *StatementError) Is(target error) bool {
	var errType *StatementError
	return errors.As(target, &errType)
}

func NewStringFormatError(reason string) error {
	return &StringFormatError{
		Reason: reason,
	}
}

func (e *StringFormatError) Error() string {
	return "StringFormatError error: " + e.Reason
}

func (e *StringFormatError) Is(target error) bool {
	var errType *StringFormatError
	return errors.As(target, &errType)
}

func NewStringLengthError(reason string) error {
	return &StringLengthError{
		Reason: reason,
	}
}

func (e *StringLengthError) Error() string {
	return "StringLengthError error: " + e.Reason
}

func (e *StringLengthError) Is(target error) bool {
	var errType *StringLengthError
	return errors.As(target, &errType)
}

func NewSwiffyConversionError(reason string) error {
	return &SwiffyConversionError{
		Reason: reason,
	}
}

func (e *SwiffyConversionError) Error() string {
	return "SwiffyConversionError error: " + e.Reason
}

func (e *SwiffyConversionError) Is(target error) bool {
	var errType *SwiffyConversionError
	return errors.As(target, &errType)
}

func NewTemplateInstantiatedCreativeError(reason string) error {
	return &TemplateInstantiatedCreativeError{
		Reason: reason,
	}
}

func (e *TemplateInstantiatedCreativeError) Error() string {
	return "TemplateInstantiatedCreativeError error: " + e.Reason
}

func (e *TemplateInstantiatedCreativeError) Is(target error) bool {
	var errType *TemplateInstantiatedCreativeError
	return errors.As(target, &errType)
}

func NewTranscodingError(reason string) error {
	return &TranscodingError{
		Reason: reason,
	}
}

func (e *TranscodingError) Error() string {
	return "TranscodingError error: " + e.Reason
}

func (e *TranscodingError) Is(target error) bool {
	var errType *TranscodingError
	return errors.As(target, &errType)
}

func NewTypeError(reason string) error {
	return &TypeError{
		Reason: reason,
	}
}

func (e *TypeError) Error() string {
	return "TypeError error: " + e.Reason
}

func (e *TypeError) Is(target error) bool {
	var errType *TypeError
	return errors.As(target, &errType)
}

func NewUniqueError(reason string) error {
	return &UniqueError{
		Reason: reason,
	}
}

func (e *UniqueError) Error() string {
	return "UniqueError error: " + e.Reason
}

func (e *UniqueError) Is(target error) bool {
	var errType *UniqueError
	return errors.As(target, &errType)
}

// RaiseError raises an error based on the error type and reason.
func RaiseError(errorType, reason string) error {
	switch errorType {

	case "AdSenseAccountError":
		return NewAdSenseAccountError(reason)

	case "ApiError":
		return NewApiError(reason)

	case "ApiException":
		return NewApiException(reason)

	case "ApiVersionError":
		return NewApiVersionError(reason)

	case "ApplicationException":
		return NewApplicationException(reason)

	case "AssetError":
		return NewAssetError(reason)

	case "AudienceExtensionError":
		return NewAudienceExtensionError(reason)

	case "AuthenticationError":
		return NewAuthenticationError(reason)

	case "CollectionSizeError":
		return NewCollectionSizeError(reason)

	case "CommonError":
		return NewCommonError(reason)

	case "CreativeAssetMacroError":
		return NewCreativeAssetMacroError(reason)

	case "CreativeError":
		return NewCreativeError(reason)

	case "CreativePreviewError":
		return NewCreativePreviewError(reason)

	case "CreativeSetError":
		return NewCreativeSetError(reason)

	case "CreativeTemplateError":
		return NewCreativeTemplateError(reason)

	case "CreativeTemplateOperationError":
		return NewCreativeTemplateOperationError(reason)

	case "CrossSellError":
		return NewCrossSellError(reason)

	case "CustomCreativeError":
		return NewCustomCreativeError(reason)

	case "CustomFieldValueError":
		return NewCustomFieldValueError(reason)

	case "EntityChildrenLimitReachedError":
		return NewEntityChildrenLimitReachedError(reason)

	case "EntityLimitReachedError":
		return NewEntityLimitReachedError(reason)

	case "FeatureError":
		return NewFeatureError(reason)

	case "FileError":
		return NewFileError(reason)

	case "HtmlBundleProcessorError":
		return NewHtmlBundleProcessorError(reason)

	case "ImageError":
		return NewImageError(reason)

	case "InternalApiError":
		return NewInternalApiError(reason)

	case "InvalidPhoneNumberError":
		return NewInvalidPhoneNumberError(reason)

	case "InvalidUrlError":
		return NewInvalidUrlError(reason)

	case "LabelEntityAssociationError":
		return NewLabelEntityAssociationError(reason)

	case "LineItemCreativeAssociationError":
		return NewLineItemCreativeAssociationError(reason)

	case "LineItemCreativeAssociationOperationError":
		return NewLineItemCreativeAssociationOperationError(reason)

	case "LineItemError":
		return NewLineItemError(reason)

	case "NotNullError":
		return NewNotNullError(reason)

	case "NullError":
		return NewNullError(reason)

	case "OrderError":
		return NewOrderError(reason)

	case "ParseError":
		return NewParseError(reason)

	case "PermissionError":
		return NewPermissionError(reason)

	case "PublisherQueryLanguageContextError":
		return NewPublisherQueryLanguageContextError(reason)

	case "PublisherQueryLanguageSyntaxError":
		return NewPublisherQueryLanguageSyntaxError(reason)

	case "QuotaError":
		return NewQuotaError(reason)

	case "RangeError":
		return NewRangeError(reason)

	case "RequiredCollectionError":
		return NewRequiredCollectionError(reason)

	case "RequiredError":
		return NewRequiredError(reason)

	case "RequiredNumberError":
		return NewRequiredNumberError(reason)

	case "RequiredSizeError":
		return NewRequiredSizeError(reason)

	case "RichMediaStudioCreativeError":
		return NewRichMediaStudioCreativeError(reason)

	case "ServerError":
		return NewServerError(reason)

	case "SetTopBoxCreativeError":
		return NewSetTopBoxCreativeError(reason)

	case "StatementError":
		return NewStatementError(reason)

	case "StringFormatError":
		return NewStringFormatError(reason)

	case "StringLengthError":
		return NewStringLengthError(reason)

	case "SwiffyConversionError":
		return NewSwiffyConversionError(reason)

	case "TemplateInstantiatedCreativeError":
		return NewTemplateInstantiatedCreativeError(reason)

	case "TranscodingError":
		return NewTranscodingError(reason)

	case "TypeError":
		return NewTypeError(reason)

	case "UniqueError":
		return NewUniqueError(reason)

	default:
		return nil
	}
}
