package gamtemplates

var GamErrorTemplate = `// Code generated by gamwsdl/main.go. DO NOT EDIT.
package {{ generatePackageName .Definition.Service.Name }}

import (
	"context"
	"errors"
	"encoding/xml"
	"fmt"

	"github.com/knakazawa99/gam-sdk-go/pkg/gam/requestbody"
	"github.com/knakazawa99/gam-sdk-go/pkg/gam/soap"
	gamxml "github.com/knakazawa99/gam-sdk-go/pkg/xml"
)


{{/* Generate Error Codes */}}
{{ range .Definition.Types.Schema.ComplexTypes }}
	{{ $name := .Name }}
	{{ if isNameIncludeError .Name }}
		func New{{ $name | toUpperCamelFromCamelCase }}(reason string) error {
			return &{{ $name | toUpperCamelFromCamelCase }}{
				Reason: reason,
			}
		}

		func (e *{{ $name | toUpperCamelFromCamelCase }}) Error() string {
			return "{{ $name | toUpperCamelFromCamelCase }} error: " + e.Reason
		}

		func (e *{{ $name | toUpperCamelFromCamelCase }}) Is(target error) bool {
			var errType *{{ $name | toUpperCamelFromCamelCase }}
			return errors.As(target, &errType)
		}
	{{ else }}	
		{{ if ne .ComplexContent nil }}
			{{ $annotationDocument := "" }}
			{{ if ne .Annotation nil }}	
				{{ $annotationDocument := .Annotation.Documentation }}
			{{ end }}
			{{ range .ComplexContent.Extension.Sequence.Elements }}
				{{ $typeName := getTypeFromElementType .Type }}  
				{{ if isElementTypeError $typeName }}
					//  New{{ $name | toUpperCamelFromCamelCase }} {{ $annotationDocument | makeComment }}
					func New{{ $name | toUpperCamelFromCamelCase }}(reason string) error {
						return &{{ $name | toUpperCamelFromCamelCase }}{
							Reason: reason,
						}
					}
	
					func (e *{{ $name | toUpperCamelFromCamelCase }}) Error() string {
						return "{{ $name | toUpperCamelFromCamelCase }} error: " + e.Reason
					}
	
					func (e *{{ $name | toUpperCamelFromCamelCase }}) Is(target error) bool {
						var errType *{{ $name | toUpperCamelFromCamelCase }}
						return errors.As(target, &errType)
					}
					
				{{ end }}
			{{ end }}
		{{ end }}
	{{ end }}
{{ end }}

{{/* Generate Error Raise Codes */}}
// RaiseError raises an error based on the error type and reason.
func RaiseError(errorType, reason string) error {
	switch errorType {
		{{ range .Definition.Types.Schema.ComplexTypes }}
			{{ $name := .Name }}
			{{ if isNameIncludeError .Name }}
				case "{{ $name | toUpperCamelFromCamelCase }}":
					return New{{ $name | toUpperCamelFromCamelCase }}(reason)
			{{ else }}
				{{ if ne .ComplexContent nil }}
					{{ range .ComplexContent.Extension.Sequence.Elements }}
						{{ $typeName := getTypeFromElementType .Type }}  
						{{ if isElementTypeError $typeName }}
							case "{{ $name | toUpperCamelFromCamelCase }}":
							   return New{{ $name | toUpperCamelFromCamelCase }}(reason)
						{{ end }}
					{{ end }}
				{{ end }}
			{{ end }}
		{{ end }}
		default:
			return nil
	}
}
`
